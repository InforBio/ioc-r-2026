[
  {
    "objectID": "index.html#what-is-ioc",
    "href": "index.html#what-is-ioc",
    "title": "Welcome To the IOC Training!",
    "section": "What is IOC?",
    "text": "What is IOC?\nThe InforBio platform has developed an “Interactive Online Companionship” (IOC) specifically tailored to initiate researchers into bioinformatics. The IOC involved one-to-many virtual work sessions where companions are trained to analyze their own data.\nAll IOC programs are structured into a series of modules, with each module building upon the knowledge and skills acquired in the previous one. One module lasts one week, during which companions dive into online materials to ensure they understand and internalize the content. Companions then complete quizzes and exercises using both public and their own data to gauge their understanding, receiving personalized feedback on their work. To facilitate their learning, we provide access to computational resources such as Rstudio and Galaxy servers. The module wraps up with a 3 hours training to recap the week’s material and address any questions, with 7 videoconference sessions and 3 in-person sessions. These videoconferences are recorded and made available for later viewing, ensuring continuous access to the learning resources.\nBy the end of an IOC, companions will be equipped with expertise and confidence to run their own analyses independently."
  },
  {
    "objectID": "index.html#ioc-tools",
    "href": "index.html#ioc-tools",
    "title": "Welcome To the IOC Training!",
    "section": "IOC tools",
    "text": "IOC tools\n\nZoom\nWe will use Zoom for videoconferencing.\nPlease follow the rules for usage:\n\nPlease be on time.\nTechnical setup:\n\nEnsure your internet connection is stable.\nTest your camera and microphone before the session.\n\nDuring the session:\n\nKeep your microphone muted unless you’re speaking to avoid background noise.\nUse the “Raise Hand” feature if you want to ask a question during the lecture.\nKeep your camera on if possible to create a more interactive environment.\n\nRecorded sessions are for personal review only. Do not distribute them without permission.\n\n\n\nSlack\nSlack is a dedicated workspace for communication and staying connected between sessions.\nIf you haven’t already use it, you need to create a Slack account.\nIf you have a Slack account, you can either connect to the account using this webpage, or use a desktop version on your computer. (Slack Windows desktop, Slack Mac desktop)\nAnd you will receive an invitation link to join the IOC Slack of your group.\n\nPost messages in the correct channel, e.g., “questions” for asking about course content.\nWhen asking questions, please be specific and clear with a minimal context, include screenshots or error message to help others understand the issue.\nWhen discussing a question, please reply in the thread to avoid flooding the channel.\n\n\n\nTrello\nTrello is a tool to help you stay organized and track your learning progress.\nYou will be invited to join a Trello board for this IOC. We will create one list per student, please add one card for each session to add your notes, summary, etc."
  },
  {
    "objectID": "ioc_r_info.html",
    "href": "ioc_r_info.html",
    "title": "IOC R Training Information",
    "section": "",
    "text": "Welcome to the new edition of IOC R Training! This page contains all the essential details for the training. Please bookmark this page for quick access."
  },
  {
    "objectID": "ioc_r_info.html#calendar",
    "href": "ioc_r_info.html#calendar",
    "title": "IOC R Training Information",
    "section": "Calendar",
    "text": "Calendar\n\nFrench Group\n\nStarts from: the week of 3rd November 2025\n\nTime slots: 9:30 am – 12:30 pm\nFormat: Hybrid – with weeks 1, 5 and 9 held in-persion at InforBio office; all other sessions take place online.\nProvisional Schedule:\n\n\n\n\n\n\n\n\n\nWeek\nSession\nDate\nTime\n\n\n\n\nWeek 1 (in-person)\nKickstart with R: Your Gateway to Data Science\n3rd November\n9:30 am – 12:30 pm\n\n\nWeek 2\nData Foundations: Vectors and Matrices\n10th November\n9:30 am – 12:30 pm\n\n\nWeek 3\nMore Complex Data Structures: Data Frames and Lists\n17th November\n9:30 am – 12:30 pm\n\n\nWeek 4\nBuilding Logic: Operators, Conditions and Functions\n24th November\n9:30 am – 12:30 pm\n\n\nWeek 5 (in-person)\nGraphing with {ggplot2} (Part 1)\n1st December\n9:30 am – 12:30 pm\n\n\nWeek 6\nR-fresh: Revisiting the Essentials\n5th January\n9:30 am – 12:30 pm\n\n\nWeek 7\nTidy Up: Wrangling Data with {dplyr} and {tidyr}\n12th January\n9:30 am – 12:30 pm\n\n\nWeek 8\nGraphs Level Up: {ggplot2} (Part 2) & Custom Functions\n26th January\n9:30 am – 12:30 pm\n\n\nWeek 9 (in-person)\nPutting It All Together: Reproducible Analysis with Quarto\n9th March\n9:30 am – 12:30 pm\n\n\nWeek 10\nYour project presentation\nTBD\nTBD\n\n\n\n\n\n\nEnglish Group\n\nStarts from: Monday, 13th January 2025\n\nTime slots: Mondays 9:30 am – 12:00 pm\n\nLocation: Online (Zoom link will be shared prior to the session by email)\nProvisional Schedule:\n\n\n\n\n\n\n\n\n\nWeek\nSession\nDate\nTime\n\n\n\n\nWeek 1\nKickstart with R: Your Gateway to Data Science\n13th January\n9:30 am – 12:00 pm\n\n\nWeek 2\nData Foundations: Vectors and Matrices\n20th January\n9:30 am – 12:00 pm\n\n\nWeek 3\nMore Complex Data Structures: Data Frames and Lists\n27th January\n9:30 am – 12:00 pm\n\n\nWeek 4\nBuilding Logic: Operators, Conditions, and Functions\n3rd February\n9:30 am – 12:00 pm\n\n\nWeek 5\nGraphing with {ggplot2}\n10th February\n9:30 am – 12:00 pm\n\n\nWeek 6\nR-fresh: Revisiting the Essentials\n3rd March\n2:00 pm – 4:30 pm\n\n\nWeek 7\nSmart Shortcuts: Mastering the apply Family\n10th March\n9:30 am – 12:00 pm\n\n\nWeek 8\nTidy Your Data: Exploring {tidyr} and {dplyr}\n17th March\n9:30 am – 12:00 pm\n\n\nWeek 9\nString Tricks & Final Review\n24nd March\n9:30 am – 12:00 pm\n\n\nWeek 10\nYour project presentation\n6th May\n1:00 pm - 4:00 pm"
  },
  {
    "objectID": "ioc_r_info.html#recommended-readings",
    "href": "ioc_r_info.html#recommended-readings",
    "title": "IOC R Training Information",
    "section": "Recommended Readings",
    "text": "Recommended Readings\n\nR for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\nHands-On Programming with R by Garrett Grolemund\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham\nYaRrr! The Pirate’s Guide to R by Nathaniel D. Phillips\nCRAN R Documentation"
  },
  {
    "objectID": "ioc_r/week04/r_w04_work.html",
    "href": "ioc_r/week04/r_w04_work.html",
    "title": "Week 4 - Homework",
    "section": "",
    "text": "Import the read-counts.csv file.\n\nQuick reminder: this data file contains gene expression values of samples from four groups, sample names are prefixed by “WT”, “SET1”, “SET1.RRP6” and “RRP6”. Each group has 10 samples.\n\nCalculate the average gene expression per gene across the 10 samples in the “WT” group.\n\n\nNow, repeat the previous step to calculate the average expression for the remaining three groups: “SET1”, “SET1.RRP6” and “RRP6”\n\n\nStore the four average values in a list named avg_list, using the group names as the names of the list.\nDisplay the first 5 average values for the “SET1.RRP6” group.\n\n\nTransform the list obtained in question 3 to a data frame using as.data.frame(). Show the head lines of your data frame.\n\n\n\n\n\n\n\nTip\n\n\n\nA data frame can be considered as a list of equal-length vectors.\n\n\n\nWhat are the genes having an average greater than 10000 in WT and SET1 samples? Compare if there are genes in common using learned operator or the intersect() function.\n\n\nCheck if the average expression of the “RRP6” group is normally distributed (?shapiro.test()) using significance level at 5%. What is the p-value of normality test? If it’s normally distributed, draw directly a histogram (?hist()) for the values. Otherwise, draw a histogram for the log-transformed values.\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week04/r_w04_exos.html",
    "href": "ioc_r/week04/r_w04_exos.html",
    "title": "Week 4 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week04/r_w04_exos.html#goals",
    "href": "ioc_r/week04/r_w04_exos.html#goals",
    "title": "Week 4 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nUnderstand and use operators to filter data with precision.\nApply functions to perform basic calculations and data manipulation."
  },
  {
    "objectID": "ioc_r/week04/r_w04_exos.html#import-data",
    "href": "ioc_r/week04/r_w04_exos.html#import-data",
    "title": "Week 4 - Hands-On Examples",
    "section": "Import Data",
    "text": "Import Data\nA gene-level differential expression (DE) analysis was performed to compare SET1 samples to WT samples using data from read-counts.csv.\nThe analysis results are available via this link.\n\nDonwload the result file and upload it to your data folder.\nImport the data using the read_csv() function from the package readr. (See the documentation with ?read_csv) Name the imported results de_res.\n\n\nlibrary(readr)\nde_res &lt;- read_csv(\n  file = \"../exos_data/toy_DEanalysis.csv\",  # replace the path with your own\n  col_names = TRUE\n)\n\nRows: 45 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): gene_name\ndbl (6): baseMean, log2FoldChange, lfcSE, stat, pvalue, padj\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "ioc_r/week04/r_w04_exos.html#exercises",
    "href": "ioc_r/week04/r_w04_exos.html#exercises",
    "title": "Week 4 - Hands-On Examples",
    "section": "Exercises",
    "text": "Exercises\n\nCheck the structure of de_res using an appropriate R function. What are the dimensions?\n\n\nstr(de_res)\n\nspc_tbl_ [45 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ gene_name     : chr [1:45] \"HTB2\" \"HHF1\" \"HHT1\" \"POL30\" ...\n $ baseMean      : num [1:45] 20259 9821 1539 1274 316 ...\n $ log2FoldChange: num [1:45] -0.3757 0.1789 0.0866 0.4165 0.2189 ...\n $ lfcSE         : num [1:45] 0.447 0.536 0.412 0.422 0.434 ...\n $ stat          : num [1:45] -0.841 0.334 0.21 0.988 0.505 ...\n $ pvalue        : num [1:45] 0.4 0.739 0.834 0.323 0.614 ...\n $ padj          : num [1:45] 0.891 0.906 0.915 0.891 0.891 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   gene_name = col_character(),\n  ..   baseMean = col_double(),\n  ..   log2FoldChange = col_double(),\n  ..   lfcSE = col_double(),\n  ..   stat = col_double(),\n  ..   pvalue = col_double(),\n  ..   padj = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nThe result is a data frame with 45 rows and 7 columns.\nThe result contains following columns:\n\ngene_name: gene name\nbaseMean: mean of normalized counts for all samples\nlog2FoldChange: log2 fold change\nlfcSE: standard error\nstat: Wald statistic\npvalue: Wald test p-value\npadj: adjusted p-values (Benjamini-Hochberg procedure)\n\n\nFilter the rows where the gene has a log2 fold change (log2FoldChange) greater than 0.5.\n\n\nde_res[de_res$log2FoldChange &gt; 0.5, ]\n\n# A tibble: 6 × 7\n  gene_name baseMean log2FoldChange lfcSE  stat       pvalue        padj\n  &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 SUT476        88.1          0.994 0.386  2.58 0.00999      0.0761     \n2 CDC20        217.           0.789 0.491  1.61 0.108        0.579      \n3 CLB6         111.           0.737 0.545  1.35 0.176        0.720      \n4 LOH1          48.6          2.23  0.397  5.61 0.0000000206 0.000000927\n5 SUT2873       26.0          1.43  0.369  3.87 0.000110     0.00165    \n6 ACM1         140.           0.733 0.486  1.51 0.132        0.593      \n\n\n\nFilter the rows where the gene has a log2 fold change smaller than -0.5.\n\n\nde_res[de_res$log2FoldChange &lt; -0.5, ]\n\n# A tibble: 5 × 7\n  gene_name baseMean log2FoldChange lfcSE  stat   pvalue    padj\n  &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 APQ12      5423.           -0.640 0.237 -2.70 0.00684  0.0761 \n2 FAR1       5927.           -1.51  0.675 -2.23 0.0254   0.163  \n3 SUT24       156.           -0.844 0.328 -2.57 0.0101   0.0761 \n4 PIR3        304.           -2.37  0.608 -3.89 0.000100 0.00165\n5 TUB33         2.95         -0.872 0.554 -1.57 0.116    0.579  \n\n\n\nFilter the rows where the gene has a log2 fold change greater than 0.5 or smaller than -0.5.\n\n\nde_res[de_res$log2FoldChange &gt; 0.5 | de_res$log2FoldChange &lt; -0.5, ]\n\n# A tibble: 11 × 7\n   gene_name baseMean log2FoldChange lfcSE  stat       pvalue        padj\n   &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 SUT476       88.1           0.994 0.386  2.58 0.00999      0.0761     \n 2 APQ12      5423.           -0.640 0.237 -2.70 0.00684      0.0761     \n 3 CDC20       217.            0.789 0.491  1.61 0.108        0.579      \n 4 CLB6        111.            0.737 0.545  1.35 0.176        0.720      \n 5 FAR1       5927.           -1.51  0.675 -2.23 0.0254       0.163      \n 6 SUT24       156.           -0.844 0.328 -2.57 0.0101       0.0761     \n 7 LOH1         48.6           2.23  0.397  5.61 0.0000000206 0.000000927\n 8 PIR3        304.           -2.37  0.608 -3.89 0.000100     0.00165    \n 9 TUB33         2.95         -0.872 0.554 -1.57 0.116        0.579      \n10 SUT2873      26.0           1.43  0.369  3.87 0.000110     0.00165    \n11 ACM1        140.            0.733 0.486  1.51 0.132        0.593      \n\n## Bonus: we can test the absolute value of log2FoldChange to simplify condition\nabs(c(0.5, -0.5)) # how abs() works, ?abs\n\n[1] 0.5 0.5\n\nde_res[abs(de_res$log2FoldChange) &gt; 0.5, ]\n\n# A tibble: 11 × 7\n   gene_name baseMean log2FoldChange lfcSE  stat       pvalue        padj\n   &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 SUT476       88.1           0.994 0.386  2.58 0.00999      0.0761     \n 2 APQ12      5423.           -0.640 0.237 -2.70 0.00684      0.0761     \n 3 CDC20       217.            0.789 0.491  1.61 0.108        0.579      \n 4 CLB6        111.            0.737 0.545  1.35 0.176        0.720      \n 5 FAR1       5927.           -1.51  0.675 -2.23 0.0254       0.163      \n 6 SUT24       156.           -0.844 0.328 -2.57 0.0101       0.0761     \n 7 LOH1         48.6           2.23  0.397  5.61 0.0000000206 0.000000927\n 8 PIR3        304.           -2.37  0.608 -3.89 0.000100     0.00165    \n 9 TUB33         2.95         -0.872 0.554 -1.57 0.116        0.579      \n10 SUT2873      26.0           1.43  0.369  3.87 0.000110     0.00165    \n11 ACM1        140.            0.733 0.486  1.51 0.132        0.593      \n\n\n\nFilter the rows where the gene has a log2 fold change greater than 0.5 and adjusted p-value (padj) smaller than 0.05.\n\n\nde_res[de_res$log2FoldChange &gt; 0.5 & de_res$padj &lt; 0.05, ]\n\n# A tibble: 2 × 7\n  gene_name baseMean log2FoldChange lfcSE  stat       pvalue        padj\n  &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 LOH1          48.6           2.23 0.397  5.61 0.0000000206 0.000000927\n2 SUT2873       26.0           1.43 0.369  3.87 0.000110     0.00165    \n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nMultiple Tests Correction\n\n\nWhy multiple testing is a problem?\nWhen performing multiple statistical tests, the probability of making at least one Type I error (false positive) increases with the number of tests.\nFor instance, if we perform 100 independent tests with a significance level (\\(\\alpha\\)) of 5%, the chance of incorrectly rejecting at least one null hypothesis is no longer 5%, but much higher. This is because the errors accumulate across the tests.\nIf we do 100 tests simultaneously and set and use \\(\\alpha\\) at 0.05, the probability to do at least one error is:\n\\[\n\\begin{aligned}\nP(\\text{at least 1 significant result by chance}) &= 1- P(\\text{non significant results}) \\\\\n&= 1 – (1 - 0.05)^{100} \\\\\n&= 0.99\n\\end{aligned}\n\\]\n\n\nMultiple test correction\nTo address this issue and control the overall Type I error rate, statistical corrections like the Bonferroni correction or False Discovery Rate (FDR) adjustments are commonly used in multiple testing scenarios.\n\n\nBonferroni correction: adjust the significance threshold (\\(\\alpha\\)) to account for the number of tests (Ntest) being performed, i.e., \\(\\alpha_{adjusted}= \\frac{\\alpha}{\\text{Ntest}}\\)\n\n\n\\[\n\\begin{aligned}\nP(\\text{at least 1 significant result by chance}) &= 1 – (1 - \\frac{0.05}{100})^{100} \\\\\n&= 0.049\n\\end{aligned}\n\\]\n\n\nFDR (False discovery rate): control the proportion of false positive amongst all significant results, e.g.: Benjamini-Hochberg (BH) procedure.\n\n\n\n\n\n\n\nExtract results for these genes: RNR1, PIR3, SRP68.\n\n\nde_res[de_res$gene_name %in% c(\"RNR1\", \"PIR3\", \"SRP68\"), ]\n\n# A tibble: 3 × 7\n  gene_name baseMean log2FoldChange lfcSE   stat   pvalue    padj\n  &lt;chr&gt;        &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 RNR1         1374.         -0.381 0.434 -0.879 0.379    0.891  \n2 PIR3          304.         -2.37  0.608 -3.89  0.000100 0.00165\n3 SRP68        1058.         -0.120 0.211 -0.569 0.570    0.891  \n\n\n\nUse ifelse() to categorize genes. Add a new column, gene_category, that assigns categories:\n\n\n“up” if log2FoldChange &gt; 0.5.\n“down” if log2FoldChange &lt; -0.5.\n“neutral” otherwise.\n\n\nde_res[[\"gene_category\"]] &lt;- ifelse(\n  test = de_res[[\"log2FoldChange\"]] &gt; 0.5,\n  yes = \"up\",\n  no = ifelse(\n    test = de_res[[\"log2FoldChange\"]] &lt; -0.5,\n    yes = \"down\",\n    no = \"neutral\"\n  )\n)\n\n\nUse table() to count the occurrences of each gene category. (?table)\n\n\ntable(de_res[[\"gene_category\"]])\n\n\n   down neutral      up \n      5      34       6 \n\n\n\n\n\n\n\n\nNote\n\n\n\nEnsembl Data Base\nEnsembl is a comprehensive genome database that provides detailed information on genes and their annotations across a wide range of species (humain, mouse, zebrafish, etc.). It integrates genomic data with tools like BioMart, making it easy to query and extract information such as gene names, coordinates, functions, and orthologs for research purposes.\n\n\n\nA yeast gene annotation file was obtained from the Ensembl data base. This file can be donwloaded here.\n\nImport the data and add the annotation to the de_res data frame using merge() function. (?merge)\n\nannot &lt;- read_csv(\n  \"../exos_data/yeast_gene_annot.csv\" # replace the path by your own\n)\n\nRows: 7127 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ensembl_id, gene_name, chromosome, description\ndbl (2): start, end\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nde_res &lt;- merge(de_res, annot, by = \"gene_name\", all.x = TRUE)\nhead(de_res)\n\n  gene_name  baseMean log2FoldChange     lfcSE         stat      pvalue\n1      ACM1  140.4359    0.733261747 0.4864127  1.507488856 0.131685398\n2     APQ12 5422.7091   -0.640132968 0.2366950 -2.704463027 0.006841488\n3     CDC20  216.8074    0.788541627 0.4908836  1.606371984 0.108192203\n4      CDC5 1282.0508    0.172085182 0.4798742  0.358604793 0.719890761\n5      CLB1  927.0893   -0.145822741 0.6384089 -0.228415908 0.819322924\n6      CLB2  255.6934   -0.001034076 0.5231743 -0.001976543 0.998422948\n        padj gene_category ensembl_id chromosome  start    end\n1 0.59258429            up    YPL267W        XVI  38169  38798\n2 0.07611881          down    YIL040W         IX 277723 278139\n3 0.57921173            up    YGL116W        VII 289809 291641\n4 0.90627615       neutral    YMR001C       XIII 269019 271136\n5 0.91496751       neutral    YGR108W        VII 703636 705051\n6 0.99842295       neutral    YPR119W        XVI 771653 773128\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       description\n1                                                                                                                                                                                       Pseudosubstrate inhibitor of the APC/C; suppresses APC/C [Cdh1]-mediated proteolysis of mitotic cyclins; associates with Cdh1p, Bmh1p and Bmh2p; cell cycle regulated protein; the anaphase-promoting complex/cyclosome is also known as APC/C [Source:SGD;Acc:S000006188]\n2                     Nuclear envelope/ER integral membrane protein; interacts and functions with Brr6p and Brl1p in lipid homeostasis; mutants are defective in nuclear pore complex biogenesis, nuclear envelope morphology, mRNA export from the nucleus and are sensitive to sterol biosynthesis inhibitors and membrane fluidizing agents; exhibits synthetic lethal genetic interactions with genes involved in lipid metabolism [Source:SGD;Acc:S000001302]\n3                                                                                                        Activator of anaphase-promoting complex/cyclosome (APC/C); APC/C is required for metaphase/anaphase transition; directs ubiquitination of mitotic cyclins, Pds1p, and other anaphase inhibitors; cell-cycle regulated; potential Cdc28p substrate; relative distribution to the nucleus increases upon DNA replication stress [Source:SGD;Acc:S000003084]\n4 Polo-like kinase; controls targeting and activation of Rho1p at cell division site via Rho1p guanine nucleotide exchange factors; regulates Spc72p; also functions in adaptation to DNA damage during meiosis; regulates the shape of the nucleus and expansion of the nuclear envelope during mitosis; similar to Xenopus Plx1 and S. pombe Plo1p; human homologs PLK1, PLK3 can each complement yeast cdc5 thermosensitive mutants [Source:SGD;Acc:S000004603]\n5                                                                                                                 B-type cyclin involved in cell cycle progression; activates Cdc28p to promote the transition from G2 to M phase; accumulates during G2 and M, then targeted via a destruction box motif for ubiquitin-mediated degradation by the proteasome; CLB1 has a paralog, CLB2, that arose from the whole genome duplication [Source:SGD;Acc:S000003340]\n6                                                                                                                 B-type cyclin involved in cell cycle progression; activates Cdc28p to promote the transition from G2 to M phase; accumulates during G2 and M, then targeted via a destruction box motif for ubiquitin-mediated degradation by the proteasome; CLB2 has a paralog, CLB1, that arose from the whole genome duplication [Source:SGD;Acc:S000006323]\n\n\n\n\nBravo! 🎉 You’ve learned the basics of R, and you’re already making great progress, keep it up!"
  },
  {
    "objectID": "ioc_r/week06/r_w06_work.html",
    "href": "ioc_r/week06/r_w06_work.html",
    "title": "Week 6 - Homework",
    "section": "",
    "text": "For this homework, we will use the Palmer Penguins dataset. It contains information about three penguin species, living in the Palmer Archipelago. For each penguin, measurements include:\n\nBill length and bill depth (in mm)\nFlipper length (in mm)\nBody mass (in grams)\nSex and the island where it was observed\nStudy year\n\nThe goal is to explore, manipulate and visualize these data in R while practicing the concepts learned in class.\n\nSet up your workspace.\n\nCreate a new R Project called penguins_analysis and save the dataset file penguins.csv inside a folder named data in your project.\n\nImport the penguins.csv dataset, name the imported data as penguins.\n\n\nInsepct the imported data:\n\n\nHow many rows and columns are there?\nRecode the species, island and sex as factors\n\n\nWhich species contains the most data?\n\n\nExtract penguins of “Gentoo” species which live on the “Biscoe” island.\n\n\nCreate a new column bm_kg which stores the body mass in kilogram.\n\n\nWhich species shows the highest average body mass in kilogram?\n\n\nUse scatter plot to visualise the body mass (in kg) and the bill length:\n\n\nColor the point by species.\nIncrease the point size to 2.5.\nReplace the axis’ label by “Body Mass (kg)” and “Bill Length (mm)”.\nRemove the legend title.\nUse theme_minimal().\nPut the legend on the top of the figure.\n\nWhat is your observation for Adelie and Chinstrap penguins?\n\nBased on your observation from question 7, test if your hypothesis is statistically valid (using significance level at 5%).\n\nHints:\n\nCheck the distribution of body mass or bill length, test the normality of data distribution of each species.\nIf both group are normally distributed, use a t-test (?t.test); If one or both groups are not normally distributed, use a Wilcoxon rank-sum test.\nReport the p-value and state your conclusion in one sentence.\n\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html",
    "href": "ioc_r/week03/r_w03_exos.html",
    "title": "Week 3 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#goals",
    "href": "ioc_r/week03/r_w03_exos.html#goals",
    "title": "Week 3 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nWork with data frames and lists\nCalculate fold change of gene expression between groups\nCompare gene expression using the Wilcoxon test\nVisualize differences with boxplots"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#data-frames",
    "href": "ioc_r/week03/r_w03_exos.html#data-frames",
    "title": "Week 3 - Hands-On Examples",
    "section": "Data Frames",
    "text": "Data Frames\nUse the following code to import the file “read-counts.csv” (you have already downloaded it for the hand-on examples of week01). Name the imported data expr_data.\n\nexpr_data &lt;- read.table(\n  file = \"../exos_data/read-counts.csv\",  # replace the path with your own\n  header = TRUE, sep = \",\", row.names = 1\n)\n\n\nCheck the structure of expr_data using an appropriate R function.\n\n\nstr(expr_data)\n\n'data.frame':   45 obs. of  40 variables:\n $ WT.1        : num  20648 7867 1481 743 185 ...\n $ WT.2        : num  466 147 37 27 6 16 0 105 8 490 ...\n $ WT.3        : num  1783 427 187 370 200 ...\n $ WT.4        : num  25335 5178 1856 4050 669 ...\n $ WT.5        : num  64252 27889 3952 877 166 ...\n $ WT.6        : num  24126 8547 1020 357 68 ...\n $ WT.7        : num  9067 3432 484 845 360 ...\n $ WT.8        : num  19721 6935 1409 2110 595 ...\n $ WT.9        : num  67353 34229 4636 1872 438 ...\n $ WT.10       : num  28059 13913 1870 684 204 ...\n $ SET1.1      : num  21214 9807 1604 1075 209 ...\n $ SET1.2      : num  3822 1663 572 1170 381 ...\n $ SET1.3      : num  2870 932 358 1692 588 ...\n $ SET1.4      : num  65483 31023 7322 10529 1067 ...\n $ SET1.5      : num  39073 30668 3479 753 125 ...\n $ SET1.6      : num  17421 9701 1241 344 93 ...\n $ SET1.7      : num  5979 2484 518 1424 490 ...\n $ SET1.8      : num  29570 12998 3122 5552 1251 ...\n $ SET1.9      : num  56156 39462 5084 1600 346 ...\n $ SET1.10     : num  42195 26192 3027 1120 286 ...\n $ SET1.RRP6.1 : num  36236 34296 4480 3040 1155 ...\n $ SET1.RRP6.2 : num  1716 1238 677 1190 494 ...\n $ SET1.RRP6.3 : num  2137 1672 774 2940 1335 ...\n $ SET1.RRP6.4 : num  21731 18206 4335 9383 2193 ...\n $ SET1.RRP6.5 : num  43086 53296 6548 4044 906 ...\n $ SET1.RRP6.6 : num  33990 35468 3723 1710 402 ...\n $ SET1.RRP6.7 : num  12290 12523 1475 593 183 ...\n $ SET1.RRP6.8 : num  7170 7099 1101 1093 468 ...\n $ SET1.RRP6.9 : num  21650 19932 3824 5620 1940 ...\n $ SET1.RRP6.10: num  21870 23810 3677 2878 893 ...\n $ RRP6.1      : num  38560 32163 3988 2671 959 ...\n $ RRP6.2      : num  4275 1811 941 872 593 ...\n $ RRP6.3      : num  2923 1257 541 2966 1210 ...\n $ RRP6.4      : num  29292 24615 5292 7584 1664 ...\n $ RRP6.5      : num  55453 57599 6436 2714 594 ...\n $ RRP6.6      : num  37863 29579 2844 854 275 ...\n $ RRP6.7      : num  25900 17696 1931 995 517 ...\n $ RRP6.8      : num  21179 14404 2383 5318 1796 ...\n $ RRP6.9      : num  43327 40664 6029 4940 1386 ...\n $ RRP6.10     : num  77043 79181 9389 4092 1267 ...\n\n\n\nHow many unique values are in sample WT.2?\n\n\nUse unique() to get the unique values;\nthen use length() to check the number of elements.\n\n\nval_unique &lt;- unique(expr_data[[\"WT.2\"]])\nhead(val_unique)\n\n[1] 466 147  37  27   6  16\n\nn_unique &lt;- length(val_unique)\nn_unique\n\n[1] 33\n\n# all in one line\nlength(unique(expr_data[[\"WT.2\"]]))\n\n[1] 33\n\n\n\nExtract expression levels for the gene “LOH1” in WT samples (WT.1, WT.2, …, WT.10) and SET1 samples (SET1.1, SET1.2, …, SET1.10). Store them as expr_wt and expr_set1. Ensure they are vectors using unlist(). (see help with ?unlist)\n\n\nexpr_wt &lt;- expr_data[\"LOH1\", paste0(\"WT.\", 1:10)]\nexpr_set1 &lt;- expr_data[\"LOH1\", paste0(\"SET1.\", 1:10)]\n\n# check data structure\nstr(expr_wt)\n\n'data.frame':   1 obs. of  10 variables:\n $ WT.1 : num 10\n $ WT.2 : num 2\n $ WT.3 : num 14\n $ WT.4 : num 19\n $ WT.5 : num 35\n $ WT.6 : num 17\n $ WT.7 : num 6\n $ WT.8 : num 3\n $ WT.9 : num 31\n $ WT.10: num 13\n\nstr(expr_set1)\n\n'data.frame':   1 obs. of  10 variables:\n $ SET1.1 : num 67\n $ SET1.2 : num 49\n $ SET1.3 : num 83\n $ SET1.4 : num 185\n $ SET1.5 : num 203\n $ SET1.6 : num 83\n $ SET1.7 : num 40\n $ SET1.8 : num 84\n $ SET1.9 : num 134\n $ SET1.10: num 155\n\n# convert to vectors\nexpr_wt &lt;- unlist(expr_wt)\nexpr_set1 &lt;- unlist(expr_set1)\n\n# check again the structure\nstr(expr_wt)\n\n Named num [1:10] 10 2 14 19 35 17 6 3 31 13\n - attr(*, \"names\")= chr [1:10] \"WT.1\" \"WT.2\" \"WT.3\" \"WT.4\" ...\n\nstr(expr_set1)\n\n Named num [1:10] 67 49 83 185 203 83 40 84 134 155\n - attr(*, \"names\")= chr [1:10] \"SET1.1\" \"SET1.2\" \"SET1.3\" \"SET1.4\" ...\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nFold change\nFold change (FC) measures the relative change in gene expression between two conditions or groups. (e.g., treated vs. untreated, healthy vs. diseased). \\[\nFC = \\frac{Mean Expression in Group 2}{Mean Expression in Group 1}\n\\]\nIt’s common to log2 transform the fold change :\n\\[\n\\begin{aligned}\n  \\text{FC} &= 1, \\quad \\log_2(\\text{FC}) = 0 \\Rightarrow \\text{No change}\\\\\n  \\text{FC} &= 2, \\quad \\log_2(\\text{FC}) = 1 \\Rightarrow \\text{Up-regulated} \\\\\n  \\text{FC} &= 0.5, \\quad \\log_2(\\text{FC}) = -1 \\Rightarrow \\text{Down-regulated}\n\\end{aligned}\n\\]\n\n\n\nCalculate the fold change and log2 fold change for “LOH1” between WT and SET1 groups. Is the gene up- or down-regulated?\n\n\n## Calculate the mean for each group\navg_wt &lt;- mean(expr_wt)\navg_set1 &lt;- mean(expr_set1)\n\n## Get the fold change\nfc &lt;- avg_set1 / avg_wt\n\n## log2 transformed fold change\nlfc &lt;- log2(fc)\nlfc\n\n[1] 2.851999\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nMann-Whitney Wilcoxon Rank Sum Test\nThe Wilcoxon Rank Sum test, also called Mann-Whitney test, is a non-parametric test used to compare independant samples (groups). It does not assume a normal distribution.\nThis test is particularly useful for ordinal data or when the assumptions of parametric tests (like the t-test) are not met.\nThe idea is to bring the two groups together and sort all values in order. \n(Figure credit: Lorette Noiret)\nThe hypotheses are:\n\nH0: two groups have the same distribution\nH1: two groups have different distribution\n\nIf H0 is true, then the ranks should be randomly distributed between the two samples (WA ≃ WB). If H0 is false, then the larger ranks will be in one of the two groups (WA &lt; WB)\nSo we can make decision based on the sum of ranks in each group.\n\n\n\nUse wilcox.test() to compare LOH1 expression between WT and SET1. At \\(\\alpha = 0.05\\), what is your conclusion?\n\n\nwilcox.test(expr_wt, expr_set1)\n\nWarning in wilcox.test.default(expr_wt, expr_set1): cannot compute exact\np-value with ties\n\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  expr_wt and expr_set1\nW = 0, p-value = 0.0001817\nalternative hypothesis: true location shift is not equal to 0\n\n\nAs the p-value is smaller than 0.05, we can reject the H0. There is a significant difference between two WT and SET1 samples for the expression of the LOH1.\n\nCreate a new data frame for LOH1 gene expression in WT and SET1 samples with two columns:\n\n\n“expr_value”: expression levels\n“group”: WT or SET1\n\n\nexpr_loh1 &lt;- data.frame(\n  expr_value = c(expr_wt, expr_set1),\n  group = rep(c(\"WT\", \"SET1\"), each = length(expr_wt))\n)\nexpr_loh1\n\n        expr_value group\nWT.1            10    WT\nWT.2             2    WT\nWT.3            14    WT\nWT.4            19    WT\nWT.5            35    WT\nWT.6            17    WT\nWT.7             6    WT\nWT.8             3    WT\nWT.9            31    WT\nWT.10           13    WT\nSET1.1          67  SET1\nSET1.2          49  SET1\nSET1.3          83  SET1\nSET1.4         185  SET1\nSET1.5         203  SET1\nSET1.6          83  SET1\nSET1.7          40  SET1\nSET1.8          84  SET1\nSET1.9         134  SET1\nSET1.10        155  SET1\n\n\n\nWith the new data frame, draw a boxplot to compare expression between groups using boxplot(). (see ?boxplot)\n\n\nboxplot(expr_value ~ group, data = expr_loh1)"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#lists",
    "href": "ioc_r/week03/r_w03_exos.html#lists",
    "title": "Week 3 - Hands-On Examples",
    "section": "Lists",
    "text": "Lists\nHere’s a toy list storing information about three samples:\n\nmy_list &lt;- list(\n  # sample information\n  sample_info = data.frame(\n    id = paste0(\"sample\", 1:3),\n    age = c(25, 27, 30),\n    sex = c(\"F\", \"M\", \"F\")\n  ),\n  ## expression matrix\n  count_expr = matrix(\n    1:6, ncol = 2, dimnames = list(\n      paste0(\"sample\", 1:3),\n      paste0(\"gene\", c(\"A\", \"B\"))\n    )\n  ),\n  # mesured genes\n  gene_name = paste0(\"gene\", c(\"A\", \"B\")),\n  # sequenced family members of each sample\n  family_sequenced = list(\n    sample1 = c(\"father\", \"mother\"),\n    sample2 = c(\"father\", \"mother\", \"sister\"),\n    sample3 = c(\"mother\", \"sister\")\n  )\n)\nmy_list\n\n$sample_info\n       id age sex\n1 sample1  25   F\n2 sample2  27   M\n3 sample3  30   F\n\n$count_expr\n        geneA geneB\nsample1     1     4\nsample2     2     5\nsample3     3     6\n\n$gene_name\n[1] \"geneA\" \"geneB\"\n\n$family_sequenced\n$family_sequenced$sample1\n[1] \"father\" \"mother\"\n\n$family_sequenced$sample2\n[1] \"father\" \"mother\" \"sister\"\n\n$family_sequenced$sample3\n[1] \"mother\" \"sister\"\n\n\n\nUse names() to extract the names of the elements in the list.\n\n\nnames(my_list)\n\n[1] \"sample_info\"      \"count_expr\"       \"gene_name\"        \"family_sequenced\"\n\n\n\nExtract the count_expr matrix from the list.\n\n\nmy_list[[\"count_expr\"]]\n\n        geneA geneB\nsample1     1     4\nsample2     2     5\nsample3     3     6\n\n\n\nFrom the matrix, find the expression value of geneA in sample2\n\n\nmy_list[[\"count_expr\"]][\"sample2\", \"geneA\"]\n\n[1] 2\n\n\n\nCalculate the total counts of each gene across all samples.\n\n\ncolSums(my_list[[\"count_expr\"]])\n\ngeneA geneB \n    6    15 \n\n\n\nFrom sample_info data frame, extract the age column.\n\n\nmy_list[[\"sample_info\"]][[\"age\"]]\n\n[1] 25 27 30\n\n\n\nExtract the 1st sequenced family member of sample3.\n\n\nmy_list[[\"family_sequenced\"]][[\"sample3\"]][1]\n\n[1] \"mother\"\n\n\n\nAdd a new element to the list, “gene_description”, with the following values: c(\"geneA\" = \"housekeeping gene\", \"geneB\" = \"stress response gene\")\n\n\nmy_list[[\"gene_description\"]] &lt;- c(\n  \"geneA\" = \"housekeeping gene\",\n  \"geneB\" = \"stress response gene\"\n)\n\n\n\n\n\n\n\nBonus!\n\n\n\nCheck out this cheat sheet for the basic R commands: Base R Cheat Sheet\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week03/r_w03_work.html",
    "href": "ioc_r/week03/r_w03_work.html",
    "title": "Week 3 - Homework",
    "section": "",
    "text": "Create a matrix of two columns to store numbers 1 to 8, use the dimnames parameter of the matrix function to name the rows and columns directly. (see ?matrix) (You can name the rows/columns whatever you want.)\n\nUse the following code to import the file “read-counts.csv” (you have already downloaded it for the hand-on examples of week01). Name the imported data expr_data.\n\nexpr_data &lt;- read.table(\n  file = \"../exos_data/read-counts.csv\",  # replace the path with your own\n  header = TRUE, sep = \",\", row.names = 1\n)\n\n\nCreate a list info_expr to store information about expr_data:\n\n\n\n“col_names”: column names\n“row_names”: row names\n“dimension”: number of rows and columns\n“sum_sample”: the sum of expression level across all genes for each sample\n“avg_gene”: the average expression level across all samples for each gene\n\n\nCalculate the median of the average gene expression levels across all samples.\n\n\nUse summary() to generate summary statistics of the sum of expression level across all genes.\n\n\nCalculate the log2 fold change of the gene TOS6 for the WT and RRP6 samples. Is TOS6 up or down-regulated in the RRP6 samples compared to WT?\n\n\nPerform a Wilcoxon test to check if the TOS6 expression is different between WT and RRP6 samples.\n\n\nStore the test results in a variable (object) called res_wilcox. What is the data structure of the results? Extract the p-value from the results.\nUse \\(\\alpha = 0.05\\), what is your conclusion?\n\n\nVisualize the expression level of TOS6 for WT and RRP6 samples using boxplot.\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#brief-recap-week-1",
    "href": "ioc_r/week02/r_w02_slides.html#brief-recap-week-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Brief Recap Week 1",
    "text": "Brief Recap Week 1\n\nWith RStudio:\n\nCreating an R project\nManaging files (create, move, etc.)\nImporting and exporting data with RStudio\n\nUnderstanding absolute and relative paths"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#how-we-store-data-in-r",
    "href": "ioc_r/week02/r_w02_slides.html#how-we-store-data-in-r",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "How We Store Data in R?",
    "text": "How We Store Data in R?\n\nA variable is like a box where you store data.\nEach variable has a name and content (one or multiple values).\nA variable is created at the moment you assign a value to it. Use &lt;- for assignment.\n\n\nx &lt;- 1 # put a space on each side of the assignment sign\nx # type variable name to print its value(s)\n\n[1] 1\n\nchar_name &lt;- \"InforBio\"\nchar_name\n\n[1] \"InforBio\"\n\nchar_name &lt;- InforBio\n\nError: object 'InforBio' not found\n\n\n\n\n\n\n\n\nCheck the “Environment” pane or type ls() in the console, are variables you just created there?\n\n\n\n\nVariables are containers for data. A box labeled “x” containing the number 1. A box labeled “char_name” containing the platform name “InforBio”."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#variable-naming-convention",
    "href": "ioc_r/week02/r_w02_slides.html#variable-naming-convention",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Variable Naming Convention",
    "text": "Variable Naming Convention\n\n\n\nChoose a short and descriptive name\nUse snake_case (lowercase letters and underscores only)\nAvoid special characters (such as !, #, ) and spaces\nDo not start a name with numbers\nAvoid reserved keywords in R (e.g., function, if, TRUE)\nDo not overwrite built-in functions (e.g., mean, sd)\n\n\n\n\n\n\n\n\nWhich are valid names?\n\n\n\nfoo\ntest\nvar\nvar2\nexam_results\na_variable_with_a_name_super_long\n\nday_1\nday_one\nday1\nfirst_day_of_the_month\nDayOne\ndayOne\nDAYONE\nDAYone\n\n\n\n\n\n\n\n\nHow to know if a variable name was already used?\n\nType help(reserved) to check reserved words in R.\nCheck in “Environment” pane.\nType the first letters of a name and press the Tab key to trigger autocompletion\n\n\n\n\n\n\nFollow the same rules when you naming your R project folder. If really needs a long name, use abbreviation of it with a comment line at the begin to explain what it stands for."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#data-types",
    "href": "ioc_r/week02/r_w02_slides.html#data-types",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Data Types",
    "text": "Data Types\nExamples: 1, 2.5, \"A\", \"InforBio\", \"I love R\", TRUE, FALSE, …\n How R understands and stores information?\n\nMain data types:\n\nNumeric\n\nDouble: 2.5\nInteger: 1\n\nCharacter: \"A\", \"InforBio\", \"I love R\"\nLogical (boolean): TRUE, FALSE\nFactor: for categorical data\n\n\n\n\n\n\n\nWe’ll see factor next week."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#numeric",
    "href": "ioc_r/week02/r_w02_slides.html#numeric",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Numeric",
    "text": "Numeric\n\n\n\nDouble (default): used for numbers with decimal points or without.\n\n\na &lt;- 3\nis.numeric(a)\n\n[1] TRUE\n\nis.double(a)\n\n[1] TRUE\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\n\nIf you explicitly want an integer (whole numbers), you can define it by appending an L to the number:\n\n\nb &lt;- 3L\nis.numeric(b)\n\n[1] TRUE\n\nis.integer(b)\n\n[1] TRUE\n\ntypeof(b)\n\n[1] \"integer\""
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#character",
    "href": "ioc_r/week02/r_w02_slides.html#character",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Character",
    "text": "Character\nR stores text (strings) as character. Use quotation marks to indicate a value is character.\n\n# enclosed in either double quotes (\") or single quotes (')\nx &lt;- \"I love R\"\nx\n\n[1] \"I love R\"\n\nis.character(x)\n\n[1] TRUE\n\n\n\n\n\"1\" + \"2\"\n\nError in \"1\" + \"2\": non-numeric argument to binary operator\n\n\n\n\n\nas.numeric(\"1\") + as.numeric(\"2\")  # convert to numeric\n\n[1] 3\n\n\n\n\n\nas.character(1) # convert to character\n\n[1] \"1\""
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#logical",
    "href": "ioc_r/week02/r_w02_slides.html#logical",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Logical",
    "text": "Logical\n\nOnly two possible values for logical data: TRUE or FALSE.\nCan be written as T or F, but never in other formats (e.g.: True, true)\n\n\nis.logical(TRUE)\n\n[1] TRUE\n\nis.logical(T)\n\n[1] TRUE\n\nis.logical(True)\n\nError: object 'True' not found\n\n\n\nCan be obtained from logical statements, e.g.:\n\n\n2 &gt; 1\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#from-single-value-to-multiple-values",
    "href": "ioc_r/week02/r_w02_slides.html#from-single-value-to-multiple-values",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "From Single Value to Multiple Values",
    "text": "From Single Value to Multiple Values\nWhen we store multiple values, we need a structure.\n\ngene1 &lt;- 10\ngene2 &lt;- 12\ngene3 &lt;- 9\n\nHow to put gene1, gene2 and gene3 together?\n\n R provides 4 data structures to store multiple values:\n\n\n\n\n1 dimension\n2 dimensions (row/column)\n\n\n\n\nSame data type\nvector\nmatrix\n\n\nDifferent data types\nlist\ndata frame"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-creation-1",
    "href": "ioc_r/week02/r_w02_slides.html#vector-creation-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Creation (1)",
    "text": "Vector Creation (1)\nUse the function c() to create a vector and use , to separate elements.\n\n\n\nc(10, 12, 9) # Numeric vector\n\n[1] 10 12  9\n\nc(gene1, gene2, gene3)\n\n[1] 10 12  9\n\ngene_expr &lt;- c(gene1, gene2, gene3) # store in a variable\ngene_expr\n\n[1] 10 12  9\n\nc(gene_expr, 18)\n\n[1] 10 12  9 18\n\n\n\n\nQuickly create sequences of numbers\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n5:1\n\n[1] 5 4 3 2 1\n\nseq(from = 1, to = 10, by = 2)\n\n[1] 1 3 5 7 9\n\n\n\n\n\nc(\"gene1\", \"gene2\", \"gene3\") # Character vector\n\n[1] \"gene1\" \"gene2\" \"gene3\"\n\nc(TRUE, FALSE, FALSE, TRUE, TRUE) # Logical vector\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n\n\n\nOther tricks\n\n\npaste0(\"gene\", 1:3)\n\n[1] \"gene1\" \"gene2\" \"gene3\"\n\nrep(c(TRUE, FALSE), each = 2) # repetition\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\n\n\n\n\n\n\nA single value (scalar) is treated as a vector of length 1.\n\nis.vector(10)\n\n[1] TRUE\n\nlength(10)\n\n[1] 1\n\nis.vector(\"gene1\")\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-creation-2",
    "href": "ioc_r/week02/r_w02_slides.html#vector-creation-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Creation (2)",
    "text": "Vector Creation (2)\nWhen you combine different data types …\n\nc(10, TRUE)\n\n[1] 10  1\n\nc(10, \"gene1\")\n\n[1] \"10\"    \"gene1\"\n\nc(TRUE, \"gene1\")\n\n[1] \"TRUE\"  \"gene1\"\n\nc(10, \"gene1\", TRUE)\n\n[1] \"10\"    \"gene1\" \"TRUE\" \n\n\n\n R follows a hierarchy of data types for coercion:\nlogical (least inclusive) → numeric → character (most inclusive)\n\nR always picks the “most flexible” type that can represent all the values without losing information."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-1",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (1)",
    "text": "Vector Indexing (1)\n\n\n\nUse [idx] to access element(s).\n\nNotes: The index starts from 1.\n\ngene_expr\n\n[1] 10 12  9\n\ngene_expr[1]   # 1st element\n\n[1] 10\n\ngene_expr[c(2, 3)] # elements 2 and 3\n\n[1] 12  9\n\ngene_expr[2:3] # elements 2 and 3\n\n[1] 12  9\n\ngene_expr[-1]  # all elements except the 1st\n\n[1] 12  9\n\n\n\n\nModify element(s).\n\n\ngene_expr[1] &lt;- 100\ngene_expr\n\n[1] 100  12   9\n\ngene_expr[2:3] &lt;- 8\ngene_expr\n\n[1] 100   8   8\n\ngene_expr[2:3] &lt;- c(0, 20)\ngene_expr\n\n[1] 100   0  20"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-2",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (2)",
    "text": "Vector Indexing (2)\n\n\n\nUse [name] to access element(s) if the vector is named.\n\n\n# name elements of the vector\nnames(gene_expr) &lt;- c(\"gene1\", \"gene2\", \"gene3\")\ngene_expr\n\ngene1 gene2 gene3 \n  100     0    20 \n\ngene_expr[\"gene1\"] # the element named \"gene1\"\n\ngene1 \n  100 \n\ngene_expr[c(\"gene1\", \"gene2\")] # extract \"gene1\" and \"gene2\"\n\ngene1 gene2 \n  100     0 \n\n\n\n\nModify element(s).\n\n\ngene_expr[\"gene1\"] &lt;- 2\ngene_expr\n\ngene1 gene2 gene3 \n    2     0    20 \n\n\n\n\n\n\n\n\n\n\nHow to modify the expression value of “gene1” and “gene2” to 5?\nHow to change the expression value of “gene1” to 0 and “gene2” to 16?\n\n\n\n\n\n\n\ngene_expr[c(\"gene1\", \"gene2\")] &lt;- 5\ngene_expr\n\ngene1 gene2 gene3 \n    5     5    20 \n\ngene_expr[c(\"gene1\", \"gene2\")] &lt;- c(0, 16)\ngene_expr\n\ngene1 gene2 gene3 \n    0    16    20"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-3",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-3",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (3)",
    "text": "Vector Indexing (3)\n\n\n\nUse a logical vector for indexing.\n\n\nnum_vec &lt;- c(1, 2, 5, 4)\nnum_vec\n\n[1] 1 2 5 4\n\nlogical_vec &lt;- c(TRUE, TRUE, FALSE, FALSE)\nlogical_vec\n\n[1]  TRUE  TRUE FALSE FALSE\n\nnum_vec[logical_vec]\n\n[1] 1 2\n\n\n\n# create logical vect using comparison operator\nnum_vec &lt; 3\n\n[1]  TRUE  TRUE FALSE FALSE\n\n# then use it to extract values from the numeric vector\nnum_vec[num_vec &lt; 3]\n\n[1] 1 2\n\n\n\n\n\n\n\n\n\nR use the &gt; to test greater than. E.g.:\n\n1 &gt; 2\n\n[1] FALSE\n\nc(1, 2, 3) &gt; 2\n\n[1] FALSE FALSE  TRUE\n\n\nHow to extract values greater than 3 from the num_vec?\n\n\n\n\n\nnum_vec[num_vec &gt; 3]\n\n[1] 5 4"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-operations",
    "href": "ioc_r/week02/r_w02_slides.html#vector-operations",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Operations",
    "text": "Vector Operations\n\n\n\n# create a vector for gene expression\ngene_expr &lt;- c(15, 19, 14, 3, 10) \n\n# check the structure\nis.numeric(gene_expr)\n\n[1] TRUE\n\nstr(gene_expr)\n\n num [1:5] 15 19 14 3 10\n\n# vector length\nlength(gene_expr)\n\n[1] 5\n\n# show the first/last elements\nhead(gene_expr)\n\n[1] 15 19 14  3 10\n\ntail(gene_expr)\n\n[1] 15 19 14  3 10\n\n## check if missing value present\nis.na(gene_expr)\n\n[1] FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n# Arithmetic operations\ngene_expr + 1\n\n[1] 16 20 15  4 11\n\ngene_expr * 10\n\n[1] 150 190 140  30 100\n\n\n\n\n# Get some summary stats\nsum(gene_expr)\n\n[1] 61\n\nmean(gene_expr)\n\n[1] 12.2\n\nmedian(gene_expr)\n\n[1] 14\n\nsummary(gene_expr)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    10.0    14.0    12.2    15.0    19.0"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-creation",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-creation",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Creation",
    "text": "Matrices Creation\n\n\n\nUse the matrix() function to create a matrix.\n\n\nmy_mat1 &lt;- matrix(1:6, nrow = 2)\nmy_mat2 &lt;- matrix(1:6, nrow = 2, byrow = TRUE)\n\nmy_mat1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nmy_mat2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\nCombine vectors to create matrix.\n\n\nvec1 &lt;- 1:3\nvec2 &lt;- 4:6\n\nrbind(vec1, vec2)\n\n     [,1] [,2] [,3]\nvec1    1    2    3\nvec2    4    5    6\n\ncbind(vec1, vec2)\n\n     vec1 vec2\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\n\n\n\n\n\n\n\nWhat is the data structure of each row/column of a matrix?"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-1",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (1)",
    "text": "Matrices Indexing (1)\n\nUse [row_idx,column_idx] to access element(s).\n\n\n\n\nmat &lt;- matrix(1:12, ncol = 4)\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\ndim(mat) # dimensions of the matrix\n\n[1] 3 4\n\nnrow(mat)\n\n[1] 3\n\nncol(mat)\n\n[1] 4\n\nmat[1, 2] # element in the 1st row and 2nd column\n\n[1] 4\n\nmat[, 3] # all rows of the 3rd column\n\n[1] 7 8 9\n\n\n\n\n\n\n\n\n\n\nHow to get all columns of the 2nd and the 3rd rows?\nHow to get the value 5 from the matrix?\n\n\n\n\n\n\nmat[2:3, ]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n[2,]    3    6    9   12\n\nmat[2, 2]\n\n[1] 5\n\n\n\n\n\nAs matrix is vectors extended into 2D, if question about drop dim, drop = FALSE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-2",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (2)",
    "text": "Matrices Indexing (2)\n\nUse [row_name,column_name] to access element(s) if names exist.\n\n\n\n\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n# add names to the columns and rows\nrownames(mat) &lt;- c(\"r1\", \"r2\", \"r3\")\ncolnames(mat) &lt;- paste0(\"c\", 1:4)\n\nmat\n\n   c1 c2 c3 c4\nr1  1  4  7 10\nr2  2  5  8 11\nr3  3  6  9 12\n\nmat[\"r1\", ] # all element of the 1st row\n\nc1 c2 c3 c4 \n 1  4  7 10 \n\n\n\n\n\n\n\n\n\nBy using the names of rows and columns:\n\nHow to get 2nd row of the 2nd and the 3rd columns?\nHow to get the value 5 from the matrix?\n\n\n\n\n\n\nmat[\"r2\", c(\"c2\", \"c3\")]\n\nc2 c3 \n 5  8 \n\nmat[\"r2\", \"c2\"]\n\n[1] 5"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-3",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-3",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (3)",
    "text": "Matrices Indexing (3)\n\nUse logical vector(s) for indexing.\n\n\nmat[c(TRUE, TRUE, FALSE), ]\n\n   c1 c2 c3 c4\nr1  1  4  7 10\nr2  2  5  8 11\n\nmat[c(TRUE, TRUE, FALSE), c(FALSE, TRUE, TRUE, FALSE)]\n\n   c2 c3\nr1  4  7\nr2  5  8\n\n\n\n\n\n\n\n\n\nBy using the logical indexing, how to select the 2nd and 3rd rows, the 1st and 2nd columns of the mat?\n\n\n\n\n\n\nmat[c(FALSE, TRUE, TRUE), c(TRUE, TRUE, FALSE, FALSE)]\n\n   c1 c2\nr2  2  5\nr3  3  6"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-operations",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-operations",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Operations",
    "text": "Matrices Operations\n\n\n\nCheck the structure\n\n\nis.matrix(mat)\n\n[1] TRUE\n\nstr(mat)\n\n int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : chr [1:3] \"r1\" \"r2\" \"r3\"\n  ..$ : chr [1:4] \"c1\" \"c2\" \"c3\" \"c4\"\n\n\n\n\nSome maths\n\n\nrowSums(mat)\n\nr1 r2 r3 \n22 26 30 \n\ncolSums(mat)\n\nc1 c2 c3 c4 \n 6 15 24 33 \n\ncolMeans(mat)\n\nc1 c2 c3 c4 \n 2  5  8 11 \n\nrowMeans(mat)\n\n r1  r2  r3 \n5.5 6.5 7.5 \n\n\n\n\n\nModify elements\n\n\nmat[1:2, 3] &lt;- c(1, 2)\nmat\n\n   c1 c2 c3 c4\nr1  1  4  1 10\nr2  2  5  2 11\nr3  3  6  9 12\n\n\n\n\nmat[1:2, ] &lt;- 10\nmat\n\n   c1 c2 c3 c4\nr1 10 10 10 10\nr2 10 10 10 10\nr3  3  6  9 12\n\n\n\n\n\n# replace values in 1st row\nmat[1, ] &lt;- c(0, 1, 2)\n\nError in mat[1, ] &lt;- c(0, 1, 2): number of items to replace is not a multiple of replacement length"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#value-replacement",
    "href": "ioc_r/week02/r_w02_slides.html#value-replacement",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Value Replacement",
    "text": "Value Replacement\n\n\n\nIn matrices\n\n\nmat\n\n   c1 c2 c3 c4\nr1 10 10 10 10\nr2 10 10 10 10\nr3  3  6  9 12\n\n# replace values in 1st row\nmat[1, ] &lt;- c(0, 1, 2)\n\nError in mat[1, ] &lt;- c(0, 1, 2): number of items to replace is not a multiple of replacement length\n\n\n\n\nIn vectors\n\n\nnum_vec &lt;- 1:10\nnum_vec\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nnum_vec[1:5] &lt;- c(0, 1, 2)\n\nWarning in num_vec[1:5] &lt;- c(0, 1, 2): number of items to replace is not a\nmultiple of replacement length\n\nnum_vec\n\n [1]  0  1  2  0  1  6  7  8  9 10\n\n\n\n\n\n\n\n\n\n\nWhen assigning new values, you must provide either:\n\nA single value,\nA vector with the exact number of elements to be replaced, or\nA vector whose length is a factor of the number of elements to be replaced. (Recycling) Not recommanded!"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#todays-goals",
    "href": "ioc_r/week02/r_w02_slides.html#todays-goals",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nGet familiar with variables and data types\nGet familiar with vectors and matrices manipulations\nSimulate your own biological data and test the normality using the Shapiro-Wilk test"
  },
  {
    "objectID": "ioc_r/week05/r_w05_exos.html",
    "href": "ioc_r/week05/r_w05_exos.html",
    "title": "Week 5 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week05/r_w05_exos.html#goals",
    "href": "ioc_r/week05/r_w05_exos.html#goals",
    "title": "Week 5 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nInstall new R packages\nCreate basic plots with ggplot2"
  },
  {
    "objectID": "ioc_r/week05/r_w05_exos.html#install-new-packages",
    "href": "ioc_r/week05/r_w05_exos.html#install-new-packages",
    "title": "Week 5 - Hands-On Examples",
    "section": "Install New Packages",
    "text": "Install New Packages\nWe will use a couple of additional R packages for this training in session 9, for example:\n\n{tidyr}: provides functions that help you get to tidy data\n{dplyr}: provides functions that help you to manipulate data\n\n\nInstall the {dplyr} and {tidyr} packages.\n\n\n# install.packages(\"dplyr\") # you only need to install it once\n# install.packages(\"tidyr\") # you only need to install it once\n\n\nCheck if you can find {dplyr} and {tidyr} in the “Packages” panel in RStudio.\nPlease use the following code to create a data frame of all installed packages in your system. Show a couple of first lines of the data frame.\n\n\nmy_pkgs &lt;- as.data.frame(installed.packages()[, c(1, 3:4)])\nhead(my_pkgs)\n\n            Package Version Priority\naskpass     askpass   1.2.1     &lt;NA&gt;\nbackports backports   1.5.0     &lt;NA&gt;\nbase64enc base64enc   0.1-3     &lt;NA&gt;\nbit             bit   4.6.0     &lt;NA&gt;\nbit64         bit64 4.6.0-1     &lt;NA&gt;\nblob           blob   1.2.4     &lt;NA&gt;\n\n\n\nAccording to my_pkgs, how many packages are installed in your system?\n\n\nnrow(my_pkgs) # the number can be different\n\n[1] 130\n\n\n\nExtract the rows for the “ggplot2”, “tidyr”, “dplyr” packages from my_pkgs.\n\n\n# extract by rownames\nmy_pkgs[c(\"ggplot2\", \"tidyr\", \"dplyr\"), ]\n\n        Package Version Priority\nggplot2 ggplot2   3.5.2     &lt;NA&gt;\ntidyr     tidyr   1.3.1     &lt;NA&gt;\ndplyr     dplyr   1.1.4     &lt;NA&gt;\n\n## or\n# extract by filtering the names in the \"Package\" column\nmy_pkgs[my_pkgs$Package %in% c(\"ggplot2\", \"tidyr\", \"dplyr\"), ]\n\n        Package Version Priority\ndplyr     dplyr   1.1.4     &lt;NA&gt;\nggplot2 ggplot2   3.5.2     &lt;NA&gt;\ntidyr     tidyr   1.3.1     &lt;NA&gt;"
  },
  {
    "objectID": "ioc_r/week05/r_w05_exos.html#create-a-basic-histogram",
    "href": "ioc_r/week05/r_w05_exos.html#create-a-basic-histogram",
    "title": "Week 5 - Hands-On Examples",
    "section": "Create a Basic Histogram",
    "text": "Create a Basic Histogram\nIn the hands-on examples of session 1 and 2, we have drawn histograms with the basic R function hist().\nNow let’s try with functions from {ggplot2} package.\n\nImport the read-counts.csv file into RStudio and name the data as counts.\n\n\nlibrary(readr)\ncounts &lt;- read_csv(\"../exos_data/read-counts.csv\") # replace the path by the yours\n\nRows: 45 Columns: 41\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Feature\ndbl (40): WT.1, WT.2, WT.3, WT.4, WT.5, WT.6, WT.7, WT.8, WT.9, WT.10, SET1....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndim(counts)\n\n[1] 45 41\n\n\n\nLoad the {ggplot2} package. Then create a histogram with the function geom_histogram() for all genes of the sample “WT.2”. Have you noticed the message from geom_histogram() about the bins?\n\n\nlibrary(ggplot2)\nggplot(data = counts, aes(x = WT.2)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nCreate a new histogram for the sample “WT.2”, but this time use the log2 of the gene counts. Do you see the messages from geom_histogram()?\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nTry 10 and 20 for the bins parameter of geom_histogram(). Observe how the histogram changes.\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 10) +\n  labs(title = \"10 bins\")\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 20) +\n  labs(title = \"20 bins\")\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nWe will use 10 bins for the histogram. Change the color of the bars to blue.\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 10, color = \"blue\")\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nBased on the previous figure, fill the bars in orange.\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 10, color = \"blue\", fill = \"orange\")\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nBased on the previous figure, change:\n\n\nx-axis title to be: “log2 gene expression”\ny-axis title to be: “Counts”\nplot title to show sample name and the number of genes used.\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 10, color = \"blue\", fill = \"orange\") +\n  labs(\n    x = \"log2 gene expression\",\n    y = \"Counts\",\n    title = paste0(nrow(counts), \" genes of WT.2 sample\")\n  )\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nBased on the previous figure, use the theme theme_bw().\n\n\nggplot(data = counts, aes(x = log2(WT.2))) +\n  geom_histogram(bins = 10, color = \"blue\", fill = \"orange\") +\n  labs(\n    x = \"log2 gene expression\",\n    y = \"Counts\",\n    title = paste0(nrow(counts), \" genes of WT.2 sample\")\n  ) +\n  theme_bw()\n\nWarning: Removed 5 rows containing non-finite outside the scale range\n(`stat_bin()`)."
  },
  {
    "objectID": "ioc_r/week05/r_w05_exos.html#create-a-boxplot-with-ggplot",
    "href": "ioc_r/week05/r_w05_exos.html#create-a-boxplot-with-ggplot",
    "title": "Week 5 - Hands-On Examples",
    "section": "Create a Boxplot with ggplot",
    "text": "Create a Boxplot with ggplot\nIn the hands-on examples of session 3, we demonstrated that there is a significant difference in the expression of LOH1 between WT and SET1 samples.\nThis gene is upregulated in SET1 samples compared to WT samples, the log2 fold change is 2.85.\nNow, let’s draw a more sophisticated boxplot with ggplot2.\n\nPrepare a data frame for the boxplot. We need:\n\n\na column for the expression levels of different samples\na column to indicate what is the sample group (WT or SET1)\n\n\ngg_df &lt;- data.frame(\n  expr_value = c(\n    unlist(counts[counts$Feature == \"LOH1\", paste0(\"WT.\", 1:10)]),\n    unlist(counts[counts$Feature == \"LOH1\", paste0(\"SET1.\", 1:10)])\n  ),\n  gp = rep(c(\"WT\", \"SET1\"), each = 10)\n)\ngg_df\n\n        expr_value   gp\nWT.1            10   WT\nWT.2             2   WT\nWT.3            14   WT\nWT.4            19   WT\nWT.5            35   WT\nWT.6            17   WT\nWT.7             6   WT\nWT.8             3   WT\nWT.9            31   WT\nWT.10           13   WT\nSET1.1          67 SET1\nSET1.2          49 SET1\nSET1.3          83 SET1\nSET1.4         185 SET1\nSET1.5         203 SET1\nSET1.6          83 SET1\nSET1.7          40 SET1\nSET1.8          84 SET1\nSET1.9         134 SET1\nSET1.10        155 SET1\n\n\n\nCreate a boxplot for the expression level by sample group.\n\n\np_base &lt;- ggplot(gg_df, aes(x = gp, y = expr_value)) +\n  geom_boxplot()\n\np_base\n\n\n\n\n\n\n\n\n\nModify labels:\n\n\nRemove x-axis title\nChange y-axis title to “Expression Level”\nAdd a plot title “Expression of LOH1 in SET1 and WT samples”\nAdd a subtitle “log2FoldChange = 2.85”\n\n\np_base &lt;- p_base + labs(\n  x = NULL,\n  y = \"Expression Level\",\n  title = \"Expression of LOH1 in SET1 and WT samples\",\n  subtitle = \"log2FoldChange = 2.85\"\n)\np_base\n\n\n\n\n\n\n\n\n\nAdd a layer of scatter plot over the boxplot.\n\n\nColor the points by sample group.\nUse the alpha parameter to let points be semi-transparent.\n\n\np_base &lt;- p_base +\n  geom_point(\n    aes(color = gp),\n    alpha = 0.5\n  )\np_base\n\n\n\n\n\n\n\n\n\nChange the theme to theme_minimal().\n\n\np_base &lt;- p_base + theme_minimal()\np_base\n\n\n\n\n\n\n\n\n\nWith the theme() function:\n\n\nMove the plot title to the center.\nHide the legend.\n\n\np_base &lt;- p_base + theme(\n  plot.title = element_text(hjust = 0.5), # center plot title\n  legend.position = \"none\"\n)\np_base\n\n\n\n\n\n\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into ggplot2, keep it up!"
  },
  {
    "objectID": "ioc_r/week05/r_w05_work.html",
    "href": "ioc_r/week05/r_w05_work.html",
    "title": "Week 5 - Homework",
    "section": "",
    "text": "Import Data\nWe need to use two data for this exercise:\n\nthe bulk RNAseq gene expression data from the read-counts.csv file.\nthe diffenrential expression (DE) analysis results toy_DEanalysis.\n\nReminder: the DE results were obtained by comparing SET1 samples to WT samples using data from read-counts.csv\n\nImport DE analysis result (toy_DEanalysis.csv) and name it as de_res.\n\n(You can either use the basic function read.csv() or the function read_csv() from the {readr} package.)\n\nImport the read-counts.csv file and name it counts.\n\nYou can either use the first column (Feature) to name the rows of your data frame or keep the fisrt column as is. It will just change how you filter data later.\n\n\nFind Genes of Interest\n\nFind the genes which satisfy the following conditions:\n\n\nlog2 fold change &lt; -1 or &gt; 1 (a.k.a, the absolute log2 fold change is bigger than 1)\nadjusted p-value &lt; 0.05\n\nStore the results in a variable target_genes.\n\n\nDraw Boxplots\n\nLoad the {ggplot2} package.\nDraw a boxplot for the 1st gene of the target_genes to show the expression level between SET1 and WT samples.\n\nHints: you need to extract the expression data for the gene from the counts and build a data frame for the boxplot.\n\nRefine the boxplot from question 5 to include the following customizations:\n\n\nA subtitle showing the gene’s log2 fold change.\nFill the boxplot with different colors for the “WT” and “SET1” groups.\nApply the theme_minimal() theme.\nHide the legend.\n\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html",
    "href": "ioc_r/week01/r_w01_exos.html",
    "title": "Week 1 - Hands-On Examples",
    "section": "",
    "text": "Get familiar with the RStudio\nCreate an R project in RStudio\nImport data file into RStudio\nExport data from RStudio"
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#goals",
    "href": "ioc_r/week01/r_w01_exos.html#goals",
    "title": "Week 1 - Hands-On Examples",
    "section": "",
    "text": "Get familiar with the RStudio\nCreate an R project in RStudio\nImport data file into RStudio\nExport data from RStudio"
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#create-an-r-project",
    "href": "ioc_r/week01/r_w01_exos.html#create-an-r-project",
    "title": "Week 1 - Hands-On Examples",
    "section": "Create an R project",
    "text": "Create an R project\n\nOpen RStudio, create a new R project in the folder of your choice.\n\nSome rules for naming your project:\n\nChoose a short and descriptive name.\nUse snake case (lowercase letters and underscores only). Avoid special characters (such as !, #, ) and spaces.\nThe name cannot starts with numbers.\n\n\nOpen your R project, create three new folders, i.e., data, scripts, outputs.\nDownload two files:\n\n\nAn R script named “r_w01_exos.R” for this week’s exercise (here), save it into the scripts folder.\nA data file called “read-counts.csv” (here), put it into the data folder.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are using RStudio server, files can be uploaded using the “Upload” icon in the Files pane."
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#files-description",
    "href": "ioc_r/week01/r_w01_exos.html#files-description",
    "title": "Week 1 - Hands-On Examples",
    "section": "Files Description",
    "text": "Files Description\n\nData File\nWe’ll be working with a gene expression dataset as an example, sourced from this link.\nThe data comes from an experiment using PCR to study 44 genes. The results were measured to see which genes are active at different stages in Yeast cell cycling. Several strains were tested, including wildtype and some with specific genes knock-downs. Samples were taken at nine time points over two cell cycles (two hours).\n\n\nThe R script\nThe r_w01_exos.R script contains all commands R for the exercise."
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#play-with-rstudio",
    "href": "ioc_r/week01/r_w01_exos.html#play-with-rstudio",
    "title": "Week 1 - Hands-On Examples",
    "section": "Play with RStudio",
    "text": "Play with RStudio\nIn your R project, open the downloaded R script r_w01_exos.R: In RStudio menu bar, click File -&gt; Open File -&gt; selec the Rscript, or click the file in the Files pane.\n\nImport Data\n\nIf you are not familiar with the file content, click on the CSV file in Files pane to “View” it. Identify the column separator and the decimal sign.\nImport the file into R and call the imported data “counts”.\nCopy paste the command shown in the R console.\n\n\n\nExercises\n\nWhat is the absolute file path of the imported data counts? What is its relative path? Verify your answer using the function file.exists().\n\n\ngetwd() # show the current working directory\n\nabs_path &lt;- \"\" # put your answer between quotes\nrel_path &lt;- \"\" # put your answer between quotes\n\nfile.exists(abs_path) # check if R finds your file using absolute path\nfile.exists(rel_path) # check if R finds your file using relative path\n\n\nWhat is the dimension (number of rows and columns) of the data frame? Check the “Environment” panel or use the function dim().\n\n\ndim(counts)\n\n[1] 45 41\n\n\nIn the “Environment” panel, click on the tabular icon next to the dataset to visualize the it.\nWe can extract all gene expressions for the sample named “WT.2” using counts[[\"WT.2\"]].\n\nTry mode() on the expression data for “WT.2”, what does it return?\n\n\nmode(counts[[\"WT.2\"]])\n\n[1] \"numeric\"\n\n\n\nCalculate the average expression (mean()) and standard deviation (sd()) of genes from the sample “WT.2”.\n\n\nmean(counts[[\"WT.2\"]])\n\n[1] 148\n\nsd(counts[[\"WT.2\"]])\n\n[1] 392.7854\n\n\n\nGenerate descriptive statistics for all genes from the sample “WT.2” using summary().\n\n\nsummary(counts[[\"WT.2\"]])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       6      27     148     110    2527 \n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nWhat are quartiles?\nQuartiles are three values that split sorted data into four equal parts.\n\n(figure modified from this source)\nIQR (Interquartile range) = Q3 - Q1\n\n\n\nGenerate a histogram for the “WT.2” sample using hist(). What does the distribution look like?\n\n\n\n\n\n\n\nStats Time!\n\n\n\nHistograms help us see how data is spread out. They show how many data points fall into different intervals, or bins. By looking at a histogram, we can quickly understand the shape of the data, like if it’s skewed or has outliers. It’s a simple way to get an overview of your data.\n\n\n\nhist(counts[[\"WT.2\"]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nlog2 Transformation\nA log2 transformation is commonly used to normalize data and reduce skewness, especially in datasets with values spanning several orders of magnitude. Many biological data, like gene expression counts, tend to have a highly skewed distribution with a long tail of large values. The log2 transformation helps:\n\nStabilize variance – Makes data with large differences more comparable.\nHandle ratios – Converts multiplicative relationships into additive ones, simplifying interpretation.\nImprove normality – Makes the data distribution closer to normal, which is often required for statistical tests.\n\n\n\n\nplot(\n  x = counts[[\"WT.2\"]], y = log2(counts[[\"WT.2\"]]),\n  xlab = \"Original Scale\", ylab = \"log2 Scale\",\n  main = \"Gene expression for the sample WT.2\"\n)\nabline(v = 256, col = \"red\", lty = 2) # Add vertical line \nabline(h = 8, col = \"red\", lty = 2) # Add horizontal line\ntext(x = 500, y = 7, labels = expression(2^8 == 256)) # Add equation\n\n\n\n\n\n\n\n\nRe draw the histogram with the log2 transformed data, what does the distribution look like now?\n\nhist(log2(counts[[\"WT.2\"]]))\n\n\n\n\n\n\n\n\n\nWe can extract the gene name column (called “Feature”) and the column for sample “WT.2” using this command: counts[, c(\"Feature\", \"WT.2\")]. Export the data to a file called WT_2_expression.csv, store this file in the outputs folder.\n\n\nwrite_csv(counts[, c(\"Feature\", \"WT.2\")], file = \"outputs/WT_2_expression.csv\")\n\nCheck in the outputs folder, do you see the saved file? Does the content correspond to your expectations?\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week07/r_w07_work.html",
    "href": "ioc_r/week07/r_w07_work.html",
    "title": "Week 7 - Homework",
    "section": "",
    "text": "We already saw how to import and tidy the data for structure 1 during the exercise.\nJust a reminder, the expression of 20 genes was measured in mice aged from 10 to 60 days, with both male and female mice, and each group consists of 6 animals. The gene expression data is stored in two files, one for each brain structure. Within each file, rows represent the different ages, and columns represent the gene, sex, and animal.\nThe data is available in two CSV files:\n\ndata_anonym_struc1_noise.csv\ndata_anonym_struc2_noise.csv\n\n\nImport the two data files and reshape them the same way you did up to question 9 of the exercise. Then, combine the two datasets into one. Make sure to adjust any parameters as needed.\n\nHints: You can combine datasets by stacking their rows together to create one final data frame. (Use dplyr::bind_rows() or rbind() for this.)\n\nRemove lines with NA in expression value.\nFor the mice of 20 days, count how many measurements you have for each brain structure in genes 4 and 5 separately.\nExplore how brain structure and genes 16 to 20 relate to each other using the pairs() function. Hint: Convert struc to a factor before passing it to pairs().\n\nWhich pair of variables correlated the most?\n\nBased on the previous figure, which gene appears to show the largest difference in expression between the two brain structures?\n\nChoose an appropriate figure to display this gene’s expression across the brain structures.\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week07/r_w07_work.html#mini-data-project-part-2",
    "href": "ioc_r/week07/r_w07_work.html#mini-data-project-part-2",
    "title": "Week 7 - Homework",
    "section": "",
    "text": "We already saw how to import and tidy the data for structure 1 during the exercise.\nJust a reminder, the expression of 20 genes was measured in mice aged from 10 to 60 days, with both male and female mice, and each group consists of 6 animals. The gene expression data is stored in two files, one for each brain structure. Within each file, rows represent the different ages, and columns represent the gene, sex, and animal.\nThe data is available in two CSV files:\n\ndata_anonym_struc1_noise.csv\ndata_anonym_struc2_noise.csv\n\n\nImport the two data files and reshape them the same way you did up to question 9 of the exercise. Then, combine the two datasets into one. Make sure to adjust any parameters as needed.\n\nHints: You can combine datasets by stacking their rows together to create one final data frame. (Use dplyr::bind_rows() or rbind() for this.)\n\nRemove lines with NA in expression value.\nFor the mice of 20 days, count how many measurements you have for each brain structure in genes 4 and 5 separately.\nExplore how brain structure and genes 16 to 20 relate to each other using the pairs() function. Hint: Convert struc to a factor before passing it to pairs().\n\nWhich pair of variables correlated the most?\n\nBased on the previous figure, which gene appears to show the largest difference in expression between the two brain structures?\n\nChoose an appropriate figure to display this gene’s expression across the brain structures.\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#why-do-we-need-tidyverse",
    "href": "ioc_r/week07/r_w07_slides.html#why-do-we-need-tidyverse",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "Why Do We Need {tidyverse}?",
    "text": "Why Do We Need {tidyverse}?\n{tidyverse} provides a consistent and intuitive set of packages for data manipulation, visualization and analysis. The core packages include:\n\n\n\nreadr: import data into R\nggplot2: visualisation\n\n\n\ntidyr: restructure data\ndplyr: manipulate data\nstringr: manipulate strings\n\n\n## install the core tidyverse packages\ninstall.packages(\"tidyverse\")\n\n## load the core tidyverse packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#forward-chaining-with-pipe",
    "href": "ioc_r/week07/r_w07_slides.html#forward-chaining-with-pipe",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "Forward Chaining with Pipe |>",
    "text": "Forward Chaining with Pipe |&gt;\nThe pipe operator |&gt; takes the output from one function and feed it to the first argument of the next function.\n\nCompare the 3 ways to do calculate the square root of the mean of abolute values of x：\\(\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} |x_i|}\\)\n\n\n\n\n# create a vector\nx &lt;- c(-3, -5, NA, 8)\n\n# version 1: calculation with nested function\nsqrt(mean(abs(x), na.rm = TRUE))\n\n[1] 2.309401\n\n# version 2: use variables to store intermediate results\nabs_vals &lt;- abs(x)\nmean_val &lt;- mean(abs_vals, na.rm = TRUE)\nresult &lt;- sqrt(mean_val)\nresult\n\n[1] 2.309401\n\n\n\n\n# version 3: use pipe to execute code sequentially\nabs(x) |&gt;\n  mean(na.rm = TRUE) |&gt;\n  sqrt()\n\n[1] 2.309401\n\n## version 3bis: or each function in one line\nabs(x) |&gt; mean(na.rm = TRUE) |&gt; sqrt()\n\n[1] 2.309401\n\n\n\n\n\n\n\n\n\n\n\n|&gt; native pipe operator, built into base R (version 4.1+)\n%&gt;% pipe from the {magrittr} package"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#what-is-a-tibble",
    "href": "ioc_r/week07/r_w07_slides.html#what-is-a-tibble",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "What is a tibble?",
    "text": "What is a tibble?\nA “modern” data frame, compatible with the data frame, but with some enhancements: better printing, less strict on column names, consistent subsetting, etc.\n\nData imported by {readr} is in tibble format.\n\n\nreadr::read_csv(\"../exos_data/penguins.csv\")\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\ntibbles don’t store row names. The numbers before the first column in the printed tibble are not row names or an index stored in the data. They are simply row numbers displayed for readability."
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#what-is-a-tibble-1",
    "href": "ioc_r/week07/r_w07_slides.html#what-is-a-tibble-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "What is a tibble?",
    "text": "What is a tibble?\nA “modern” data frame, compatible with the data frame, but with some enhancements.\n\nCreate a tibble.\n\n\ntibble(col1 = 7:8, col2 = c(TRUE, FALSE))\n\n# A tibble: 2 × 2\n   col1 col2 \n  &lt;int&gt; &lt;lgl&gt;\n1     7 TRUE \n2     8 FALSE\n\n\n\nConvert a data frame or a matrix into a tibble, with as_tibble() function.\n\n\niris_tbl &lt;- as_tibble(iris)\niris_tbl |&gt; head(3)\n\n# A tibble: 3 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n\n\n\n\n\n\n\n\nchr: character; dbl: double; int: integer; fct: factor; lgl: logical; dttm: date and time."
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#tidyr---pivot_longer",
    "href": "ioc_r/week07/r_w07_slides.html#tidyr---pivot_longer",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{tidyr} - pivot_longer()",
    "text": "{tidyr} - pivot_longer()\nPivot data into longer format by increasing the number of rows.\n\n\n\nwider_data &lt;- tibble(\n  gene = paste0(\"gene\", LETTERS[1:3]),\n  control = c(NA, 20, 30),\n  treatment = c(15, 25, 35)\n)\nwider_data\n\n# A tibble: 3 × 3\n  gene  control treatment\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 geneA      NA        15\n2 geneB      20        25\n3 geneC      30        35\n\n\n\n\nwider_data |&gt;\n  pivot_longer(\n    cols = c(control, treatment),\n    names_to = \"condition\",\n    values_to = \"expression_level\"\n  )\n\n# A tibble: 6 × 3\n  gene  condition expression_level\n  &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 geneA control                 NA\n2 geneA treatment               15\n3 geneB control                 20\n4 geneB treatment               25\n5 geneC control                 30\n6 geneC treatment               35"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#tidyr---pivot_wider",
    "href": "ioc_r/week07/r_w07_slides.html#tidyr---pivot_wider",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{tidyr} - pivot_wider()",
    "text": "{tidyr} - pivot_wider()\nPivot data into wider format by increasing the number of columns. It’s the inverse transformation of pivot_longer().\n\n\n\nlonger_data &lt;- tibble(\n  gene = rep(paste0(\"gene\", LETTERS[1:3]), 2),\n  condition = rep(c(\"control\", \"treatment\"), each = 3),\n  expression_level = c(NA, 20, 30, 15, 25, 35)\n)\nlonger_data\n\n# A tibble: 6 × 3\n  gene  condition expression_level\n  &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt;\n1 geneA control                 NA\n2 geneB control                 20\n3 geneC control                 30\n4 geneA treatment               15\n5 geneB treatment               25\n6 geneC treatment               35\n\n\n\n\n# widens by condition\nlonger_data |&gt;\n  pivot_wider(\n    names_from = condition, values_from = expression_level\n  )\n\n# A tibble: 3 × 3\n  gene  control treatment\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 geneA      NA        15\n2 geneB      20        25\n3 geneC      30        35\n\n# widens by gene\nlonger_data |&gt;\n  pivot_wider(\n    names_from = gene, values_from = expression_level\n  )\n\n# A tibble: 2 × 4\n  condition geneA geneB geneC\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 control      NA    20    30\n2 treatment    15    25    35"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#tidyr---drop_na-in-table",
    "href": "ioc_r/week07/r_w07_slides.html#tidyr---drop_na-in-table",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{tidyr} - drop_na() in Table",
    "text": "{tidyr} - drop_na() in Table\nBy default keep only rows with no missing value across all columns.\n\n\n\nlonger_data$description &lt;- rep(\n  c(\"growth regulation\", \"stress response\", NA),\n  times = 2\n)\nlonger_data\n\n# A tibble: 6 × 4\n  gene  condition expression_level description      \n  &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;            \n1 geneA control                 NA growth regulation\n2 geneB control                 20 stress response  \n3 geneC control                 30 &lt;NA&gt;             \n4 geneA treatment               15 growth regulation\n5 geneB treatment               25 stress response  \n6 geneC treatment               35 &lt;NA&gt;             \n\n\n\n\n# drop rows with NA in any columns\nlonger_data |&gt; drop_na()\n\n# A tibble: 3 × 4\n  gene  condition expression_level description      \n  &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;            \n1 geneB control                 20 stress response  \n2 geneA treatment               15 growth regulation\n3 geneB treatment               25 stress response  \n\n\n\n\n\n# drop rows with NA in specified column(s)\nlonger_data |&gt; drop_na(description)\n\n# A tibble: 4 × 4\n  gene  condition expression_level description      \n  &lt;chr&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;            \n1 geneA control                 NA growth regulation\n2 geneB control                 20 stress response  \n3 geneA treatment               15 growth regulation\n4 geneB treatment               25 stress response  \n\n\n\n\n\n\n\n\n\nIn tidyverse, column names can be used as-is without quotes. If a column name starts with number, has spaces or special characters, you must use backticks (`column name`, `1col`)"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - select() Columns",
    "text": "{dplyr} - select() Columns\nSelect by column index.\n\n\n\ncolnames(iris_tbl)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n# select one column\niris_tbl |&gt; select(1) |&gt; head(3)\n\n# A tibble: 3 × 1\n  Sepal.Length\n         &lt;dbl&gt;\n1          5.1\n2          4.9\n3          4.7\n\n# select mutiple columns\niris_tbl |&gt; select(1, 3) |&gt; head(3)\n\n# A tibble: 3 × 2\n  Sepal.Length Petal.Length\n         &lt;dbl&gt;        &lt;dbl&gt;\n1          5.1          1.4\n2          4.9          1.4\n3          4.7          1.3\n\n\n\n\n# select a range of consecutive indices\niris_tbl |&gt; select(1:4) |&gt; head(3)\n\n# A tibble: 3 × 4\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1          5.1         3.5          1.4         0.2\n2          4.9         3            1.4         0.2\n3          4.7         3.2          1.3         0.2\n\n# use ! or - operator to negate a selection\niris_tbl |&gt; select(!1:4) |&gt; head(3)\n\n# A tibble: 3 × 1\n  Species\n  &lt;fct&gt;  \n1 setosa \n2 setosa \n3 setosa \n\n# iris_tbl |&gt; select(-c(1:4)) |&gt; head(3) # idem"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns-1",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - select() Columns",
    "text": "{dplyr} - select() Columns\nSelect by column name.\n\n\n\ncolnames(iris_tbl)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n# select one column\niris_tbl |&gt; select(Species) |&gt; head(3)\n\n# A tibble: 3 × 1\n  Species\n  &lt;fct&gt;  \n1 setosa \n2 setosa \n3 setosa \n\n# select mutiple columns\niris_tbl |&gt;\n  select(Species, Sepal.Length) |&gt;\n  head(3)\n\n# A tibble: 3 × 2\n  Species Sepal.Length\n  &lt;fct&gt;          &lt;dbl&gt;\n1 setosa           5.1\n2 setosa           4.9\n3 setosa           4.7\n\n\n\n\n# select a range of consecutive variables\niris_tbl |&gt;\n  select(Sepal.Length:Petal.Length) |&gt;\n  head(3)\n\n# A tibble: 3 × 3\n  Sepal.Length Sepal.Width Petal.Length\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1          5.1         3.5          1.4\n2          4.9         3            1.4\n3          4.7         3.2          1.3\n\n# use ! or - operator to negate a selection\niris_tbl |&gt;\n  select(!(Sepal.Length:Petal.Length)) |&gt;\n  head(3)\n\n# A tibble: 3 × 2\n  Petal.Width Species\n        &lt;dbl&gt; &lt;fct&gt;  \n1         0.2 setosa \n2         0.2 setosa \n3         0.2 setosa \n\n# iris_tbl |&gt; # idem\n#   select(-(Sepal.Length:Petal.Length)) |&gt;\n#   head(3)"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns-2",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---select-columns-2",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - select() Columns",
    "text": "{dplyr} - select() Columns\nSelect by using helper functions, by default case ignored when matching name.\n\n\n\ncolnames(iris_tbl)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\niris_tbl |&gt;\n  select(starts_with(\"s\")) |&gt;\n  head(3)\n\n# A tibble: 3 × 3\n  Sepal.Length Sepal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          5.1         3.5 setosa \n2          4.9         3   setosa \n3          4.7         3.2 setosa \n\niris_tbl |&gt;\n  select(ends_with(\"S\")) |&gt;\n  head(3)\n\n# A tibble: 3 × 1\n  Species\n  &lt;fct&gt;  \n1 setosa \n2 setosa \n3 setosa \n\n\n\n\niris_tbl |&gt;\n  select(contains(\"Len\")) |&gt;\n  head(3)\n\n# A tibble: 3 × 2\n  Sepal.Length Petal.Length\n         &lt;dbl&gt;        &lt;dbl&gt;\n1          5.1          1.4\n2          4.9          1.4\n3          4.7          1.3\n\niris_tbl |&gt;\n  select(matches(\"len\")) |&gt;\n  head(3)\n\n# A tibble: 3 × 2\n  Sepal.Length Petal.Length\n         &lt;dbl&gt;        &lt;dbl&gt;\n1          5.1          1.4\n2          4.9          1.4\n3          4.7          1.3\n\n# do not ignore case\niris_tbl |&gt;\n  select(matches(\"len\", ignore.case = FALSE))\n\n# A tibble: 150 × 0"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---mutate-columns",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---mutate-columns",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - mutate() Columns",
    "text": "{dplyr} - mutate() Columns\n\nUse mutate() to add or modify columns\n\n\n# create a new column\niris_tbl |&gt; mutate(sepal_len_mm = Sepal.Length * 100) |&gt; head(3)\n\n# A tibble: 3 × 6\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species sepal_len_mm\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt;\n1          5.1         3.5          1.4         0.2 setosa           510\n2          4.9         3            1.4         0.2 setosa           490\n3          4.7         3.2          1.3         0.2 setosa           470\n\n# remove the column\niris_tbl |&gt; mutate(sepal_len_mm = NULL) |&gt; head(3)\n\n# A tibble: 3 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n\nmutate(iris_tbl, sepal_len_mm = Sepal.Length * 100, petal_len_mm = Petal.Length * 100) |&gt;\n  head(2)\n\n# A tibble: 2 × 7\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species sepal_len_mm\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt;\n1          5.1         3.5          1.4         0.2 setosa           510\n2          4.9         3            1.4         0.2 setosa           490\n# ℹ 1 more variable: petal_len_mm &lt;dbl&gt;"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---rename-columns",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---rename-columns",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - rename() Columns",
    "text": "{dplyr} - rename() Columns\n\niris_tbl |&gt; rename(espece = Species, petal_width = Petal.Width)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length petal_width espece\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt; \n 1          5.1         3.5          1.4         0.2 setosa\n 2          4.9         3            1.4         0.2 setosa\n 3          4.7         3.2          1.3         0.2 setosa\n 4          4.6         3.1          1.5         0.2 setosa\n 5          5           3.6          1.4         0.2 setosa\n 6          5.4         3.9          1.7         0.4 setosa\n 7          4.6         3.4          1.4         0.3 setosa\n 8          5           3.4          1.5         0.2 setosa\n 9          4.4         2.9          1.4         0.2 setosa\n10          4.9         3.1          1.5         0.1 setosa\n# ℹ 140 more rows"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---filter-rows",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---filter-rows",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - filter() Rows",
    "text": "{dplyr} - filter() Rows\nFilter rows based on column values.\n\niris_tbl |&gt; filter(Sepal.Length &gt; 6.8)\n\n# A tibble: 17 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     \n 1          7           3.2          4.7         1.4 versicolor\n 2          6.9         3.1          4.9         1.5 versicolor\n 3          7.1         3            5.9         2.1 virginica \n 4          7.6         3            6.6         2.1 virginica \n 5          7.3         2.9          6.3         1.8 virginica \n 6          7.2         3.6          6.1         2.5 virginica \n 7          7.7         3.8          6.7         2.2 virginica \n 8          7.7         2.6          6.9         2.3 virginica \n 9          6.9         3.2          5.7         2.3 virginica \n10          7.7         2.8          6.7         2   virginica \n11          7.2         3.2          6           1.8 virginica \n12          7.2         3            5.8         1.6 virginica \n13          7.4         2.8          6.1         1.9 virginica \n14          7.9         3.8          6.4         2   virginica \n15          7.7         3            6.1         2.3 virginica \n16          6.9         3.1          5.4         2.1 virginica \n17          6.9         3.1          5.1         2.3 virginica"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---filter-rows-1",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---filter-rows-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - filter() Rows",
    "text": "{dplyr} - filter() Rows\nFilter rows based on column values.\n\n# combine conditions\niris_tbl |&gt; filter(Sepal.Length &gt; 6.8 & Species == \"versicolor\")\n\n# A tibble: 2 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species   \n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     \n1          7           3.2          4.7         1.4 versicolor\n2          6.9         3.1          4.9         1.5 versicolor\n\n# chaining with other operation\niris_tbl |&gt;\n  filter(Sepal.Length &gt; 6.8 & Species == \"versicolor\") |&gt;\n  select(contains(c(\"sepal\", \"speci\")))\n\n# A tibble: 2 × 3\n  Sepal.Length Sepal.Width Species   \n         &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     \n1          7           3.2 versicolor\n2          6.9         3.1 versicolor\n\n\n\n\n\n\n\n\n\nExtract rows which correspond to setosa having sepal length smaller than 4.5 cm or versicolor having petal width bigger than 1.5 cm."
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---arrange-rows",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---arrange-rows",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - arrange() Rows",
    "text": "{dplyr} - arrange() Rows\nOrder rows based on one column.\n\n# by default in ascending order\niris_tbl |&gt; arrange(Sepal.Length) |&gt; head(3)\n\n# A tibble: 3 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          4.3         3            1.1         0.1 setosa \n2          4.4         2.9          1.4         0.2 setosa \n3          4.4         3            1.3         0.2 setosa \n\n# by descending order\niris_tbl |&gt; arrange(desc(Sepal.Length)) |&gt; head(3)\n\n# A tibble: 3 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species  \n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;    \n1          7.9         3.8          6.4         2   virginica\n2          7.7         3.8          6.7         2.2 virginica\n3          7.7         2.6          6.9         2.3 virginica"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---arrange-rows-1",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---arrange-rows-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - arrange() Rows",
    "text": "{dplyr} - arrange() Rows\nOrder rows based on multiple columns.\n\niris_tbl |&gt; arrange(desc(Sepal.Length), Sepal.Width)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;    \n 1          7.9         3.8          6.4         2   virginica\n 2          7.7         2.6          6.9         2.3 virginica\n 3          7.7         2.8          6.7         2   virginica\n 4          7.7         3            6.1         2.3 virginica\n 5          7.7         3.8          6.7         2.2 virginica\n 6          7.6         3            6.6         2.1 virginica\n 7          7.4         2.8          6.1         1.9 virginica\n 8          7.3         2.9          6.3         1.8 virginica\n 9          7.2         3            5.8         1.6 virginica\n10          7.2         3.2          6           1.8 virginica\n# ℹ 140 more rows"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---count-rows",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---count-rows",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - count() Rows",
    "text": "{dplyr} - count() Rows\n\nCheck unique values of one or more variables.\n\n\n# count based on one variable\niris_tbl |&gt; count(Species)\n\n# A tibble: 3 × 2\n  Species        n\n  &lt;fct&gt;      &lt;int&gt;\n1 setosa        50\n2 versicolor    50\n3 virginica     50\n\n# count for the entire data frame\niris_tbl |&gt; count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   150"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---summarise-function",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---summarise-function",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - summarise() Function",
    "text": "{dplyr} - summarise() Function\n\n# across all species\niris_tbl |&gt;\n  summarise(\n    mean_sepal_len = mean(Sepal.Length, na.rm = TRUE),\n    sd_sepal_len = sd(Sepal.Length, na.rm = TRUE),\n    var_sepal_len = var(Sepal.Length, na.rm = TRUE)\n  )\n\n# A tibble: 1 × 3\n  mean_sepal_len sd_sepal_len var_sepal_len\n           &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n1           5.84        0.828         0.686\n\n\n\n\n\n\n\n\n\nModify the code to include the calculation of the maximum and minimum sepal lengths.\n\n\n\n\n\n\niris_tbl |&gt;\n  summarise(\n    mean_sepal_len = mean(Sepal.Length, na.rm = TRUE),\n    sd_sepal_len = sd(Sepal.Length, na.rm = TRUE),\n    var_sepal_len = var(Sepal.Length, na.rm = TRUE),\n    max_sepal_len = max(Sepal.Length, na.rm = TRUE),\n    min_sepal_len = min(Sepal.Length, na.rm = TRUE)\n  )\n\n# A tibble: 1 × 5\n  mean_sepal_len sd_sepal_len var_sepal_len max_sepal_len min_sepal_len\n           &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1           5.84        0.828         0.686           7.9           4.3"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---group_by-data",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---group_by-data",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - group_by Data",
    "text": "{dplyr} - group_by Data\n\nUse group_by to group data if we need operation based on defined group(s).\n\n\niris_tbl |&gt; group_by(Species)\n\n# A tibble: 150 × 5\n# Groups:   Species [3]\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\n\n\n\n\n\n\ngroup_by does not change the actual data, it just adds a grouping structure to it."
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---group_by-data-1",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---group_by-data-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - group_by Data",
    "text": "{dplyr} - group_by Data\n\n# summarise by species\niris_tbl |&gt;\n  group_by(Species) |&gt;\n  summarise(\n    mean_sepal_len = mean(Sepal.Length, na.rm = TRUE),\n    sd_sepal_len = sd(Sepal.Length, na.rm = TRUE),\n    var_sepal_len = var(Sepal.Length, na.rm = TRUE)\n  )\n\n# A tibble: 3 × 4\n  Species    mean_sepal_len sd_sepal_len var_sepal_len\n  &lt;fct&gt;               &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n1 setosa               5.01        0.352         0.124\n2 versicolor           5.94        0.516         0.266\n3 virginica            6.59        0.636         0.404\n\n# count for the \"entire\" data frame for each species\niris_tbl |&gt; group_by(Species) |&gt; count()\n\n# A tibble: 3 × 2\n# Groups:   Species [3]\n  Species        n\n  &lt;fct&gt;      &lt;int&gt;\n1 setosa        50\n2 versicolor    50\n3 virginica     50"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---ungroup-data",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---ungroup-data",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - ungroup() Data",
    "text": "{dplyr} - ungroup() Data\n\nUse ungroup() to remove grouping.\n\n\niris_grouped &lt;- iris_tbl |&gt; group_by(Species)\nhead(iris_grouped, 3)\n\n# A tibble: 3 × 5\n# Groups:   Species [1]\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n\niris_ungrouped &lt;-  iris_grouped |&gt; ungroup()\nhead(iris_ungrouped, 3)\n\n# A tibble: 3 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#todays-goals",
    "href": "ioc_r/week07/r_w07_slides.html#todays-goals",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nClean, reshape, and manipulate real-world data using {dplyr} and {tidyr}\nIntegrate tidy data into downstream analysis (e.g., for visualization or statistical analysis)"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---pull-column",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---pull-column",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - pull() Column",
    "text": "{dplyr} - pull() Column\nSimilar to $ operator, pull() extracts one column and return results in a vector.\n\n# by default extract the last column\niris_tbl |&gt;\n  pull() |&gt;\n  head()\n\n[1] setosa setosa setosa setosa setosa setosa\nLevels: setosa versicolor virginica\n\n# extract by using explicite column name\niris_tbl |&gt;\n  pull(Species) |&gt;\n  head()\n\n[1] setosa setosa setosa setosa setosa setosa\nLevels: setosa versicolor virginica\n\niris_tbl |&gt;\n  pull(Sepal.Width) |&gt;\n  head()\n\n[1] 3.5 3.0 3.2 3.1 3.6 3.9"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---if_else-function",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---if_else-function",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - if_else() Function",
    "text": "{dplyr} - if_else() Function\nSimilar to the ifelse() function, but allow to mange missing values.\n\n\n\nx &lt;- c(-2:2, NA)\nifelse(x &lt; 0, \"negative\", \"positive\")\n\n[1] \"negative\" \"negative\" \"positive\" \"positive\" \"positive\" NA        \n\nif_else(x &lt; 0, \"negative\", \"positive\", missing = \"not available\")\n\n[1] \"negative\"      \"negative\"      \"positive\"      \"positive\"     \n[5] \"positive\"      \"not available\"\n\n\n\n\niris_tbl |&gt;\n  mutate(sepal_len_cat = if_else(\n    condition = Sepal.Length &gt;= 7,\n    true = \"long\",\n    false = \"normal\",\n    missing = \"missing\"\n  )) |&gt;\n  select(Sepal.Length, Species, sepal_len_cat)\n\n# A tibble: 150 × 3\n   Sepal.Length Species sepal_len_cat\n          &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt;        \n 1          5.1 setosa  normal       \n 2          4.9 setosa  normal       \n 3          4.7 setosa  normal       \n 4          4.6 setosa  normal       \n 5          5   setosa  normal       \n 6          5.4 setosa  normal       \n 7          4.6 setosa  normal       \n 8          5   setosa  normal       \n 9          4.4 setosa  normal       \n10          4.9 setosa  normal       \n# ℹ 140 more rows"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---slice-rows",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---slice-rows",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - slice() Rows",
    "text": "{dplyr} - slice() Rows\n\nUse the function slice() to select rows.\n\n\n# create a column containing row index\niris_tbl &lt;- mutate(iris_tbl, index = seq_len(nrow(iris_tbl)))\n\ntail(iris_tbl, 4)\n\n# A tibble: 4 × 6\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species   index\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     &lt;int&gt;\n1          6.3         2.5          5           1.9 virginica   147\n2          6.5         3            5.2         2   virginica   148\n3          6.2         3.4          5.4         2.3 virginica   149\n4          5.9         3            5.1         1.8 virginica   150\n\n# extract rows 5 and 3\niris_tbl |&gt; slice(5, 3)\n\n# A tibble: 2 × 6\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species index\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;int&gt;\n1          5           3.6          1.4         0.2 setosa      5\n2          4.7         3.2          1.3         0.2 setosa      3"
  },
  {
    "objectID": "ioc_r/week07/r_w07_slides.html#dplyr---slice-rows-1",
    "href": "ioc_r/week07/r_w07_slides.html#dplyr---slice-rows-1",
    "title": "Tidy Up: Wrangling Data with {dplyr} and {tidyr}",
    "section": "{dplyr} - slice() Rows",
    "text": "{dplyr} - slice() Rows\n\nUse the slice_head() or slice_tail() to select the first or last rows.\n\n\niris_tbl |&gt; slice_head(n = 3)\n\n# A tibble: 3 × 6\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species index\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;int&gt;\n1          5.1         3.5          1.4         0.2 setosa      1\n2          4.9         3            1.4         0.2 setosa      2\n3          4.7         3.2          1.3         0.2 setosa      3\n\niris_tbl |&gt; slice_tail(n = 3)\n\n# A tibble: 3 × 6\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species   index\n         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     &lt;int&gt;\n1          6.5         3            5.2         2   virginica   148\n2          6.2         3.4          5.4         2.3 virginica   149\n3          5.9         3            5.1         1.8 virginica   150"
  },
  {
    "objectID": "ioc_r_toc.html",
    "href": "ioc_r_toc.html",
    "title": "Materials for the IOC-R",
    "section": "",
    "text": "Kickstart with R:Your Gateway to Data Science\n\n\n\nweek01\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1 - Hands-On Examples\n\n\n\nweek01\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1 - Homework\n\n\n\nweek01\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Foundations:Vectors and Matrices\n\n\n\nweek02\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2 - Hands-On Examples\n\n\n\nweek02\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2 - Homework\n\n\n\nweek02\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Complex Data Structures:Data Frames and Lists\n\n\n\nweek03\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 - Hands-On Examples\n\n\n\nweek03\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 - Homework\n\n\n\nweek03\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding Logic:Operators, Conditions, and Functions\n\n\n\nweek04\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4 - Hands-On Examples\n\n\n\nweek04\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4 - Homework\n\n\n\nweek04\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraphing with {ggplot2} (Part 1)\n\n\n\nweek05\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5 - Hands-On Examples\n\n\n\nweek05\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5 - Homework\n\n\n\nweek05\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR-fresh:Revisiting the Essentials\n\n\n\nweek06\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6 - Hands-On Examples\n\n\n\nweek06\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6 - Homework\n\n\n\nweek06\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Up: Wrangling Data with {dplyr} and {tidyr}\n\n\n\nweek07\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7 - Hands-On Examples\n\n\n\nweek07\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7 - Homework\n\n\n\nweek07\n\nhomework\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ioc_r/week07/r_w07_exos.html",
    "href": "ioc_r/week07/r_w07_exos.html",
    "title": "Week 7 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week07/r_w07_exos.html#goals",
    "href": "ioc_r/week07/r_w07_exos.html#goals",
    "title": "Week 7 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nClean, reshape, and manipulate real-world data using {dplyr} and {tidyr}\nIntegrate tidy data into downstream analysis (e.g., for visualization or statistical analysis)"
  },
  {
    "objectID": "ioc_r/week07/r_w07_exos.html#install-tidyverse-and-load-the-package",
    "href": "ioc_r/week07/r_w07_exos.html#install-tidyverse-and-load-the-package",
    "title": "Week 7 - Hands-On Examples",
    "section": "Install {tidyverse} and Load the Package",
    "text": "Install {tidyverse} and Load the Package\n\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ioc_r/week07/r_w07_exos.html#mini-data-project",
    "href": "ioc_r/week07/r_w07_exos.html#mini-data-project",
    "title": "Week 7 - Hands-On Examples",
    "section": "Mini Data Project",
    "text": "Mini Data Project\nThis mini data project is based on a real project that focuses on gene expression across different time points.\nA researcher has measured the expression levels of 20 genes (anonymed as 1 to 20) using the RT-qPCR technique. The gene expression was assessed in two structures of the mouse brain. Mice ranged in age from 10 to 60 days (10, 15, 20, 25, 30, 35, 40, 45, 50, 60 days), and the experiment was repeated with both male and female mice, with 6 animals (named from A to F) in each group.\nAccording to the researcher, the data was stored in two files, one for each brain structure. Within each file, rows represent the different ages, and columns represent the gene, sex, and animal.\nA small Gaussian noise has been added to the original data, preserving the overall structure.\nThe data is available in two CSV files:\n\ndata_anonym_struc1_noise.csv\ndata_anonym_struc2_noise.csv\n\nWe will focus on the data from the brain structure 1.\n\nImport the Data\n\nPlease download the data_anonym_struc1_noise.csv file. Observe your data file:\n\n\nIs there a header line?\nWhat is the separator between columns?\nWhich character was used for decimal points?\nWhich character was used for missing data (between two seperators where there’s no value)?\n\n\n\n\n\n\n\nPreview File\n\n\n\nYou can preview the data file in different ways, such as:\n\nOpening it with a text editor;\nClicking the file name and selecting “View File” in the RStudio File Pane;\nOr by using the terminal if you are using Unix-based system: head -n2 data_anonym_struc1_noise.csv (to view the first 2 lines) or more data_anonym_struc1_noise.csv (to scroll through the file and quit by typing q), which is recommended for large files.\n\n\n\n\nImport the data_anonym_struc1_noise.csv into RStudio, you can use either:\n\n\nthe read_csv2() from the package {readr} (?readr::read_csv2), or\nuse the click-button way and copy-paste the code in your script.\n\nDon’t forget to use/select the appropriate parameters to make sure you import correctly the data.\nName the data as data1. Convert your imported data to tibble format if it’s not the case.\nWhat is the data dimension?\n\ndata1 &lt;- readr::read_csv2(\n  file = \"../exos_data/data_anonym_struc1_noise.csv\",\n  locale = locale(decimal_mark = \",\")\n)\n\nNew names:\nRows: 10 Columns: 241\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" dbl\n(241): ...1, 1MA, 1MB, 1MC, 1MD, 1ME, 1MF, 2MA, 2MB, 2MC, 2MD, 2ME, 2MF,...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\n# or use the read_delim() with appropriate parameters\n# data1 &lt;- read_delim(\n#   \"../exos_data/data_anonym_struc1_noise.csv\", \n#   delim = \";\", locale = locale(decimal_mark = \",\")\n# )\n\n\nShow the first 10 columns of your data.\n\n\n# classic way\ndata1[, 1:10]\n\n# A tibble: 10 × 10\n    ...1 `1MA` `1MB` `1MC` `1MD`  `1ME` `1MF` `2MA` `2MB` `2MC`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1    10 1.93  0.413 1.21  1.40   1.02  0.795 1.51  0.476 1.32 \n 2    15 1.39  1.79  1.31  1.80   1.37  1.58  1.03  1.28  1.14 \n 3    20 2.12  2.07  0.690 0.406  0.809 1.73  1.59  1.67  0.608\n 4    25 1.71  0.544 0.862 0.444  1.01  1.32  1.17  0.508 0.882\n 5    30 0.974 0.695 0.436 0.212  0.246 0.526 0.716 0.564 0.439\n 6    35 1.90  0.955 0.396 0.922  1.50  1.15  1.14  0.920 0.423\n 7    40 1.10  0.548 0.891 1.01   0.438 0.809 0.861 0.501 1.02 \n 8    45 1.53  2.07  1.07  1.29   1.56  1.79  0.984 1.39  1.10 \n 9    50 1.30  1.09  0.913 0.958  0.983 1.18  0.967 1.01  0.926\n10    60 0.906 1.15  1.16  1.21  NA     1.12  0.948 0.872 1.15 \n\n# use select()\nselect(data1, 1:10)\n\n# A tibble: 10 × 10\n    ...1 `1MA` `1MB` `1MC` `1MD`  `1ME` `1MF` `2MA` `2MB` `2MC`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1    10 1.93  0.413 1.21  1.40   1.02  0.795 1.51  0.476 1.32 \n 2    15 1.39  1.79  1.31  1.80   1.37  1.58  1.03  1.28  1.14 \n 3    20 2.12  2.07  0.690 0.406  0.809 1.73  1.59  1.67  0.608\n 4    25 1.71  0.544 0.862 0.444  1.01  1.32  1.17  0.508 0.882\n 5    30 0.974 0.695 0.436 0.212  0.246 0.526 0.716 0.564 0.439\n 6    35 1.90  0.955 0.396 0.922  1.50  1.15  1.14  0.920 0.423\n 7    40 1.10  0.548 0.891 1.01   0.438 0.809 0.861 0.501 1.02 \n 8    45 1.53  2.07  1.07  1.29   1.56  1.79  0.984 1.39  1.10 \n 9    50 1.30  1.09  0.913 0.958  0.983 1.18  0.967 1.01  0.926\n10    60 0.906 1.15  1.16  1.21  NA     1.12  0.948 0.872 1.15 \n\n\n\nRename the first column as age.\n\n\ndata1 &lt;- data1 |&gt;\n  rename(age = ...1)\n\n\n\nReshape the Data\nHow should the data be organized?\n\nReshape the dataset to a longer format using pivot_longer(), so that for each mouse:\n\n\nThe first column shows the age\nThe second column shows the sample ID (e.g., 1MA, 1MB, …)\nThe third column shows the gene expression value\n\nWhat are the columns to be included to pivot into longer format?\n\n# use column index\ndata1_long &lt;- data1 |&gt;\n  pivot_longer(cols = -1, names_to = \"id\", values_to = \"value\")\n\n# use column name\n# data1_long &lt;- data1 |&gt;\n#   pivot_longer(cols = -age, names_to = \"id\", values_to = \"value\")\n\ndata1_long \n\n# A tibble: 2,400 × 3\n     age id    value\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n 1    10 1MA   1.93 \n 2    10 1MB   0.413\n 3    10 1MC   1.21 \n 4    10 1MD   1.40 \n 5    10 1ME   1.02 \n 6    10 1MF   0.795\n 7    10 2MA   1.51 \n 8    10 2MB   0.476\n 9    10 2MC   1.32 \n10    10 2MD   1.57 \n# ℹ 2,390 more rows\n\n\n\nAdd a column struc which contains the name of the measured structure s1.\n\n\ndata1_long &lt;- data1_long |&gt;\n  mutate(struc = \"s1\")\ndata1_long\n\n# A tibble: 2,400 × 4\n     age id    value struc\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;\n 1    10 1MA   1.93  s1   \n 2    10 1MB   0.413 s1   \n 3    10 1MC   1.21  s1   \n 4    10 1MD   1.40  s1   \n 5    10 1ME   1.02  s1   \n 6    10 1MF   0.795 s1   \n 7    10 2MA   1.51  s1   \n 8    10 2MB   0.476 s1   \n 9    10 2MC   1.32  s1   \n10    10 2MD   1.57  s1   \n# ℹ 2,390 more rows\n\n\n\nExtract information about gene, sex and animal from the column id using the extract() function. Name the new columns as “gene_id”, “sex” and “animal”.\n\nHint: Find the patterns for the extraction. You can use AI to help you to write the regular expression.\n\n# check how id (the colnames before reshape) was constructed.\nhead(data1_long$id)\n\n[1] \"1MA\" \"1MB\" \"1MC\" \"1MD\" \"1ME\" \"1MF\"\n\ntail(data1_long$id)\n\n[1] \"20FA\" \"20FB\" \"20FC\" \"20FD\" \"20FE\" \"20FF\"\n\ndata1_long &lt;- data1_long |&gt;\n  extract(\n    col = id,\n    into = c(\"gene_id\", \"sex\", \"animal\"),\n    regex = \"([0-9]+)([MF])([A-F])\"\n  )\n\nIf you want to write all previous codes together:\n\ndata1_long &lt;- readr::read_csv2(\n    file = \"../exos_data/data_anonym_struc1_noise.csv\",\n    locale = locale(decimal_mark = \",\")\n  ) |&gt;\n  rename(age = ...1) |&gt; # not necessary if the next line \"cols\" based on index\n  pivot_longer(cols = -1, names_to = \"id\", values_to = \"value\") |&gt;\n  mutate(struc = \"s1\") |&gt;\n  extract(\n    col = id,\n    into = c(\"gene_id\", \"sex\", \"animal\"),\n    regex = \"([0-9]+)([MF])([A-F])\"\n  )\n\nNow, the data is ready for downstream analysis.\n\n\nManipulate the Data\nFor question 8 to 11, let’s focus on gene 1 from the data.\n\nAt age of 10 days, which animal has the highest expression value for gene 1 overall?\n\n\n# overall\ndata1_long |&gt;\n  filter(gene_id == \"1\" & age == 10) |&gt;\n  arrange(desc(value)) |&gt;\n  head(1)\n\n# A tibble: 1 × 6\n    age gene_id sex   animal value struc\n  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;\n1    10 1       F     A       2.93 s1   \n\n\n\nIs there any missing value for gene 1? If yes, how to remove lines with NA?\n\n\ntable(is.na(data1_long$value[data1_long$gene_id == \"1\"]))\n\n\nFALSE  TRUE \n  106    14 \n\ndata1_long |&gt;\n  filter(gene_id == \"1\") |&gt;\n  drop_na(value)\n\n# A tibble: 106 × 6\n     age gene_id sex   animal value struc\n   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;\n 1    10 1       M     A      1.93  s1   \n 2    10 1       M     B      0.413 s1   \n 3    10 1       M     C      1.21  s1   \n 4    10 1       M     D      1.40  s1   \n 5    10 1       M     E      1.02  s1   \n 6    10 1       M     F      0.795 s1   \n 7    10 1       F     A      2.93  s1   \n 8    10 1       F     B      1.47  s1   \n 9    10 1       F     C      2.44  s1   \n10    10 1       F     D      2.71  s1   \n# ℹ 96 more rows\n\n\n\nAfter removing NAs, how many animals are there for each sex in gene 1?\n\n\ndata1_long |&gt;\n  filter(gene_id == \"1\") |&gt;\n  drop_na(value) |&gt;\n  group_by(sex) |&gt;\n  count()\n\n# A tibble: 2 × 2\n# Groups:   sex [2]\n  sex       n\n  &lt;chr&gt; &lt;int&gt;\n1 F        47\n2 M        59\n\n\n\nSummarize the median, mean, and standard deviation of gene 1 expression for both sexes.\n\n\ndata1_long |&gt;\n  filter(gene_id == \"1\") |&gt;\n  drop_na(value) |&gt;\n  group_by(sex) |&gt;\n  summarise(\n    median_gene1 = median(value),\n    mean_gene1 = mean(value),\n    sd_gene1 = sd(value)\n  )\n\n# A tibble: 2 × 4\n  sex   median_gene1 mean_gene1 sd_gene1\n  &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 F             1.21       1.37    0.639\n2 M             1.09       1.11    0.488\n\n\n\n\nExplore the Data\nWhat kind of analysis would you like to perform with this data?\nIn statistics, it’s common to begin by exploring the dataset as a whole and visualizing the relationships between different variables. The basic R function pairs() (?pairs) is useful for creating a matrix of scatter plots to examine the relationships between each pair of continuous variables.\nFor instance, we can explore the relationships between continuous variables such as age and the expression levels of genes 1, 2, 3, etc.\n\nHow will you reshape the data1_long to provide the necessary data for the pairs() function?\n\n\ndata1_wider &lt;- data1_long |&gt;\n  pivot_wider(\n    names_from = \"gene_id\",\n    values_from = \"value\",\n    names_prefix = \"gene\" # to avoid name starts with number\n  )\n\ndata1_wider\n\n# A tibble: 120 × 24\n     age sex   animal struc gene1 gene2 gene3 gene4  gene5  gene6  gene7  gene8\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1    10 M     A      s1    1.93  1.51  1.18  1.32   1.22   0.916  1.11   1.12 \n 2    10 M     B      s1    0.413 0.476 0.539 0.624  0.418  0.426  0.718  0.806\n 3    10 M     C      s1    1.21  1.32  1.22  1.07   1.38   1.28   0.829  1.10 \n 4    10 M     D      s1    1.40  1.57  1.44  1.33   1.33   1.65   1.33   1.15 \n 5    10 M     E      s1    1.02  0.918 1.06  0.816  0.848  1.47   1.13   0.941\n 6    10 M     F      s1    0.795 0.775 0.788 1.04   1.15   0.945  1.03   0.906\n 7    10 F     A      s1    2.93  2.36  2.13  1.92   0.846  1.93   1.38   0.532\n 8    10 F     B      s1    1.47  1.05  0.788 0.623  0.803  0.921  1.45   0.693\n 9    10 F     C      s1    2.44  1.73  1.44  1.33   0.892  2.87   1.88   0.646\n10    10 F     D      s1    2.71  1.90  2.28  1.79  NA     NA     NA     NA    \n# ℹ 110 more rows\n# ℹ 12 more variables: gene9 &lt;dbl&gt;, gene10 &lt;dbl&gt;, gene11 &lt;dbl&gt;, gene12 &lt;dbl&gt;,\n#   gene13 &lt;dbl&gt;, gene14 &lt;dbl&gt;, gene15 &lt;dbl&gt;, gene16 &lt;dbl&gt;, gene17 &lt;dbl&gt;,\n#   gene18 &lt;dbl&gt;, gene19 &lt;dbl&gt;, gene20 &lt;dbl&gt;\n\n\nTo save space, we will focus on examining the relationship between age and the first 5 genes.\n\nWhat did you observe from these scatter plots?\n\n\n## put histograms on the diagonal\npanel.hist &lt;- function(x, ...) {\n  usr &lt;- par(\"usr\")\n  par(usr = c(usr[1:2], 0, 1.5) )\n  h &lt;- hist(x, plot = FALSE)\n  breaks &lt;- h$breaks; nB &lt;- length(breaks)\n  y &lt;- h$counts; y &lt;- y/max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col = \"cyan\", ...)\n}\n## put (absolute) correlations on the upper panels,\n## with size proportional to the correlations.\npanel.cor &lt;- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  par(usr = c(0, 1, 0, 1))\n  r &lt;- abs(cor(x, y, use = \"na.or.complete\")) # modified to allow NA\n  txt &lt;- format(c(r, 0.123456789), digits = digits)[1]\n  txt &lt;- paste0(prefix, txt)\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * r)\n}\n\npairs(\n  x = select(data1_wider, age, gene1:gene5),\n  diag.panel = panel.hist,\n  lower.panel = panel.smooth,\n  upper.panel = panel.cor\n)\n\n\n\n\n\n\n\n\n\nCalculate the correlation between gene 1 and 2. (?cor)\n\n\ncor(\n  x = data1_wider$gene1,\n  y = data1_wider$gene2,\n  use = \"na.or.complet\"\n) # by default use the pearson's method\n\n[1] 0.8935659\n\n\nIt seems that there are two groups of mice that express genes 4 and 5 in a similar way.\n\nDraw a scatter plot using {ggplot2} to show the expression levels of genes 4 and 5. Color the points by different categorical variables that we have, i.e., age, sex, and animal.\n\nIs there any categorical variable that can explain the groups we observed in the figure?\n\np_age &lt;- ggplot(data = data1_wider, aes(x = gene4, y = gene5)) +\n  geom_point(aes(color = age)) +\n  labs(title = \"Expression Level of Genes 4 and 5\") +\n  theme_light()\np_age\n\nWarning: Removed 16 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\np_sex &lt;- ggplot(data = data1_wider, aes(x = gene4, y = gene5)) +\n  geom_point(aes(color = sex)) +\n  labs(title = \"Expression Level of Genes 4 and 5\") +\n  theme_light()\np_sex\n\nWarning: Removed 16 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\np_animal &lt;- ggplot(data = data1_wider, aes(x = gene4, y = gene5)) +\n  geom_point(aes(color = animal)) +\n  labs(title = \"Expression Level of Genes 4 and 5\") +\n  theme_light()\np_animal\n\nWarning: Removed 16 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nGood job! 👏👏 You’ve made great progress in mastering data manipulation techniques."
  },
  {
    "objectID": "ioc_r/week01/r_w01_work.html",
    "href": "ioc_r/week01/r_w01_work.html",
    "title": "Week 1 - Homework",
    "section": "",
    "text": "Write your code in a new R script. You can use # at the beginning of a line to add a comment in your script.\n\nImport the data file “visceral_fat.csv”.\n\n\nFirst, download the visceral_fat.csv file via this link.\nThen, upload the file to a folder of your choice within your RStudio project.\nNext, import the data into RStudio and name the data frame visceral_fat.\n\nTip:\nUse the click-button method in RStudio to upload and import the file. Then, copy and paste the R commands generated into your script.\nOnce imported, you can use the visceral_fat dataset for further analysis in your report.\n\nSummarize the dataset.\n\nRun the function summary(visceral_fat) to generate a summary of the dataset. Describe what information you obtained.\n\nDraw a histogram.\n\nCreate a histogram for the diastolic blood pressure using the column visceral_fat[[\"diastolic_bp__mmhg\"]]. Describe what you observe from the plot.\n\nHandle an outlier.\n\nAfter consulting with a clinician, you discover that the 27th value of the diastolic blood pressure was incorrectly recorded.\n\nIgnore this value using visceral_fat[[\"diastolic_bp__mmhg\"]][-27]\nRedraw the histogram after excluding the outlier and describe any changes you observe.\n\n\nCompare mean and median.\n\nCalculate the mean (mean()) and the median (median()) for the diastolic blood pressure\n\nbefore ignoring the 27th value: visceral_fat[[\"diastolic_bp__mmhg\"]]\nafter ignoring the 27th value: visceral_fat[[\"diastolic_bp__mmhg\"]][-27]\n\nDescribe how the outlier affects the mean and median.\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#welcome-to-r",
    "href": "ioc_r/week01/r_w01_slides.html#welcome-to-r",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Welcome to R!",
    "text": "Welcome to R!\nR is a programming language and software environment designed for statistical computing and data analysis.\n\n\nWhy R?\n\nBiologist friendly!\nFree and open-source\nSupported by a huge community\n\n\nWhat you can do with R?\n\nAnalyze your data\nVisualize your findings\nAutomate your workflow\nShare reproducible research\n\n\nThe official website: https://www.r-project.org"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#the-r-console",
    "href": "ioc_r/week01/r_w01_slides.html#the-r-console",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "The R Console",
    "text": "The R Console\n\n\n\n\nIn the R console:\n\n&gt; (The prompt): R is ready for your command. Type your code and press Enter to run it.\n[1] (Output): This indicates the start of an output line.\n+ (Continuation): R is waiting for you to finish your command. You can either finish the command or press Esc to cancel it.\n\n\n\nIn the R Console, the &gt; prompt lets you know that R is ready for your command. Just type your code and hit Enter. When you see the output, it will start with [1], which indicates the position of the first element. If you see a + at the beginning of a new line, it means R is waiting for you to finish your command, this often happens if you forget a parenthesis or a comma. You can either finish it by typing the rest of the code or press the Esc key to cancel the input completely and get a fresh &gt; prompt."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#rstudio-login",
    "href": "ioc_r/week01/r_w01_slides.html#rstudio-login",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Rstudio Login",
    "text": "Rstudio Login\nIf you use the RStudio Server, you need to connect to your account first."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#rstudio-ide",
    "href": "ioc_r/week01/r_w01_slides.html#rstudio-ide",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Rstudio IDE",
    "text": "Rstudio IDE\nIntegrated Development Environment (IDE)\n\n\n\n\n\nConsole: enter and execute R commands interactively.\nEnvironment/History: tracks your variables and past commands.\nFiles/Plots/Packages: managing your files, viewing graphs, or installing tools.\n\n\n\n\n\n\n\nRstudio cheat sheet (and French version)\n\n\n\n\n\nEverything you need in one organized window. Save your work as a script, RStudio includes many useful features which let us code easily. notebook, show results"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#getting-started",
    "href": "ioc_r/week01/r_w01_slides.html#getting-started",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Getting Started",
    "text": "Getting Started\n\n\n\nOpen your RStudio.\nCreate an R script: File -&gt; New File -&gt; R Script or click . (Will appeared at 4)\nWrite your codes in the script.\nSave script: Cmd/Ctrl + S, name your script.\nExecute code: Click  or press Cmd/Ctrl + Enter"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#getting-started-1",
    "href": "ioc_r/week01/r_w01_slides.html#getting-started-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Getting Started",
    "text": "Getting Started\nCopy paste following codes into your script and save the script as test.R.\n\nBasic codes (commands):\n\n# Use `#` to write a comment (line) in your script\n# Math with R:\n2 + 2    # Yes, R can do math!\nsqrt(16) # Square root.\n\n# Create a variable:\nx &lt;- 5 # Now x is 5. You can reuse it!\nx + 1\n\n# Inspect your environment:\n## Look at the \"Environment\" pane, do you see your x?\nls()\n\n# Load a package:\nlibrary(stats)\n\n# Get help of a function (documentation):\n?mean\n\n# Quit RStudio properly\nq()"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\n\nUnder the General tab:\n\nUncheck the box “Restore .RData…”\nSet “Save workspace to .RData on exit” to Never.\n\n\nThen click “Apply”."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration-1",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\n\nUnder the Code tab:\n\nIn the Display panel, check the box “Use rainbow parentheses”\nThen click “Apply”."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration-2",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration-2",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\n\nUnder the Appearance tab:\n\nYou can select a theme for you RStudio, e.g., the “Cobalt” for a dark theme.\n\nUnder the Pane Layout tab:\n\nYou can arrange the four panels as you prefer.\nIn addition, click “Add Column” lets you open an extra “Source” code column, allowing you to view your scripts side by side!\nThen click “Apply”."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#create-an-r-project",
    "href": "ioc_r/week01/r_w01_slides.html#create-an-r-project",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Create an R Project",
    "text": "Create an R Project\nAn R project keeps everything for your project in one working directory and helps R to know where to look for your files.\n\n\nIn RStudio, go to File -&gt; New Project\nChoose New Directory and click New Project\nSet a folder name (e.g., r_week1) and select where to save it.\nClick Create Project\n\n\n\nYou’ll notice RStudio restarts, and now your project is set up!\n\n\nAn R Project is a way to keep everything for your work (scripts, data, outputs) in one place. Think of it like a special folder where RStudio automatically knows where to look for your files. It helps avoid problems with messy file paths."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#create-an-r-project-1",
    "href": "ioc_r/week01/r_w01_slides.html#create-an-r-project-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Create an R Project",
    "text": "Create an R Project"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#a-well-organized-project-folder",
    "href": "ioc_r/week01/r_w01_slides.html#a-well-organized-project-folder",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "A Well Organized Project Folder",
    "text": "A Well Organized Project Folder\n\nTree structure:\n\nr_week1              # Your working directory    \n├── r_week1.Rproj    # The R project configuration file\n├── README.md           # A short introduction of the project\n├── data                # Raw data files\n│   └── raw_count.tsv\n├── scripts             # Your R code files\n│   └── 01-analysis.R\n│   └── 02-figures.R\n└── outputs             # Results, e.g., graphs, reports\n\n\nManaging Files (via the File pane):\n\nTo create a new folder: click . The folder will be created in the current directory.\nTo move a file or folder: check the box next to its name, click  and then select Move… to choose a new destination.\n\n\n\n\n\n\n\n\n\n\n\nCreate data and scripts folders inside your working directory.\nMove the test.R into the scripts folder of your working directory.\n\n\n\n\n\n\nexample of bad home organisation: pillow in kitchen and microoven in the bathroom The trunk is the main folder (your R Project). Branches are subfolders for scripts, data, and output, ect. By building a clear structure, you’ll: Always know where to find things. Save time when coding in R or sharing your project with others. Avoid messy files scattered everywhere."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#understanding-file-paths",
    "href": "ioc_r/week01/r_w01_slides.html#understanding-file-paths",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Understanding File Paths",
    "text": "Understanding File Paths\nHow to tell your computer where to find the test.R?\n\n\n\nAbsolute path, starts from the very top of your computer’s folder. E.g.:\n\nLinux/Mac: /Users/lijiao/Documents/r_week1/scripts/test.R\nWindows: C:\\Users\\lijiao\\Documents\\r_week1\\scripts\\test.R"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#understanding-file-paths-1",
    "href": "ioc_r/week01/r_w01_slides.html#understanding-file-paths-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Understanding File Paths",
    "text": "Understanding File Paths\nA path tells your computer where to find files/folders.\n\nRelative path, starts from your working directory (folder). E.g.:\n\nLinux/Mac: scripts/test.R\nWindows: scripts\\test.R"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#where-are-you",
    "href": "ioc_r/week01/r_w01_slides.html#where-are-you",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Where Are You?",
    "text": "Where Are You?\nr_week1              # Your working directory\n├── r_week1.Rproj    # The R project configuration file\n├── data             # Raw data files\n└── scripts          # Your R code files\n    └── test.R\n\n&gt; getwd() # Get working directory\n[1] \"/Users/lijiao/Documents/r_week1\"\n\n\n\n\n\n\n\nWhat are the absolute and relative paths of the folder “data”?\n\n\n\n\n\nabsolute path: /Users/lijiao/Documents/r_week1/data\nrelative path: data\n\n\n&gt; file.exists(\"/Users/lijiao/Documents/r_week1/data\")\n[1] TRUE\n&gt; file.exists(\"data\")\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#import-data",
    "href": "ioc_r/week01/r_w01_slides.html#import-data",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Import Data",
    "text": "Import Data\n\n\n\nSupported formats:\n\ntext files (.txt, .csv, etc.)\nExcel files\ndata from other softwares (e.g.: SAS)\n\nClick-button methods:\n\nFrom menu bar: File -&gt; Import Dataset -&gt; Select the format -&gt; Choose your file\nFrom the “Environment” pane: click Import Dataset -&gt; Select the format -&gt; Choose your file\nFrom the “Files” pane: Navigate to your file location -&gt; Click the file and select Import Dataset (need the {readr} package)\n\n\n\n\n\n\nPop-up window using the {readr} import wizard."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#import-data-1",
    "href": "ioc_r/week01/r_w01_slides.html#import-data-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Import Data",
    "text": "Import Data\nImporting your first file: shiny_sample_data.csv\n\nRight click the link and select “Download Linked File As…” (or the equivalent on your system).\nSave the file into the data folder of the R project r_week1\nImport the data with one of the three click-button ways.\n\n\nWhen you select the file, a preview window will pop up. RStudio tries to guess the data’s properties, but you should always confirm them.\n\n\n\n\n\n\n\nThink before you import the data\n\n\n\nHow do you want to name the imported data?\nIs there a header?\nWhat is the column separator?\nWhich sign is used as the decimal?\n\n\n\n\nOnce you’ve checked these settings and the preview looks correct, click Import."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#import-data-2",
    "href": "ioc_r/week01/r_w01_slides.html#import-data-2",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Import Data",
    "text": "Import Data"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#export-data",
    "href": "ioc_r/week01/r_w01_slides.html#export-data",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Export Data",
    "text": "Export Data\nWe’ll use the built-in iris dataset and save it in the CSV format using the write_csv() function from the {readr} package.\nhead(iris) # show the first lines of the dataset\nView(iris) # preview the whole dataset\n?write_csv # get help of the function\nGoal: Save the built-in iris dataset as a CSV file named iris_export.csv inside the outputs folder of the project.\n\n\nCreate the outputs folder.\nType the following command and execute it:\n\nwrite_csv(iris, file = \"outputs/iris_export.csv\")\n\n\n\n\n\n\n\n\nGo to the Files pane, can you find the saved file?\n\n\n\n\n\n(We’ll talk about other formats in the future!)\n\nOnce you’ve cleaned, analyzed, or modified a dataset in R, you’ll want to save it. While you can save data in many formats, we’ll use the most common one, a CSV file, as our example. We’ll use the built-in iris dataset."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#different-solutions",
    "href": "ioc_r/week01/r_w01_slides.html#different-solutions",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Different Solutions",
    "text": "Different Solutions\n\nGoogle it!\nForums: Stack Overflow, Cirad(francophone), etc.\nAsk/discuss your question via Slack.\nAI tools (like ChatGPT or Gemini) can be very helpful resources😉, but be careful of false answers! (More details in session 6)\n\nKey points:\n\nBe specific.\nProvide context: code, error, etc.\nAlways verify.\nProtect sensitive data.\n\n\ngoogle/forum stack overFlow - what are you trying to do / what did you try? - the warning or error message / your code / your data structure - language name / function or package name / a specific problem - try and iterate"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#pdf-of-slides",
    "href": "ioc_r/week01/r_w01_slides.html#pdf-of-slides",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "PDF of Slides",
    "text": "PDF of Slides\nTo save the slides as a PDF:\n\nOpen the presentation in a web browser\nPress “e” to enable PDF export mode\nPress Cmd/Ctrl + P to open the in-browser print dialog.\nChange layout to “Landscape”.\nSelect “save as PDF” as the printer option and save the file.\n\nAfter saving, press “e” again to return to presentation mode."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#todays-goals",
    "href": "ioc_r/week01/r_w01_slides.html#todays-goals",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nGet familiar with the RStudio\nCreate an R project in RStudio\nImport data file into RStudio\nExport data from RStudio"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#brief-recap-week-4",
    "href": "ioc_r/week05/r_w05_slides.html#brief-recap-week-4",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Brief Recap Week 4",
    "text": "Brief Recap Week 4\n\n\n\nOperators\n\nLogical: &, |, !, return TRUE or FALSE.\nComparison: ==, !=, &lt;, &lt;=, &gt;, &gt;=.\nThe %in%: check membership\n\n\n\n\n\n\n\n\nWhat does the following code do?\n\n\n\n(2.1 &gt; 1) & (0.049 &gt; 0.05)\n(2.1 &gt; 1) | (0.049 &gt; 0.05)\n\n# df is a data frame, \n# one of the columns is called \"pvalue\"\ndf[df$pvalue &lt; 0.05, ]\n\n\"a\" %in% c(\"c\", \"ba\")\n\n\nConditions\n\nstatements: if, if…else\nifelse() function\n\n\n\n\n\n\n\n\nWhat does the following code do?\n\n\n\nif (lfc &gt; 2 & pvalue &lt; 0.05 ) {\n  print(\"gene of interest\")\n} else {\n  print(\"gene to remove\")\n}"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#what-are-packages-in-r",
    "href": "ioc_r/week05/r_w05_slides.html#what-are-packages-in-r",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "What are Packages in R?",
    "text": "What are Packages in R?\nPackages are collections of functions, data, and documentation.\n\nPre-installed packages: {base}, {utils}, {graphics}, etc.\n\ndim() # from {base}\nhead() # from {utils}\nplot() # from {graphics}\n\nTo check the list of installed packages in RStudio:\n\n\nname, description, can delete a pkg here"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#installing-packages",
    "href": "ioc_r/week05/r_w05_slides.html#installing-packages",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Installing Packages",
    "text": "Installing Packages\nBy default, R will install the lastest version of a package.\n\nClick-button way:\n\n\n\nVia command, i.e., install.packages(\"ggplot2\")\n\n\n\n\n\n\n\n\nCRAN (Comprehensive R Archive Network) is a network of servers around the world that store identical, up-to-date, versions of code and documentation for R.\nBioconductor is a specialized repository like CRAN, but focused on bioinformatics. It provides R packages for analyzing genomic and biological data.\n\n\n\n\n\nOnly need install once for the system, then load the package."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#management-of-packages",
    "href": "ioc_r/week05/r_w05_slides.html#management-of-packages",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Management of Packages",
    "text": "Management of Packages\n\n\n\nUpdate: click on the  and a popup will show you packages that can be updated.\n\n\n\n\nDelete: click on the delete buttom after the package\n\n\nOr use remove.packages(\"tibble\")."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#using-functions-of-package",
    "href": "ioc_r/week05/r_w05_slides.html#using-functions-of-package",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Using Functions of Package",
    "text": "Using Functions of Package\nTo use (call) a function from a package, we can either:\n\nload the entire package (attach it to the environment)\n\nlibrary(ggplot2) # load the package\nggplot() # call the function to iniate a ggplot\nA loaded package will be checked in the “Packages” panel.\n\n\n\n\n\n\nYou only need to load a package once per R session.\n\n\n\n\nor load one function of the package at the time with the syntax pkg_name::fct_name\n\nggplot2::ggplot()\n\n\n\n\n\n\nThis way is recommanded if you need to use only one function of a package, or if you want to make sure you use the wanted function."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#before-plotting",
    "href": "ioc_r/week05/r_w05_slides.html#before-plotting",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Before Plotting …",
    "text": "Before Plotting …\nWhat message you want to show via your figure?\n\n\n\n\n\nflowchart LR\n  A{Which variables?} --&gt; B{Data properties}\n  B --&gt; C{Figure type}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck out these websites: from Data to Viz and The R Graph Gallery (by Yan Holtz)\n\n\n\n\n\nWhat are the variables to be visualized?\nData properties: continuous, discrete, categorical?\nFigure type: dots plot, boxplot, histogram, etc."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#compositions-of-a-ggplot",
    "href": "ioc_r/week05/r_w05_slides.html#compositions-of-a-ggplot",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Compositions of a ggplot",
    "text": "Compositions of a ggplot\n\n(Figure adpated from QCBS R Workshop Series.)"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#how-to-build-a-ggplot",
    "href": "ioc_r/week05/r_w05_slides.html#how-to-build-a-ggplot",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "How to Build a ggplot",
    "text": "How to Build a ggplot\n\nAll ggplot2 plots begin with a call to ggplot(), supplying default data and aesthethic mappings, specified by aes(). You Then add layers, scales, coords and facets with +. —— ggplot2 Reference\n\n\n\nExample using the built-in dataset iris:\n\nstr(iris) # data overview\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#basic-plot",
    "href": "ioc_r/week05/r_w05_slides.html#basic-plot",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Basic Plot",
    "text": "Basic Plot\n\nlibrary(\"ggplot2\") # load package\n\n\n\nStart by calling ggplot():\n\np0 &lt;- ggplot(\n  data = iris, # a data frame\n  mapping = aes(x = Sepal.Length, y = Petal.Length)\n)\np0\n\n\n\n\n\n\n\n\nSpecify data, x and y axes.\n\n\n\n\n\n\nThe data should be a data frame containing both variables needed for the plot.\n\n\n\n\nAdd a geometric layer:\n\n# geom_point() is used for scatter plots\nbase_plot &lt;- p0 + geom_point()\n\n\nbase_plot\n\n\n\n\n\n\n\n\nUse points for visualisation.\n\n\nggplot() creates a canvas to draw on. data contains columns fro the plot aes() matches columns of data to aesthetics of the plot. geom_point() adds point geometry."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#aesthetics---color",
    "href": "ioc_r/week05/r_w05_slides.html#aesthetics---color",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Aesthetics - Color",
    "text": "Aesthetics - Color\nThe most common aesthetics: color, fill, shape, size, alpha (transparency), etc.\n\n\n\nStatic aesthetics: a fixed value and apply to the whole layer\n\n\nbase_plot_red &lt;- p0 + geom_point(color = \"red\")\nbase_plot_red\n\n\n\n\n\n\n\n\n\n\nAesthetic mappings: visual preoperties that depend on data values (to be used in aes())\n\n\nbase_plot &lt;- p0 + geom_point(aes(color = Species))\nbase_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#aesthetics---shape",
    "href": "ioc_r/week05/r_w05_slides.html#aesthetics---shape",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Aesthetics - Shape",
    "text": "Aesthetics - Shape\nThe most common aesthetics: color, fill, shape, size, alpha (transparency), etc.\n\n\n\nStatic aesthetics: a fixed value and apply to the whole layer\n\n\np0 + geom_point(shape = 3)\n\n\n\n\n\n\n\n\n\n\nAesthetic mappings: visual preoperties that depend on data values (to be used in aes())\n\n\np0 + geom_point(aes(shape = Species))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#aesthetics---size",
    "href": "ioc_r/week05/r_w05_slides.html#aesthetics---size",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Aesthetics - Size",
    "text": "Aesthetics - Size\nThe most common aesthetics: color, fill, shape, size, alpha (transparency), etc.\n\n\n\nStatic aesthetics: a fixed value and apply to the whole layer\n\n\np0 + geom_point(size = 3)\n\n\n\n\n\n\n\n\n\n\nAesthetic mappings: visual preoperties that depend on data values (to be used in aes())\n\n\np0 + geom_point(aes(size = Petal.Length))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#aesthetics---alpha",
    "href": "ioc_r/week05/r_w05_slides.html#aesthetics---alpha",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Aesthetics - Alpha",
    "text": "Aesthetics - Alpha\nThe most common aesthetics: color, fill, shape, size, alpha (transparency), etc.\n\n\nWith no transparency:\n\np0 + geom_point(size = 3)\n\n\n\n\n\n\n\n\n\nUse the alpha (between 0 and 1) parameter:\n\np0 + geom_point(size = 3, alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference: https://ggplot2.tidyverse.org/articles/ggplot2-specs.html"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#labels-axes---titles---legend",
    "href": "ioc_r/week05/r_w05_slides.html#labels-axes---titles---legend",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Labels (Axes - Titles - Legend)",
    "text": "Labels (Axes - Titles - Legend)\n\n\n\nbase_plot\n\n\n\n\n\n\n\n\nUse labs() to modify labels of plot, axes, legend.\n\n\np_labs &lt;- base_plot + labs(\n  x = \"Sepal Length (cm)\",\n  y = \"Petal Length (cm)\",\n  title = \"Scatter plot with customized labels.\",\n  color = NULL # remove legend title\n)\np_labs"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#add-other-layers",
    "href": "ioc_r/week05/r_w05_slides.html#add-other-layers",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Add Other Layers",
    "text": "Add Other Layers\n\n\n\n# the scatter plot with modified lables\np_labs\n\n\n\n\n\n\n\n\n\nAdd a linear regression line using geom_smooth():\n\np_regline &lt;- p_labs + geom_smooth(method = \"lm\", se = FALSE)\np_regline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach geom_*() function adds a new layer to the plot, just like stacking transparent sheets on top of each other to build the final image."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#aesthetic-mappings",
    "href": "ioc_r/week05/r_w05_slides.html#aesthetic-mappings",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Aesthetic Mappings",
    "text": "Aesthetic Mappings\n\n\n\nggplot(\n  data = iris,\n  mapping = aes(\n    x = Sepal.Length,\n    y = Petal.Length\n  )\n) +\n  geom_point(aes(color = Species)) +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare the following code with the code on the left. What is different between the codes? What is different about the resulting graphs?\n\n\n\n\nggplot(\n  data = iris,\n  mapping = aes(\n    x = Sepal.Length,\n    y = Petal.Length,\n    color = Species\n  )\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\n\n\naes() in ggplot() or in geom_*(), if multiple layers"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#common-used-geometries-1",
    "href": "ioc_r/week05/r_w05_slides.html#common-used-geometries-1",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Common Used Geometries (1)",
    "text": "Common Used Geometries (1)\n\n\n\nBoxplot:\n\n\nggplot(iris, aes(x = Species, y = Sepal.Length)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nViolin plot:\n\n\nggplot(iris, aes(x = Species, y = Sepal.Length)) +\n  geom_violin()"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#common-used-geometries-2",
    "href": "ioc_r/week05/r_w05_slides.html#common-used-geometries-2",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Common Used Geometries (2)",
    "text": "Common Used Geometries (2)\n\n\n\nHistogram:\n\n\nggplot(iris, aes(x = Sepal.Length)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\nBar plot:\n\n\nggplot(iris, aes(x = Species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram() and geom_bar() only require one variable for the x-axis. The y-axis is automatically calculated."
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#themes",
    "href": "ioc_r/week05/r_w05_slides.html#themes",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Themes",
    "text": "Themes\n\n\n\nBuilt-in themes (theme_*()): theme_grey() (default),theme_bw(), theme_light(), theme_classic(), etc.\n\n\np_labs + theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\nUse theme() function to tweak elements, e.g.:\n\n\np_labs + theme(\n  legend.position = \"none\", # hide legend\n  plot.title = element_text(\n    hjust = 0.5, # center plot title\n    size = 5, # plot title size\n  ), \n  axis.text.x = element_text(angle = 90) # rotate axis' text\n)"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#saving-your-graphs",
    "href": "ioc_r/week05/r_w05_slides.html#saving-your-graphs",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Saving Your Graphs",
    "text": "Saving Your Graphs\nUse ggsave() to save plots in high resolution for publications.\nggsave(\n  filename = \"path/to/figure.png\", # figure file name\n  plot = last_plot(), \n  # save by default the last figure,\n  # you can provide the figure name to specify the plot to be saved.\n  device = \"png\",\n  # can be one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\",\n  # \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\"\n  width = 6.3,\n  height = 4.7,\n  units = \"in\", # can be one of \"in\", \"cm\", \"mm\" or \"px\"\n  dpi = 300 # plot resolution\n)\n\n\n\n\n\n\n\nSave the basic plot to the outputs folder in your project. Check the saved figure via the Files panel in RStudio.\n\n\n\n\n\n\nggsave(\n  filename = \"../outputs/basic_scatter_plot.png\",\n  plot = base_plot,\n  width = 5, height = 5, units = \"cm\", dpi = 150\n)"
  },
  {
    "objectID": "ioc_r/week05/r_w05_slides.html#todays-goals",
    "href": "ioc_r/week05/r_w05_slides.html#todays-goals",
    "title": "Graphing with {ggplot2} (Part 1)",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nInstall new R packages\nCreate basic plots with ggplot2"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html",
    "href": "ioc_r/week02/r_w02_exos.html",
    "title": "Week 2 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#goals",
    "href": "ioc_r/week02/r_w02_exos.html#goals",
    "title": "Week 2 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nGet familiar with variables and data types\nGet familiar with vectors and matrices manipulations\nSimulate your own biological data and test the normality using the Shapiro-Wilk test"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#variables-in-r",
    "href": "ioc_r/week02/r_w02_exos.html#variables-in-r",
    "title": "Week 2 - Hands-On Examples",
    "section": "Variables in R",
    "text": "Variables in R\n\nA variable in R is like a labeled container where you can store data (a single value, multiple values, or more complex structures like data frames).\nUse &lt;- for assignment."
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#data-types-in-r",
    "href": "ioc_r/week02/r_w02_exos.html#data-types-in-r",
    "title": "Week 2 - Hands-On Examples",
    "section": "Data Types in R",
    "text": "Data Types in R\nCreate variables to store the following types of biological data and check their class in R:\n\nThe name of a gene (e.g., BRCA1).\nThe number of samples in an experiment (e.g., 50).\nWhether a sample is treated or not (select between TRUE/FALSE).\nThe four bases in DNA sequence: “A”, “T”, “G”, “C”.\n\n\ngene_name &lt;- \"BRCA1\" \nis.character(gene_name)\n\n[1] TRUE\n\nnum_samples &lt;- 50    \nis.numeric(num_samples)\n\n[1] TRUE\n\nis_treated &lt;- TRUE  \nis.logical(is_treated)\n\n[1] TRUE\n\ndna_bases &lt;- c(\"A\", \"T\", \"G\", \"C\") \nis.character(dna_bases)\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#vectors",
    "href": "ioc_r/week02/r_w02_exos.html#vectors",
    "title": "Week 2 - Hands-On Examples",
    "section": "Vectors",
    "text": "Vectors\nYou have the following concentrations of a drug measured in five samples (in µM): 2.3, 5.1, 3.8, 6.4, 4.9. Perform the following tasks:\n\nCreate a numeric vector to store the concentrations.\n\n\ndrug_concentration &lt;- c(2.3, 5.1, 3.8, 6.4, 4.9)\n\n\nCalculate the mean and standard deviation of the concentrations.\n\n\nmean_concentration &lt;- mean(drug_concentration)\nmean_concentration\n\n[1] 4.5\n\nsd_concentration &lt;- sd(drug_concentration)\nsd_concentration\n\n[1] 1.537856\n\n\n\nSubset the concentrations greater than 4 µM\n\n\nhigh_concentration &lt;- drug_concentration[drug_concentration &gt; 4]\nhigh_concentration\n\n[1] 5.1 6.4 4.9"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#matrices",
    "href": "ioc_r/week02/r_w02_exos.html#matrices",
    "title": "Week 2 - Hands-On Examples",
    "section": "Matrices",
    "text": "Matrices\nYou’re working with expression levels of three genes (geneA, geneB, geneC) across five samples. The expression levels are as follows:\nsample1: 10, 12, 15  \nsample2: 20, 18, 22  \nsample3: 14, 16, 19  \nsample4: 8, 9, 7  \nsample5: 25, 30, 28  \n\nCreate a matrix to represent this data, with genes in rows and samples in columns.\n\n\n# Create the matrix\nexpression_levels &lt;- matrix(\n  c(10, 12, 15,\n    20, 18, 22,\n    14, 16, 19,\n    8, 9, 7,\n    25, 30, 28), \n  nrow = 3\n)\nexpression_levels\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   20   14    8   25\n[2,]   12   18   16    9   30\n[3,]   15   22   19    7   28\n\n## or create first samples' vector then combine them\nsample1 &lt;- c(10, 12, 15)\nsample2 &lt;- c(20, 18, 22)\nsample3 &lt;- c(14, 16, 19)\nsample4 &lt;- c(8, 9, 7)\nsample5 &lt;- c(25, 30, 28)\nexpression_levels2 &lt;- cbind(sample1, sample2, sample3, sample4, sample5)\nexpression_levels2\n\n     sample1 sample2 sample3 sample4 sample5\n[1,]      10      20      14       8      25\n[2,]      12      18      16       9      30\n[3,]      15      22      19       7      28\n\n\n\nAdd row and column names to the matrix.\n\n\n# Add row and column names\nrownames(expression_levels) &lt;- c(\"geneA\", \"geneB\", \"geneC\")\ncolnames(expression_levels) &lt;- c(\"sample1\", \"sample2\", \"sample3\", \"sample4\", \"sample5\")\n\n## or\nrownames(expression_levels) &lt;- paste0(\"gene\", LETTERS[1:3])\ncolnames(expression_levels) &lt;- paste0(\"sample\", 1:5)\n\nexpression_levels\n\n      sample1 sample2 sample3 sample4 sample5\ngeneA      10      20      14       8      25\ngeneB      12      18      16       9      30\ngeneC      15      22      19       7      28\n\n\n\nCalculate the mean expression for each gene (row-wise).\n\n\ngene_means &lt;- rowMeans(expression_levels)\ngene_means\n\ngeneA geneB geneC \n 15.4  17.0  18.2 \n\n\n\nSubset the data to show only samples where geneC expression is greater than 20.\n\n\n# Extract geneC\ngeneC_expression &lt;- expression_levels[\"geneC\", ]\n\n# Subset samples with geneC &gt; 20\nhigh_geneC_samples &lt;- geneC_expression[geneC_expression &gt; 20]\nhigh_geneC_samples\n\nsample2 sample5 \n     22      28"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#test-the-normality-on-simulated-data",
    "href": "ioc_r/week02/r_w02_exos.html#test-the-normality-on-simulated-data",
    "title": "Week 2 - Hands-On Examples",
    "section": "Test the Normality on Simulated Data",
    "text": "Test the Normality on Simulated Data\n\nHeight\nUse following code to generate the height (in cm) of 100 students:\n\n# simulate data following a normal distribution\nset.seed(1)\nheights &lt;- round(rnorm(n = 100, mean = 170, sd = 10), 1)\nheights\n\n  [1] 163.7 171.8 161.6 186.0 173.3 161.8 174.9 177.4 175.8 166.9 185.1 173.9\n [13] 163.8 147.9 181.2 169.6 169.8 179.4 178.2 175.9 179.2 177.8 170.7 150.1\n [25] 176.2 169.4 168.4 155.3 165.2 174.2 183.6 169.0 173.9 169.5 156.2 165.9\n [37] 166.1 169.4 181.0 177.6 168.4 167.5 177.0 175.6 163.1 162.9 173.6 177.7\n [49] 168.9 178.8 174.0 163.9 173.4 158.7 184.3 189.8 166.3 159.6 175.7 168.6\n [61] 194.0 169.6 176.9 170.3 162.6 171.9 152.0 184.7 171.5 191.7 174.8 162.9\n [73] 176.1 160.7 157.5 172.9 165.6 170.0 170.7 164.1 164.3 168.6 181.8 154.8\n [85] 175.9 173.3 180.6 167.0 173.7 172.7 164.6 182.1 181.6 177.0 185.9 175.6\n [97] 157.2 164.3 157.8 165.3\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nNormal Distribution\nA normal distribution (also known as Gaussian distribution or “bell curve”), is a common way in which data tends to organize itself naturally when measured repeatedly in a population.\n  (figure obtained from this source)\nIt’s symmetric around the average (mean, \\(\\mu\\)), and the spread of values depends on the standard deviation (\\(\\sigma\\)). A a smaller \\(\\sigma\\) results in values being tightly concentrated near the mean, while a larger \\(\\sigma\\) results in values being more spread out across the range.\nMany statistical tests, such as t-tests or ANOVAs, assume that the data follows a normal distribution. This assumption is important because it enables the calculation of probabilities and supports making reliable inferences. If the data does not follow a normal distribution, these tests may produce misleading results.\nShapiro-Wilk Test\nThe Shapiro-Wilk test is designed to check for deviations from normality, i.e., to check whether your data follows a normal distribution.\nTest Hypotheses: H0, H1\nWhen performing a statistical test, you start with two opposing ideas, called hypotheses, that you want to evaluate:\n\nNull Hypothesis (H0): This is the default assumption, often stating that there is no effect, no difference, or no relationship in your data.\nAlternative Hypothesis (H1): This is the claim you are testing for something different from the null hypothesis.\n\nWhen you perform a statistical test, the goal is to decide whether you have enough evidence to reject the null hypothesis (H0) in favor of the alternative hypothesis (H1).\n\n\nThe function shapiro.test() in R allows to perform the test of normality.\nHere, the null hypothesis (H0) is the heights are normally distributed, and the alternative hypothesis (H1) is the heights are not normally distributed.\n\nshapiro.test(heights) \n\n\n    Shapiro-Wilk normality test\n\ndata:  heights\nW = 0.99564, p-value = 0.9883\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nType I error (\\(\\alpha\\))\nA type I error occurs when we reject the null hypothesis whereas it is actually true (false positive).\nThe probability (risk) of making a type I error is denoted as \\(\\alpha\\), which also called the significance level. By choosing \\(\\alpha = 0.05\\), you’re saying: “I’m willing to accept a 5% chance of incorrectly rejecting H0.”\nP-value\nThe p-value is the probability of observing your data (or something more extreme) if the null hypothesis (H0) is true.\n\nIf the p-value is small (e.g., ≤ 0.05):\n\nThere’s strong evidence against H0, so you reject it.\nThis suggests that the alternative hypothesis (H1) might be true.\n\nIf the p-value is large (e.g., &gt; 0.05):\n\nThere’s not enough evidence to reject H0.\nThis doesn’t mean H0 is true, it just means the data doesn’t strongly contradict it.\n\n\n\n\nIf we take \\(\\alpha=0.05\\): since the p-value (0.9876) is greater than 0.05, we fail to reject H0. This means there’s no strong evidence to suggest the heights are not normally distributed.\nLet’s check the heights’ distribution with a histgram!\n\n# Histogram\nhist(\n  heights, probability = TRUE, col = \"lightblue\",\n  main = \"Histogram with Bell Curve\", xlab = \"Heights (cm)\", ylab = \"Density\"\n)\n# Add bell curve\ncurve(dnorm(x, mean = mean(heights), sd = sd(heights)), col = \"red\", lwd = 2, add = TRUE)\n\n\n\n\n\n\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week02/r_w02_work.html",
    "href": "ioc_r/week02/r_w02_work.html",
    "title": "Week 2 - Homework",
    "section": "",
    "text": "Use the following code to import the file “read-counts.csv” (you have already downloaded it for the hand-on examples of week01). Name the imported data expr_data.\n\nexpr_data &lt;- read.table(\n  file = \"../exos_data/read-counts.csv\",  # replace the path with your own\n  header = TRUE, sep = \",\", row.names = 1\n)\n\n\nIs the imported data a matrix?\n\n\nTransform it to a matrix using as.matrix().\n\n\nWhat are the dimensions of the matrix?\n\n\nWhat are the column names and row names?\n\n\nExtract all genes’ expression for the 10 WT samples (WT.1, WT.2, …, WT.10), and store it in a variable called expr_wt. Show the first few rows using head() function.\n\n\nWhat is the average expression level across all WT samples for each gene? Store the results in a variable called avg_wt.\n\n\nDraw a histogram to check the distribution of the average gene expression level for WT samples.\n\n\nRepeat questions 5 to 7 for the SET1 samples (SET1.1, SET1.2, …, SET1.10).\n\n\nWhat is the absolute difference between the average expression of WT and SET1 samples for each gene? Which gene shows the biggest difference?\n\nHints:\n\nUse abs() to get the absolute value. (?abs)\nThe max() function helps to find the maximum value from a vector. (?max)\nThe which.max() function helps to find the index of the maximum value from a vector. (?which.max)\n\n\nCompare the following matrix to the one we created during the course’ exercise (the matrix named expression_levels). What is the key difference in how the matrix is constructed? Provide a brief explanation.\n\n\nmatrix(\n  c(10, 12, 15, 20, 18, 22, 14, 16, 19, 8, 9, 7, 25, 30, 28),\n  ncol = 3\n)\n\n     [,1] [,2] [,3]\n[1,]   10   22    9\n[2,]   12   14    7\n[3,]   15   16   25\n[4,]   20   19   30\n[5,]   18    8   28\n\n\nThe homework correction is available here: link"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#what-weve-learned-so-far",
    "href": "ioc_r/week03/r_w03_slides.html#what-weve-learned-so-far",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "What We’ve Learned So Far",
    "text": "What We’ve Learned So Far\n\n\n\nData types\nVariable\nData structures:\n\nvector\nmatrix\n\n\n\n\n\n\n\n\n\nWhat are the outputs for following codes?\n\n\n\n\nc(1, 3, 5)[3]\n5:2\nseq(1, 2, by = 0.5)\nrep(c(1, 3), times = 2)\nrep(c(\"case\", \"control\"), each = 2)\n\n\n\n\nmat &lt;- matrix(1:6, nrow = 2)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nmat[1, ]\nmat[, 2]\nmat[2, 1]\n\n\n\n\nquestion/quiz time"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-structures",
    "href": "ioc_r/week03/r_w03_slides.html#data-structures",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Structures",
    "text": "Data Structures\nThe 4 data structures to store multiple values:\n\n\n\n\n\n1 dimension\n2 dimensions (row/column)\n\n\n\n\nSame data type\nvector\nmatrix\n\n\nDifferent data types\nlist\ndata frame"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frames-creation",
    "href": "ioc_r/week03/r_w03_slides.html#data-frames-creation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frames Creation",
    "text": "Data Frames Creation\nUse data.frame() to create a data frame, separate columns by ,.\n\n\n\nmy_df &lt;- data.frame(\n  id = 1:10,\n  gene_name = paste0(\"gene\", LETTERS[1:10]),\n  detected = \"yes\",\n  gene_expr = c(\n    12.4, 11.3, 13.5, 10.2, 11.4,\n    0.5, 1, 1.2, 1.4, 0.6\n  ),\n  status = rep( # repetition\n    c(\"activated\", \"inhibited\"),\n    each = 5\n  )\n)\nmy_df\n\n   id gene_name detected gene_expr    status\n1   1     geneA      yes      12.4 activated\n2   2     geneB      yes      11.3 activated\n3   3     geneC      yes      13.5 activated\n4   4     geneD      yes      10.2 activated\n5   5     geneE      yes      11.4 activated\n6   6     geneF      yes       0.5 inhibited\n7   7     geneG      yes       1.0 inhibited\n8   8     geneH      yes       1.2 inhibited\n9   9     geneI      yes       1.4 inhibited\n10 10     geneJ      yes       0.6 inhibited\n\n\n\n\n# Check the data structure\nis.data.frame(my_df)\n\n[1] TRUE\n\nstr(my_df)\n\n'data.frame':   10 obs. of  5 variables:\n $ id       : int  1 2 3 4 5 6 7 8 9 10\n $ gene_name: chr  \"geneA\" \"geneB\" \"geneC\" \"geneD\" ...\n $ detected : chr  \"yes\" \"yes\" \"yes\" \"yes\" ...\n $ gene_expr: num  12.4 11.3 13.5 10.2 11.4 0.5 1 1.2 1.4 0.6\n $ status   : chr  \"activated\" \"activated\" \"activated\" \"activated\" ...\n\n\n\n\n\n\n\n\n\n\nHow many rows and columns?\nWhat is the data type for each column?"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#exploring-the-data-frame",
    "href": "ioc_r/week03/r_w03_slides.html#exploring-the-data-frame",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Exploring the Data Frame",
    "text": "Exploring the Data Frame\n\n\n\nnrow(my_df)\n\n[1] 10\n\nncol(my_df)\n\n[1] 5\n\ndim(my_df)\n\n[1] 10  5\n\nrownames(my_df)\n\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\ncolnames(my_df)\n\n[1] \"id\"        \"gene_name\" \"detected\"  \"gene_expr\" \"status\"   \n\n\n\n\nhead(my_df, n = 5)\n\n  id gene_name detected gene_expr    status\n1  1     geneA      yes      12.4 activated\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n4  4     geneD      yes      10.2 activated\n5  5     geneE      yes      11.4 activated\n\ntail(my_df, n = 3)\n\n   id gene_name detected gene_expr    status\n8   8     geneH      yes       1.2 inhibited\n9   9     geneI      yes       1.4 inhibited\n10 10     geneJ      yes       0.6 inhibited\n\n\n\n\n\nsummary(my_df)\n\n       id         gene_name           detected           gene_expr    \n Min.   : 1.00   Length:10          Length:10          Min.   : 0.50  \n 1st Qu.: 3.25   Class :character   Class :character   1st Qu.: 1.05  \n Median : 5.50   Mode  :character   Mode  :character   Median : 5.80  \n Mean   : 5.50                                         Mean   : 6.35  \n 3rd Qu.: 7.75                                         3rd Qu.:11.38  \n Max.   :10.00                                         Max.   :13.50  \n    status         \n Length:10         \n Class :character  \n Mode  :character"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-1",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (1)",
    "text": "Accessing Elements (1)\nSimilar to matrix indexing, use [idx ,idx] syntax to access elements with:\n\n\nnumeric index\nrow/column names\nlogical index\n\n\n\n# Get 2nd and 3rd rows\nmy_df[2:3, ] \n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\nmy_df[-c(1, 4:10), ] # remove the other rows\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\n\n\nmy_df[c(\"2\", \"3\"), ]\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\nmy_df[c(FALSE, TRUE, TRUE, rep(FALSE, 7)), ]\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-2",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-2",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (2)",
    "text": "Accessing Elements (2)\n\n\n\nmy_df\n\n   id gene_name detected gene_expr    status\n1   1     geneA      yes      12.4 activated\n2   2     geneB      yes      11.3 activated\n3   3     geneC      yes      13.5 activated\n4   4     geneD      yes      10.2 activated\n5   5     geneE      yes      11.4 activated\n6   6     geneF      yes       0.5 inhibited\n7   7     geneG      yes       1.0 inhibited\n8   8     geneH      yes       1.2 inhibited\n9   9     geneI      yes       1.4 inhibited\n10 10     geneJ      yes       0.6 inhibited\n\n\n\n\n\n\n\n\n\nHow to get the 2nd and 3rd columns?\n\n\n\n\n\nmy_df[, 2:3]\n\n   gene_name detected\n1      geneA      yes\n2      geneB      yes\n3      geneC      yes\n4      geneD      yes\n5      geneE      yes\n6      geneF      yes\n7      geneG      yes\n8      geneH      yes\n9      geneI      yes\n10     geneJ      yes\n\n\n\nmy_df[, c(\"gene_name\", \"detected\")] # idem\nmy_df[, c(FALSE, TRUE, TRUE, FALSE, FALSE)] # idem\n\n\n\n\n\n\n\n\n\nHow to get “geneH” from the data frame?\n\n\n\n\n\n\nmy_df[8, 2]\n\n[1] \"geneH\"\n\nmy_df[8, \"gene_name\"]\n\n[1] \"geneH\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-3",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-3",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (3)",
    "text": "Accessing Elements (3)\n\nUse the operator $ or [[ ]] to get a column:\n\n\nmy_df$gene_name\n\n [1] \"geneA\" \"geneB\" \"geneC\" \"geneD\" \"geneE\" \"geneF\" \"geneG\" \"geneH\" \"geneI\"\n[10] \"geneJ\"\n\n\n\nmy_df[[2]] # idem, use numeric position\nmy_df[[\"gene_name\"]] # idem, use column name\n\n\nSubset the data frame based on some conditions:\n\n\n# Keep rows where the value in the \"status\" column is \"activated\"\nmy_df[my_df$status == \"activated\", ]\n\n  id gene_name detected gene_expr    status\n1  1     geneA      yes      12.4 activated\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n4  4     geneD      yes      10.2 activated\n5  5     geneE      yes      11.4 activated\n\n\n\n\n\n\n\n\nDon’t worry, we’ll go into more detail at the next session!"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#be-careful-of-data-structure",
    "href": "ioc_r/week03/r_w03_slides.html#be-careful-of-data-structure",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Be Careful of Data Structure",
    "text": "Be Careful of Data Structure\n\n\nIf you select only 1 row of a data frame:\n\nstr(my_df[2, ]) # still a data frame\n\n'data.frame':   1 obs. of  5 variables:\n $ id       : int 2\n $ gene_name: chr \"geneB\"\n $ detected : chr \"yes\"\n $ gene_expr: num 11.3\n $ status   : chr \"activated\"\n\n\n\nunlist(my_df[2, ]) # convert to a vector\n\n         id   gene_name    detected   gene_expr      status \n        \"2\"     \"geneB\"       \"yes\"      \"11.3\" \"activated\" \n\n\n\nIf you select only 1 column of a data frame:\n\nmy_df[, 2]\n\n [1] \"geneA\" \"geneB\" \"geneC\" \"geneD\" \"geneE\" \"geneF\" \"geneG\" \"geneH\" \"geneI\"\n[10] \"geneJ\"\n\nis.vector(my_df[, 2]) # The output was \"simplified\" to a vector.\n\n[1] TRUE\n\n\n\n\nTo keep the output as a data.frame when you select only 1 column, specify drop = FALSE:\n\nmy_df[, 2, drop = FALSE]\n\n   gene_name\n1      geneA\n2      geneB\n3      geneC\n4      geneD\n5      geneE\n6      geneF\n7      geneG\n8      geneH\n9      geneI\n10     geneJ\n\nstr(my_df[, 2, drop = FALSE])\n\n'data.frame':   10 obs. of  1 variable:\n $ gene_name: chr  \"geneA\" \"geneB\" \"geneC\" \"geneD\" ..."
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-1",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (1)",
    "text": "Data Frame Modification (1)\nModify existing column:\n\n\n\nThe whole column\n\n\nmy_df[[\"id\"]] &lt;- paste0(\"ID\", my_df[[\"id\"]])\nmy_df\n\n     id gene_name detected gene_expr    status\n1   ID1     geneA      yes      12.4 activated\n2   ID2     geneB      yes      11.3 activated\n3   ID3     geneC      yes      13.5 activated\n4   ID4     geneD      yes      10.2 activated\n5   ID5     geneE      yes      11.4 activated\n6   ID6     geneF      yes       0.5 inhibited\n7   ID7     geneG      yes       1.0 inhibited\n8   ID8     geneH      yes       1.2 inhibited\n9   ID9     geneI      yes       1.4 inhibited\n10 ID10     geneJ      yes       0.6 inhibited\n\n\n\nmy_df$id &lt;- paste0(\"ID\", 1:10) # idem\n\n\n\nModify some elements\n\n\nmy_df[[\"id\"]][1:2] &lt;- 1:2 \nmy_df\n\n     id gene_name detected gene_expr    status\n1     1     geneA      yes      12.4 activated\n2     2     geneB      yes      11.3 activated\n3   ID3     geneC      yes      13.5 activated\n4   ID4     geneD      yes      10.2 activated\n5   ID5     geneE      yes      11.4 activated\n6   ID6     geneF      yes       0.5 inhibited\n7   ID7     geneG      yes       1.0 inhibited\n8   ID8     geneH      yes       1.2 inhibited\n9   ID9     geneI      yes       1.4 inhibited\n10 ID10     geneJ      yes       0.6 inhibited\n\n\n\nmy_df[1:2, \"id\"] &lt;- 1:2 # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-2",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-2",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (2)",
    "text": "Data Frame Modification (2)\n\nAdd new column\n\n\nmy_df[[\"tissue\"]] &lt;- rep(c(\"liver\", \"muscle\"), times = 5)\nmy_df\n\n     id gene_name detected gene_expr    status tissue\n1     1     geneA      yes      12.4 activated  liver\n2     2     geneB      yes      11.3 activated muscle\n3   ID3     geneC      yes      13.5 activated  liver\n4   ID4     geneD      yes      10.2 activated muscle\n5   ID5     geneE      yes      11.4 activated  liver\n6   ID6     geneF      yes       0.5 inhibited muscle\n7   ID7     geneG      yes       1.0 inhibited  liver\n8   ID8     geneH      yes       1.2 inhibited muscle\n9   ID9     geneI      yes       1.4 inhibited  liver\n10 ID10     geneJ      yes       0.6 inhibited muscle\n\n\n\nmy_df$tissue &lt;- rep(c(\"liver\", \"muscle\"), times = 5) # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-3",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-3",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (3)",
    "text": "Data Frame Modification (3)\n\nDelete column(s)\n\n\nmy_df[[\"detected\"]] &lt;- NULL\nmy_df\n\n     id gene_name gene_expr    status tissue\n1     1     geneA      12.4 activated  liver\n2     2     geneB      11.3 activated muscle\n3   ID3     geneC      13.5 activated  liver\n4   ID4     geneD      10.2 activated muscle\n5   ID5     geneE      11.4 activated  liver\n6   ID6     geneF       0.5 inhibited muscle\n7   ID7     geneG       1.0 inhibited  liver\n8   ID8     geneH       1.2 inhibited muscle\n9   ID9     geneI       1.4 inhibited  liver\n10 ID10     geneJ       0.6 inhibited muscle\n\n\n\nmy_df$detected &lt;- NULL # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#recoding-data-type",
    "href": "ioc_r/week03/r_w03_slides.html#recoding-data-type",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Recoding Data Type",
    "text": "Recoding Data Type\nYou need to recode the column data type if data is categorical, use the factor() function.\n\nmy_df[[\"status\"]] &lt;- factor(my_df[[\"status\"]])\nmy_df$tissue &lt;- factor(\n  my_df[[\"tissue\"]],\n  levels = c(\"muscle\", \"liver\") # specify levels' order\n)\n\n# Check again the data\nstr(my_df)\n\n'data.frame':   10 obs. of  5 variables:\n $ id       : chr  \"1\" \"2\" \"ID3\" \"ID4\" ...\n $ gene_name: chr  \"geneA\" \"geneB\" \"geneC\" \"geneD\" ...\n $ gene_expr: num  12.4 11.3 13.5 10.2 11.4 0.5 1 1.2 1.4 0.6\n $ status   : Factor w/ 2 levels \"activated\",\"inhibited\": 1 1 1 1 1 2 2 2 2 2\n $ tissue   : Factor w/ 2 levels \"muscle\",\"liver\": 2 1 2 1 2 1 2 1 2 1\n\nsummary(my_df)\n\n      id             gene_name           gene_expr           status     tissue \n Length:10          Length:10          Min.   : 0.50   activated:5   muscle:5  \n Class :character   Class :character   1st Qu.: 1.05   inhibited:5   liver :5  \n Mode  :character   Mode  :character   Median : 5.80                           \n                                       Mean   : 6.35                           \n                                       3rd Qu.:11.38                           \n                                       Max.   :13.50"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-concatenation",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-concatenation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Concatenation",
    "text": "Data Frame Concatenation\n\n\nUse cbind() to bind two or more data frames by columns.\n\ndf1 &lt;- data.frame(x = 1:3, y = 4:6)\ndf1\n\n  x y\n1 1 4\n2 2 5\n3 3 6\n\ndf2 &lt;- data.frame(a = 7:9, b = 10:12)\ndf2\n\n  a  b\n1 7 10\n2 8 11\n3 9 12\n\ncbind(df1, df2)\n\n  x y a  b\n1 1 4 7 10\n2 2 5 8 11\n3 3 6 9 12\n\n\n\nUse rbind() to bind two or more data frames by rows, columns names should be the same.\n\nrbind(df1, df2)\n\nError in match.names(clabs, names(xi)): names do not match previous names\n\ndf3 &lt;- data.frame(x = 7:9, y = 10:12)\nrbind(df1, df3)\n\n  x  y\n1 1  4\n2 2  5\n3 3  6\n4 7 10\n5 8 11\n6 9 12"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#join-data-frames",
    "href": "ioc_r/week03/r_w03_slides.html#join-data-frames",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Join Data Frames",
    "text": "Join Data Frames\nUse merge() to join two data frames based on a common column.\n\n\n\ndf1 &lt;- data.frame(id = 1:3, x = letters[1:3])\ndf1\n\n  id x\n1  1 a\n2  2 b\n3  3 c\n\ndf2 &lt;- data.frame(id = c(2, 4), y = LETTERS[c(2, 4)])\ndf2\n\n  id y\n1  2 B\n2  4 D\n\n# inner join\nmerge(x = df1, y = df2, by = \"id\") \n\n  id x y\n1  2 b B\n\n\n\n\n# left join\nmerge(x = df1, y = df2, by = \"id\", all.x = TRUE) \n\n  id x    y\n1  1 a &lt;NA&gt;\n2  2 b    B\n3  3 c &lt;NA&gt;\n\n# right join\nmerge(x = df1, y = df2, by = \"id\", all.y = TRUE) \n\n  id    x y\n1  2    b B\n2  4 &lt;NA&gt; D\n\n# outer join\nmerge(x = df1, y = df2, by = \"id\", all = TRUE)\n\n  id    x    y\n1  1    a &lt;NA&gt;\n2  2    b    B\n3  3    c &lt;NA&gt;\n4  4 &lt;NA&gt;    D"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#lists-creation",
    "href": "ioc_r/week03/r_w03_slides.html#lists-creation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Lists Creation",
    "text": "Lists Creation\n\n\nUse list() function to create a list, separate elements with ,.\n\nx &lt;- \"geneA\"\ny &lt;- c(10, 11, 0.5)\nz &lt;- c(TRUE, TRUE, FALSE)\nsimple_list &lt;- list(x, y, z)\nsimple_list\n\n[[1]]\n[1] \"geneA\"\n\n[[2]]\n[1] 10.0 11.0  0.5\n\n[[3]]\n[1]  TRUE  TRUE FALSE\n\n# how many elements in the elements\nlength(simple_list)\n\n[1] 3\n\n# check the structure\nstr(simple_list)\n\nList of 3\n $ : chr \"geneA\"\n $ : num [1:3] 10 11 0.5\n $ : logi [1:3] TRUE TRUE FALSE\n\n\n\nWe can name the elements of a list:\n\n# name the elements during creation\nlist(gene_name = x, counts = y, expressed = z) \n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n# or name the elements afterward\nnames(simple_list) &lt;- c(\"gene_name\", \"counts\", \"expressed\")\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#subsetting-a-list",
    "href": "ioc_r/week03/r_w03_slides.html#subsetting-a-list",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Subsetting a List",
    "text": "Subsetting a List\nUse [ ] to subset a list, with numeric index, name or logical index.\n\n\n\nsimple_list[c(1, 3)]\n\n$gene_name\n[1] \"geneA\"\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\nsimple_list[c(\"gene_name\", \"expressed\")]\n\n$gene_name\n[1] \"geneA\"\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\nsimple_list[c(TRUE, FALSE, TRUE)]\n\n$gene_name\n[1] \"geneA\"\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\n\n\n\n\n\n\nWhat is the data structure after subsetting?\n\nsimple_list[c(1, 3)]\nsimple_list[1]\n\n\n\n\n\n\nstr(simple_list[c(1, 3)])\n\nList of 2\n $ gene_name: chr \"geneA\"\n $ expressed: logi [1:3] TRUE TRUE FALSE\n\nstr(simple_list[1])\n\nList of 1\n $ gene_name: chr \"geneA\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-element-1",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-element-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Element (1)",
    "text": "Accessing Element (1)\n\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\nUse $ to access named element:\n\n\nsimple_list$counts\n\n[1] 10.0 11.0  0.5\n\n\n\nUse [[ ]] for named or indexed element:\n\n\nsimple_list[[\"counts\"]]\n\n[1] 10.0 11.0  0.5\n\nsimple_list[[2]]\n\n[1] 10.0 11.0  0.5"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-element-2",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-element-2",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Element (2)",
    "text": "Accessing Element (2)\nOnce we have access to the element, we can extract values according to the data structure of that element.\n\n\n\nmy_list &lt;- list(\n  sample_info = data.frame(\n    id = paste0(\"sample\", 1:3),\n    age = c(25, 27, 30)\n  ),\n  family_sequenced = list(\n    sample1 = c(\"father\", \"mother\"),\n    sample2 = c(\"father\", \"mother\", \"sister\"),\n    sample3 = c(\"mother\", \"sister\")\n  )\n)\nmy_list\n\n$sample_info\n       id age\n1 sample1  25\n2 sample2  27\n3 sample3  30\n\n$family_sequenced\n$family_sequenced$sample1\n[1] \"father\" \"mother\"\n\n$family_sequenced$sample2\n[1] \"father\" \"mother\" \"sister\"\n\n$family_sequenced$sample3\n[1] \"mother\" \"sister\"\n\n\n\n\n\n\n\n\n\nHow to extract the age of sample1?\n\n\n\n\n\nmy_list[[\"sample_info\"]][1, \"age\"]\n\n[1] 25\n\n\n\n\n\n\n\n\n\n\nHow to extract the sequenced family members of sample 2?\n\n\n\n\n\n\nmy_list[[\"family_sequenced\"]][[\"sample2\"]]\n\n[1] \"father\" \"mother\" \"sister\"\n\n\n\n\n\nexplain the data in list"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#list-modification",
    "href": "ioc_r/week03/r_w03_slides.html#list-modification",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "List Modification",
    "text": "List Modification\n\n\n\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\nModify an element\n\n\nsimple_list[[1]] &lt;- 1:10\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\n\nAdd an element\n\n\nsimple_list[[\"new_element\"]] &lt;- 3:1\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n$new_element\n[1] 3 2 1\n\n\n\nRemove an element\n\n\nsimple_list[[\"expressed\"]] &lt;- NULL\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$new_element\n[1] 3 2 1"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#list-concatenation",
    "href": "ioc_r/week03/r_w03_slides.html#list-concatenation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "List Concatenation",
    "text": "List Concatenation\nUse c() to concatenate two or more lists.\n\nlist1 &lt;- list(1:3, 4:6)\nlist2 &lt;- list(letters[1:3], \"A\")\n\nlist_long &lt;- c(list1, list2)\nlist_long\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6\n\n[[3]]\n[1] \"a\" \"b\" \"c\"\n\n[[4]]\n[1] \"A\"\n\nstr(list_long)\n\nList of 4\n $ : int [1:3] 1 2 3\n $ : int [1:3] 4 5 6\n $ : chr [1:3] \"a\" \"b\" \"c\"\n $ : chr \"A\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#todays-goals",
    "href": "ioc_r/week03/r_w03_slides.html#todays-goals",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nWork with data frames and lists\nCalculate fold change of gene expression between groups\nCompare gene expression using the Wilcoxon test\nVisualize differences with boxplots"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#organizing-your-work-like-a-pro",
    "href": "ioc_r/week06/r_w06_slides.html#organizing-your-work-like-a-pro",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Organizing Your Work Like a Pro",
    "text": "Organizing Your Work Like a Pro\nUse R Projects to manage files and scripts in a structured way.\n\nKeep data, scripts, and outputs in separate folders to avoid chaos.\nExample:\n\nmy_project/\n  ├── README.md      # A short description of project\n  ├── data/          # Raw data files (e.g., RNA-seq counts)\n  ├── scripts/       # R scripts for preprocessing & analysis\n  └── outputs/       # Output figures & tables"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#wheres-your-file",
    "href": "ioc_r/week06/r_w06_slides.html#wheres-your-file",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Where’s Your File?",
    "text": "Where’s Your File?\nA path tells your computer where to find files/folders.\n\nAbsolute path, starts from the very top of your computer’s folder.\nRelative path, starts from your working directory (folder).\n\n\n\n\n\n\n\n\nYour working directory is /Users/lijiao/my_project/, you want to import a file loacated at /Users/lijiao/Download/data.csv using the read_csv() function.\nWhich of the following is the correct way to read the file?\n# option A\nread_csv(file = \"data.csv\")\n\n# option B\nread_csv(file = \"Download/data.csv\")\n\n# option C\nread_csv(file = \"/Users/lijiao/Download/data.csv\")"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#whats-in-your-data",
    "href": "ioc_r/week06/r_w06_slides.html#whats-in-your-data",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "What’s in Your Data?",
    "text": "What’s in Your Data?\n\n\n\nData Type\nExample in Biology\n\n\n\n\nNumeric\nExpression levels (25.3)\n\n\nCharacter\nGene names (\"TP53\",\"BRCA1\")\n\n\nLogical\nMutation status (TRUE for mutated, FALSE for WT)\n\n\n\n\n\n\n\nexpression &lt;- 25.3   # Numeric\ngene &lt;- \"TP53\"       # Character\nis_mutant &lt;- TRUE    # Logical\n\n\n\nx &lt;- 1\ny &lt;- 2\ntotal &lt;- x + y\ntotal\n\n[1] 3\n\n\n\n\n\n\n\n\n\nIf we change x to 5, is the value stored in total changed?\nIf total is not changed, what do you need to do to update the value in total?"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data",
    "href": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Where Do You Store Your Data?",
    "text": "Where Do You Store Your Data?\n\n\n\nVectors\n\n1D homogeneous data (all elements of the same type).\nUse cases: A list of gene names, expression levels, or p-values.\nUse [] for indexing\n\n\n\n\ngene_names &lt;- c(\"TP53\", \"BRCA1\", \"EGFR\", \"INS\")\ngene_names[1]  # First gene: \"TP53\"\n\n[1] \"TP53\"\n\ngene_names[c(2, 4)]  # Select multiple genes\n\n[1] \"BRCA1\" \"INS\"  \n\n# factor\nmut_gp &lt;- factor(c(\"wt\", \"wt\", \"mut\", \"mut\"))\nmut_gp\n\n[1] wt  wt  mut mut\nLevels: mut wt\n\nmut_gp[3]\n\n[1] mut\nLevels: mut wt"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-1",
    "href": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-1",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Where Do You Store Your Data?",
    "text": "Where Do You Store Your Data?\n\n\n\nMatrices:\n\n2D homogeneous data, a collection of equal-length vectors of the same data type.\nUse case: gene expression counting table, rows = genes, columns = samples\nUse [, ] for indexing.\n\n\n\nexpr_matrix &lt;- matrix(\n  c(10, 12, 15, 20, 8, 30),\n  nrow = 3, byrow = TRUE,\n  dimnames = list( # name the rows and columns   \n    c(\"gene1\", \"gene2\", \"gene3\"),\n    c(\"sample1\", \"sample2\")\n  )\n)\n\n\n\nexpr_matrix\n\n      sample1 sample2\ngene1      10      12\ngene2      15      20\ngene3       8      30\n\nexpr_matrix[\"gene1\", ]  # Expression of Gene1 across samples\n\nsample1 sample2 \n     10      12 \n\nexpr_matrix[, \"sample2\"]  # All gene expressions in Sample2\n\ngene1 gene2 gene3 \n   12    20    30 \n\nexpr_matrix[2, 1]  # Specific value at row 2, column 1\n\n[1] 15"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-2",
    "href": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-2",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Where Do You Store Your Data?",
    "text": "Where Do You Store Your Data?\n\n\n\nData Frames\n\n2D heterogeneous data, a collection of equal-length vectors of one or more data types.\nUse [, ] for indexing\nUse $ and [[ ]] to extract one column.\n\n\n\ndf &lt;- data.frame(\n  Gene = c(\"TP53\", \"BRCA1\", \"EGFR\"),\n  Expression = c(25.3, 12.5, 30.1),\n  Mutation = c(TRUE, FALSE, TRUE)\n)\ndf\n\n   Gene Expression Mutation\n1  TP53       25.3     TRUE\n2 BRCA1       12.5    FALSE\n3  EGFR       30.1     TRUE\n\n\n\n\ndf$Gene  # Select column as a vector\n\n[1] \"TP53\"  \"BRCA1\" \"EGFR\" \n\ndf[, \"Expression\"]  # Same as df$Expression\n\n[1] 25.3 12.5 30.1\n\ndf[[2]]  # Same as df$Expression\n\n[1] 25.3 12.5 30.1\n\ndf[1, ]  # First row\n\n  Gene Expression Mutation\n1 TP53       25.3     TRUE\n\ndf[df$Expression &gt; 30, ]  # Filter expression bigger than 30\n\n  Gene Expression Mutation\n3 EGFR       30.1     TRUE\n\ndf[which(df$Mutation), ]  # Filter mutated genes\n\n  Gene Expression Mutation\n1 TP53       25.3     TRUE\n3 EGFR       30.1     TRUE"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-3",
    "href": "ioc_r/week06/r_w06_slides.html#where-do-you-store-your-data-3",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Where Do You Store Your Data?",
    "text": "Where Do You Store Your Data?\n\n\n\nLists\n\nFlexible structure, can hold anything (vectors, matrices, data frames or lists).\nUse [] to subset a list.\nUse [[ ]] or $ to select a specific component of a list.\n\n\n\nbio_data &lt;- list(\n  genes = c(\"TP53\", \"BRCA1\"),\n  expression = matrix(c(20, 15, 30, 25), nrow = 2),\n  metadata = data.frame(Sample = c(\"A\", \"B\"), Condition = c(\"WT\", \"KO\"))\n)\n\n\n\nbio_data\n\n$genes\n[1] \"TP53\"  \"BRCA1\"\n\n$expression\n     [,1] [,2]\n[1,]   20   30\n[2,]   15   25\n\n$metadata\n  Sample Condition\n1      A        WT\n2      B        KO\n\nbio_data[1]  # A sub list\n\n$genes\n[1] \"TP53\"  \"BRCA1\"\n\nbio_data[[1]]  # Get gene names\n\n[1] \"TP53\"  \"BRCA1\"\n\nbio_data$expression  # Get expression matrix\n\n     [,1] [,2]\n[1,]   20   30\n[2,]   15   25\n\nbio_data$metadata$Condition  # Get sample conditions\n\n[1] \"WT\" \"KO\""
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#filtering-data-with-accuracy-in-r",
    "href": "ioc_r/week06/r_w06_slides.html#filtering-data-with-accuracy-in-r",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Filtering Data with Accuracy in R",
    "text": "Filtering Data with Accuracy in R\n\n\n\nType\nOperator\nExample\n\n\n\n\nComparison\n==, !=, &gt;, &lt;, &gt;=, &lt;=\np_value &lt; 0.05\n\n\nLogical\n& (AND), | (OR), ! (NOT)\nTRUE & FALSE\n\n\n\n\n\n\n\nexpression &lt;- 25.3\n\nif (expression &gt; 20) {\n  print(\"High expression\")\n} else {\n  print(\"Low expression\")\n}\n\n[1] \"High expression\"\n\nifelse(test = expression &gt; 20, yes = \"High expression\", no = \"Low expression\")\n\n[1] \"High expression\"\n\n\n\n\nage &lt;- c(18, 27, 20, 23, 22)\nage[age &lt; 20 | age &gt; 25]\n\n[1] 18 27\n\n\n\n\n\ngenes &lt;- data.frame(\n  gene = c(\"TP53\", \"BRCA1\", \"EGFR\"),\n  expr = c(25.3, 12.5, 30.1),\n  gene_family = c(\"A\", \"A\", \"B\")\n  \n)\ngenes[genes$expr &gt; 20, ]\n\n  gene expr gene_family\n1 TP53 25.3           A\n3 EGFR 30.1           B\n\n# subset(genes, expr &gt; 20) # idem\n\nsubset(genes, expr &gt; 20, select = c(\"gene\", \"expr\")) # filter and select some columns\n\n  gene expr\n1 TP53 25.3\n3 EGFR 30.1"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#using-functions",
    "href": "ioc_r/week06/r_w06_slides.html#using-functions",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Using Functions",
    "text": "Using Functions\nA function is a block of code that performs a specific task.\nHow to use a function?\n\nmean(x = c(1:3, NA), na.rm = TRUE)\n\n[1] 2\n\n\n\nGet help:\n?mean # get help of the function\nhelp(mean)\n\n\nIf you use functions from packages other than the built-in ones:\ninstall.packages(\"readr\")           # install it if never done\nlibrary(readr)                      # load the package\nread_csv(file = \"path/to/file.txt\") # use the function with necessary inputs"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#basic-graphing",
    "href": "ioc_r/week06/r_w06_slides.html#basic-graphing",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Basic Graphing",
    "text": "Basic Graphing\nSyntax: ggplot(data, aes(x, y)) + geom_*()\n\n\n\nlibrary(ggplot2)\ndf &lt;- data.frame(\n  Expression = c(\n    25.3, 12.5, 30.1, 27.8, 18.2, 35.6\n  ),\n  Condition = rep(c(\"WT\", \"KO\"), 3)\n)\ndf\n\n  Expression Condition\n1       25.3        WT\n2       12.5        KO\n3       30.1        WT\n4       27.8        KO\n5       18.2        WT\n6       35.6        KO\n\n\n\n\nggplot(\n  data = df,\n  aes(x = Condition, y = Expression)\n) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nPossible to change aesthetics (color, fill, shape, alpha (transparency), etc.), theme, scales, etc.\n\n\n## save figure\nggsave(filename = \"path/to/my_figure.png\")"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#text-and-excel-files",
    "href": "ioc_r/week06/r_w06_slides.html#text-and-excel-files",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Text and Excel Files",
    "text": "Text and Excel Files\n\n\n\nText format (.txt, .csv)\n\n\n# use {base}'s functions\n## Import\ntext_file &lt;- read.table(\"path/to/file.txt\")\ncsv_file &lt;- read.csv(\"path/to/file.csv\")\n\n## Export\nwrite.table(\n  x = df,\n  file = \"outputs/cleaned_gene_expression.txt\"\n)\nwrite.csv(\n  x = df,\n  file = \"outputs/cleaned_gene_expression.csv\"\n)\n\n# use {readr}'s functions\n## Import\nreadr::read_csv(\n  file = \"outputs/cleaned_gene_expression.csv\"\n)\n## Export\nreadr::write_csv(\n  x = df,\n  file = \"outputs/cleaned_gene_expression.csv\"\n)\n\n\n\nExcel format (.xlsx, .xls)\n\n\n# use {readxl}'s functions\n## Import\nxlsx_file &lt;- readxl::read_xlsx(\"path/to/file.xlsx\")\nxls_file &lt;- readxl::read_xls(\"path/to/file.xls\")\n\n# use {xlsx}'s function\n## Export\nxlsx::write.xlsx(\n  x = df,\n  file = \"outputs/cleaned_gene_expression.xlsx\"\n)\n\n\n\n\n\n\n\n\n\nDon’t forget to use arguments to specify if your data has header, row names, etc.\nCheat sheet for data import/export with {readr} and {readxl} in R: https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#r-specific-formats",
    "href": "ioc_r/week06/r_w06_slides.html#r-specific-formats",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "R Specific Formats",
    "text": "R Specific Formats\n\n\n\nRDS (for preserving a single R object)\n\n\nsaveRDS(\n  object = df,\n  file = \"outputs/cleaned_gene_expression.rds\"\n)\n\n# load RDS data into environment\nmy_df &lt;- readRDS(\n  file = \"outputs/cleaned_gene_expression.rds\"\n)\n\n\n\nRData (for saving multiple R objects at once)\n\n\nsave(\n  df,\n  summary_stats,\n  file = \"outputs/analysis_results.RData\"\n)\n\n# Load all objects back into the environment\n# with their original names\nload(\"outputs/analysis_results.RData\")\n\n\n\n\n\n\n\n\n\n\nBoth .RDS and .Rdata preserve data structures, such as column data types (numeric, character or factor)."
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#how-can-ai-help-us",
    "href": "ioc_r/week06/r_w06_slides.html#how-can-ai-help-us",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "How Can AI help Us?",
    "text": "How Can AI help Us?\n\nDebugging: Identify and troubleshoot error/warning messages\nGenerate code snippets (filter data, visualize, define functions, etc.)\nExplain unfamiliar code and documentation\nEnhance code quality (readability, efficiency, optimization)\n…\n\nDifferent AI tools: ChatGPT, Gemini, Perplexity, Claude, Le Chat, DeepSeek, etc.\n\n\n\n\n\n\nAI is a great assistant, but it can make mistakes, always verify outputs!"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#how-to-ask-ai-for-help-effectively",
    "href": "ioc_r/week06/r_w06_slides.html#how-to-ask-ai-for-help-effectively",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "How to ask AI for help effectively?",
    "text": "How to ask AI for help effectively?\n✅ Be specific: Instead of “Why is my code not working?”, ask:\n\n“I’m trying to filter a data frame in R where Expression &gt; 10, but I get an error. Here’s my code: df[df$Expression &gt; 10]. How can I fix it?”\n\n✅ Provide context:\n\nA quick mention of your background can guide the response (e.g.: “I’m biologist working with gene expression data”)\nWhat is your goal?\nWhat error message do you see?\nWhat does your dataset look like?"
  },
  {
    "objectID": "ioc_r/week06/r_w06_slides.html#todays-goals",
    "href": "ioc_r/week06/r_w06_slides.html#todays-goals",
    "title": "R-fresh:Revisiting the Essentials",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nHands-on challenge: “Fix the Code”\nMini data analysis project\n\nData cleaning\nSimple analysis\nVisualisation"
  },
  {
    "objectID": "ioc_r/week06/r_w06_exos.html",
    "href": "ioc_r/week06/r_w06_exos.html",
    "title": "Week 6 - Hands-On Examples",
    "section": "",
    "text": "The R script is available here: link"
  },
  {
    "objectID": "ioc_r/week06/r_w06_exos.html#goals",
    "href": "ioc_r/week06/r_w06_exos.html#goals",
    "title": "Week 6 - Hands-On Examples",
    "section": "Goals",
    "text": "Goals\n\nHands-on challenge: “Fix the Code”\nMini data analysis project\n\nData cleaning\nSimple analysis\nVisualisation"
  },
  {
    "objectID": "ioc_r/week06/r_w06_exos.html#fix-the-code-challenge",
    "href": "ioc_r/week06/r_w06_exos.html#fix-the-code-challenge",
    "title": "Week 6 - Hands-On Examples",
    "section": "“Fix the Code” Challenge",
    "text": "“Fix the Code” Challenge\n\nFix the data frame error.\n\n\ndata &lt;- data.frame(\n  gene = c(\"BRCA1\", \"TP53\", \"MYC\"),\n  expression = c(10.5, 8.2, 12.7)\n  condition = c(\"Tumor\", \"Normal\", \"Tumor\")\n)\n\nError in parse(text = input): &lt;text&gt;:4:3: unexpected symbol\n3:   expression = c(10.5, 8.2, 12.7)\n4:   condition\n     ^\n\n\n\n\nCorrection\ndata &lt;- data.frame(\n  gene = c(\"BRCA1\", \"TP53\", \"MYC\"),\n  expression = c(10.5, 8.2, 12.7),\n  condition = c(\"Tumor\", \"Normal\", \"Tumor\")\n)\n\n\n\nFix error when using the mean() function.\n\n\ncounts &lt;- data.frame(\n  sample1 = c(1, 2, 3),\n  sample2 = c(1, 1, 3),\n  sample3 = c(0, 1, 2),\n  row.names = paste0(\"gene\", 1:3)\n)\ncounts\n\n      sample1 sample2 sample3\ngene1       1       1       0\ngene2       2       1       1\ngene3       3       3       2\n\nmean(counts[\"gene3\", ])\n\nWarning in mean.default(counts[\"gene3\", ]): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\n\n\nCorrection\nmean(unlist(counts[\"gene3\", ]))\n\n\n[1] 2.666667\n\n\nCorrection\n# or\nmean(as.matrix(counts)[\"gene3\", ])\n\n\n[1] 2.666667\n\n\n\nFix error in condition.\n\n\nx &lt;- 10\nif (x = 5) {\n  print(\"x is 5\")\n}\n\nError in parse(text = input): &lt;text&gt;:2:7: unexpected '='\n1: x &lt;- 10\n2: if (x =\n         ^\n\n\n\n\nCorrection\nx &lt;- 10\nif (x == 5) {\n  print(\"x is 5\")\n}\n\n\n\nFix error in ggplot2. The goal is to show petal length with a boxplot for each species.\n\nggplot(iris, aes(x = Sepal.Length, y = Species))\ngeom_boxplot()\n\n\nError in ggplot(iris, aes(x = Sepal.Length, y = Species)): could not find function \"ggplot\"\n\n\nError in geom_boxplot(): could not find function \"geom_boxplot\"\n\n\n\n\nCorrection\nlibrary(ggplot2) # load the package before use\nggplot(iris, aes(x = Sepal.Length, y = Species)) + # need \"+\" between layers\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nFix error in ggplot2. The aim is to draw boxplot for each group.\n\n\n# simulate data for two groups of samples.\nset.seed(1)\ndata &lt;- data.frame(\n  gp = rep(1:2, each = 20),\n  value = c(rnorm(20), rnorm(20, mean = 5))\n)\nstr(data)\n\n'data.frame':   40 obs. of  2 variables:\n $ gp   : int  1 1 1 1 1 1 1 1 1 1 ...\n $ value: num  -0.626 0.184 -0.836 1.595 0.33 ...\n\n# draw boxplot by group.\nggplot(data, aes(x = gp, y = value)) + \n  geom_boxplot()\n\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?\n\n\n\n\n\n\n\n\n\n\n\nCorrection\nggplot(data, aes(x = factor(gp), y = value)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nFix code in data filtration.\n\n\n# try to keep rows where the value is smaller than -0.5\ndata[data$value&lt;-0.5, ]\n\n[1] gp    value\n&lt;0 rows&gt; (or 0-length row.names)\n\n\n\n\nCorrection\nstr(data) # the original data was changed!\n\n\n'data.frame':   40 obs. of  2 variables:\n $ gp   : int  1 1 1 1 1 1 1 1 1 1 ...\n $ value: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...\n\n\nCorrection\n# rebuild the data frame\nset.seed(1)\ndata &lt;- data.frame(\n  gp = rep(1:2, each = 20),\n  value = c(rnorm(20), rnorm(20, mean = 5))\n)\n\ndata[data$value &lt; -0.5, ]\n\n\n   gp      value\n1   1 -0.6264538\n3   1 -0.8356286\n6   1 -0.8204684\n13  1 -0.6212406\n14  1 -2.2146999"
  },
  {
    "objectID": "ioc_r/week06/r_w06_exos.html#mini-data-project",
    "href": "ioc_r/week06/r_w06_exos.html#mini-data-project",
    "title": "Week 6 - Hands-On Examples",
    "section": "Mini Data Project",
    "text": "Mini Data Project\nA researcher has collected some gene expression data from 12 samples. However, some expression values are missing. Please help the researcher to clean the data and to performs some basic analyses.\n\n# Simulated dataset with missing values\ndata &lt;- data.frame(\n  sample_id = paste0(\"sample\", 1:12),\n  expression = c(\n    10.2, 15.2, NA, NA, 9.4, 18.1,\n    8.9, 16.0, 10.5, 15.5, 11.5, 13.4\n  ),\n  sample_group = rep(c(\"Control\", \"Case\"), times = 6)\n)\n\n# Show the dataset\ndata\n\n   sample_id expression sample_group\n1    sample1       10.2      Control\n2    sample2       15.2         Case\n3    sample3         NA      Control\n4    sample4         NA         Case\n5    sample5        9.4      Control\n6    sample6       18.1         Case\n7    sample7        8.9      Control\n8    sample8       16.0         Case\n9    sample9       10.5      Control\n10  sample10       15.5         Case\n11  sample11       11.5      Control\n12  sample12       13.4         Case\n\n\nTasks:\n\nFind missing values. Which rows contain missing values? → Hint: Use is.na()\n\n\n\nCorrection\n# Check which values are missing\nis.na(data$expression)\n\n\n [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nCorrection\n# Show only rows with missing values\ndata[is.na(data$expression), ]\n\n\n  sample_id expression sample_group\n3   sample3         NA      Control\n4   sample4         NA         Case\n\n\nCorrection\n## or find the index of NAs\nwhich(is.na(data$expression))\n\n\n[1] 3 4\n\n\nCorrection\ndata[which(is.na(data$expression)), ]\n\n\n  sample_id expression sample_group\n3   sample3         NA      Control\n4   sample4         NA         Case\n\n\n\nRemove rows with missing values. Create a new dataset without missing values.\n\n\n\nCorrection\n# Remove rows where expression is NA\ndata_clean &lt;- data[!is.na(data$expression), ]\n\n# Show the cleaned dataset\ndata_clean\n\n\n   sample_id expression sample_group\n1    sample1       10.2      Control\n2    sample2       15.2         Case\n5    sample5        9.4      Control\n6    sample6       18.1         Case\n7    sample7        8.9      Control\n8    sample8       16.0         Case\n9    sample9       10.5      Control\n10  sample10       15.5         Case\n11  sample11       11.5      Control\n12  sample12       13.4         Case\n\n\n\nBasic summary statistics\n\n\nWhat is the mean expression level (after removing missing values)?\nWhat is the max and min expression?\n\n\n\nCorrection\n# Compute summary statistics\nmean_expression &lt;- mean(data_clean$expression)\nmean_expression\n\n\n[1] 12.87\n\n\nCorrection\nmax_expression &lt;- max(data_clean$expression)\nmax_expression\n\n\n[1] 18.1\n\n\nCorrection\nmin_expression &lt;- min(data_clean$expression)\nmin_expression\n\n\n[1] 8.9\n\n\nCorrection\n## or use the range() function for the min and max\nrange(data_clean$expression)\n\n\n[1]  8.9 18.1\n\n\n\nFind the average expression (mean()) and the standard deviation (sd()) for each sample group (Control vs. Case)\n\n\n\nCorrection\n# Compute mean and sd of expression for each sample group\nexpr_ctrl &lt;- data_clean$expression[data_clean$sample_group == \"Control\"]\nmean(expr_ctrl)\n\n\n[1] 10.1\n\n\nCorrection\nsd(expr_ctrl)\n\n\n[1] 1.007472\n\n\nCorrection\nexpr_case &lt;- data_clean$expression[data_clean$sample_group == \"Case\"]\nmean(expr_case)\n\n\n[1] 15.64\n\n\nCorrection\nsd(expr_case)\n\n\n[1] 1.689083\n\n\n\nUse data_clean to draw a graph you have already seen, e.g.: box plots, scatter plots, etc.\n\n\n\nCorrection\n## a boxplot to show if \"Case\" has higher/lower expression than \"Control.\"\nggplot(\n  data_clean,\n  aes(x = sample_group, y = expression, fill = sample_group)\n) +\n  geom_boxplot() +\n  labs(\n    title = \"Expression Levels by Group\",\n    x = NULL,\n    y = \"Expression\"\n  ) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCorrection\n## Violin plot to show variability and density of expression levels\nggplot(\n  data_clean,\n  aes(x = sample_group, y = expression, fill = sample_group)\n) +\n  geom_violin() +\n  labs(\n    title = \"Violin Plot - Expression Distribution per Group\",\n    x = NULL,\n    y = \"Expression\"\n  ) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCorrection\n## Spotting individual variations\nggplot(\n  data_clean,\n  aes(x = sample_id, y = expression, color = sample_group)\n) +\n  geom_point(size = 3) +\n  labs(\n    title = \"Scatter Plot - Expression per Sample\",\n    x = NULL,\n    y = \"Expression\",\n    color = NULL\n  )\n\n\n\n\n\n\n\n\n\nCorrection\n## better solution\nggplot(\n  data_clean,\n  aes(\n    # recode variable as factor with the wanted order\n    x = factor(sample_id, levels = sample_id),\n    y = expression,\n    color = sample_group\n  )\n) +\n  geom_point(size = 3) +\n  labs(\n    title = \"Scatter Plot - Expression per Sample\",\n    subtitle = \"Improved Version :)\",\n    x = NULL,\n    y = \"Expression\",\n    color = NULL\n  ) +\n  theme(\n    # rotate x-axis' text to avoid overlap\n    axis.text.x = element_text(angle = 30, hjust = 1)\n  )\n\n\n\n\n\n\n\n\n\n\nTo go futhur: Let’s visualise the average expression of each group using barplot, with the help of ChatGPT (or any other AI tool).\n\n6a. Prepare data for barplot with error bars. We need to reorganize the data in a dataframe with 2 rows and 3 columns:\n\nthe column group contain the name of each group\nthe column mean contain the mean expression in of each group\nthe column mean contain the standard deviations\n\n\n\nCorrection\ngg_data &lt;- data.frame(\n  group = c(\"Control\", \"Case\"),\n  mean_val = c(mean(expr_ctrl), mean(expr_case)),\n  sd_val = c(sd(expr_ctrl), sd(expr_case))\n)\n\ngg_data\n\n\n    group mean_val   sd_val\n1 Control    10.10 1.007472\n2    Case    15.64 1.689083\n\n\n6b. Draw the bar plot:\n\nPlot bars for mean expression (geom_bar(stat = \"identity\"))\nAdd error bars for standard deviation (geom_errorbar())\nChange the aesthetic apsects as you want, e.g.: color, title, legend, etc.\n\n\n\nCorrection\np_bar &lt;- ggplot(data = gg_data, aes(x = group, y = mean_val)) +\n  geom_bar(stat = \"identity\", fill = \"orange\", width = 0.5) # bar plot\np_bar\n\n\n\n\n\n\n\n\n\nCorrection\np_bar_error &lt;- p_bar +\n  geom_errorbar( # add errorbar\n    aes(\n      ymin = mean_val - sd_val, \n      ymax = mean_val + sd_val\n    ), \n    width = 0.2 # smaller width of error bar\n  )\n\n# change labels and theme\np_bar_error +\n  labs(\n    title = \"Mean Gene Expression by Sample Group\",\n    subtitle = \"The error bars represent the standard deviation.\",\n    x = NULL, y = \"Mean Expression Level\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n6c: What if we want to add the expression level of each sample to the bar plot?\nHint: Add another layer for drawing points (geom_point), using the data frame that contains the individual data (data_clean).\n\n\nCorrection\n# change labels and theme\np_bar_error +\n  labs(\n    title = \"Mean Gene Expression by Sample Group\",\n    subtitle = \"The error bars represent the standard deviation.\",\n    x = NULL, y = \"Mean Expression Level\"\n  ) +\n  theme_minimal() +\n  geom_point( # add the layer of points\n    data = data_clean, # use the individual data\n    aes(x = sample_group, y = expression), # map axes\n    position = position_jitter( # add random noise to avoid overlap between points\n      width = 0.1, height = 0, # allow the points to be spread across a small horizontal range (width = 0.1),\n      # while keeping the value on y-axis fixed (height = 0)\n      seed = 1\n    ) \n  )\n\n\n\n\n\n\n\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#brief-recap-week-3",
    "href": "ioc_r/week04/r_w04_slides.html#brief-recap-week-3",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Brief Recap Week 3",
    "text": "Brief Recap Week 3\n\n\n\nData frames: row-column structure\n\n\ndf &lt;- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))\ndf\n\n  x y\n1 1 a\n2 2 b\n3 3 c\n\n\n\nLists: store anything\n\n\nmy_list &lt;- list(x = 1:3, y = letters[5:1])\nmy_list\n\n$x\n[1] 1 2 3\n\n$y\n[1] \"e\" \"d\" \"c\" \"b\" \"a\"\n\n\n\n\n\n\n\n\n\nWhat are the outputs for following codes?\n\n\n\n\ndf$x\ndf[[2]]\ndf[3, ]\ndf[, \"y\", drop = FALSE]\ndf[1, 2]\n\n\n\n\nmy_list$x\nmy_list[1]\nmy_list[\"y\"]\nmy_list[[2]][3]\n\n\n\n\nlist is often used to store meta data\nMotivation for Week 4 - Why learn operators, conditions, and functions? - Real-world examples (e.g., filtering data, automating repetitive tasks, decision-making in analysis)."
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#assignment-and-arithmetic-operators",
    "href": "ioc_r/week04/r_w04_slides.html#assignment-and-arithmetic-operators",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Assignment and Arithmetic Operators",
    "text": "Assignment and Arithmetic Operators\n\n\n\nAssignment operators: &lt;-, =\n\n\nx &lt;- 1\nx\n\n[1] 1\n\ny = \"abc\" # not recommanded\ny\n\n[1] \"abc\"\n\n# assign value to function’s parameter\nmean(x = 1:3)\n\n[1] 2\n\n\n\n\nArithmetic operators: +, -, *, /, ^ (exponentiation), etc.\n\n\n10^3\n\n[1] 1000\n\n\n\n\nx &lt;- c(2, 8, 3)\nx - 1\n\n[1] 1 7 2\n\nx - 1:3\n\n[1] 1 6 0\n\n\n\n\n\ny &lt;- c(6, 4, 1)\nx + y\n\n[1]  8 12  4\n\nx * y\n\n[1] 12 32  3\n\nx / y\n\n[1] 0.3333333 2.0000000 3.0000000"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#comparison-operators",
    "href": "ioc_r/week04/r_w04_slides.html#comparison-operators",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nElement-wise comparison: &gt;, &lt;, &gt;=, &lt;=, ==, !=, returns logical results.\n\n\n\n10 &gt; 3\n\n[1] TRUE\n\n10 &gt;= 3\n\n[1] TRUE\n\n10 &lt; 3\n\n[1] FALSE\n\n10 &lt;= 3\n\n[1] FALSE\n\n10 == 3 # equal\n\n[1] FALSE\n\n10 != 3 # not equal\n\n[1] TRUE\n\n\n\n\nx &lt;- c(2, 8, 3)\ny &lt;- c(6, 8, 1)\nx == y\n\n[1] FALSE  TRUE FALSE\n\nx != y\n\n[1]  TRUE FALSE  TRUE\n\nx &gt; y\n\n[1] FALSE FALSE  TRUE\n\nx &lt;= y\n\n[1]  TRUE  TRUE FALSE\n\n\n\n\n\n\n\n\n\nWhat are the expected results?\n\nx == 8\ny &gt; 1\na is a vector of numbers 1 to 5, a[a &gt; 3] returns?"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#logical-operators",
    "href": "ioc_r/week04/r_w04_slides.html#logical-operators",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Logical Operators",
    "text": "Logical Operators\nElement-wise comparison: NOT (!), AND (&), OR (|), etc., returns logical values.\n\n\n\n!TRUE\n\n[1] FALSE\n\n!FALSE\n\n[1] TRUE\n\n\n\nTo combine two conditions A and B:\n\n\n\nA\nB\nA & B\nA | B\n\n\n\n\nTRUE\nTRUE\nTRUE\nTRUE\n\n\nTRUE\nFALSE\nFALSE\nTRUE\n\n\nFALSE\nTRUE\nFALSE\nTRUE\n\n\nFALSE\nFALSE\nFALSE\nFALSE\n\n\n\n\n\n\n\n\n\n\n\nWhat are the expected results?\n\n(3 &gt; 1) & (7 &lt; 5)\n(3 &gt; 1) | (7 &lt; 5)\n\n\n\n\n\n\n(3 &gt; 1) & (7 &lt; 5)\n\n[1] FALSE\n\n(3 &gt; 1) | (7 &lt; 5)\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#the-in-operator",
    "href": "ioc_r/week04/r_w04_slides.html#the-in-operator",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "The %in% Operator",
    "text": "The %in% Operator\nWe use %in% to check if left-side values are present in right-side, it returns logical values.\n\n\n\n## check membership\n1 %in% 1:3\n\n[1] TRUE\n\n1:3 %in% 1\n\n[1]  TRUE FALSE FALSE\n\n\"a\" %in% c(\"abc\", \"a\")\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\nData frame df has two columns named x and y, what is the result of following code?\n\"col3\" %in% colnames(df)\n\n\n\n\n\n\n\"col3\" %in% colnames(df)\n\n[1] FALSE"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#bonus-operator-precedence",
    "href": "ioc_r/week04/r_w04_slides.html#bonus-operator-precedence",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Bonus: Operator Precedence",
    "text": "Bonus: Operator Precedence\n\n\nSimplified precedence order1 (highest to lowest):\n\nArithmetic (^ &gt; *, / &gt; +, -)\nRelational (&gt;, &lt;, &gt;=, &lt;=, ==, !=)\nMembership (%in%)\nLogical (! &gt; & &gt; |)\n\n\nOrder can be change using ():\n\n1 + 2 * 3\n\n[1] 7\n\n(1 + 2) * 3\n\n[1] 9\n\n\n\n\nTRUE | TRUE & FALSE\n\n[1] TRUE\n\n\n\n\n\n(TRUE | TRUE) & FALSE\n\n[1] FALSE\n\n\n\n\nFor more detail, check the operator documentation."
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#any-all-and-which",
    "href": "ioc_r/week04/r_w04_slides.html#any-all-and-which",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "any(), all() and which()",
    "text": "any(), all() and which()\n\n\nGiven a set of logical vectors:\n\n-3:3\n\n[1] -3 -2 -1  0  1  2  3\n\n-3:3 &gt; 0\n\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\n\n\nany(): is at least one of the values TRUE?\n\n\nany(-3:3 &gt; 0)\n\n[1] TRUE\n\n\n\nall(): are all of the values TRUE?\n\n\nall(-3:3 &gt; 0)\n\n[1] FALSE\n\n\n\nwhich(): return indices of TRUE values.\n\n\nwhich(-3:3 &gt; 0)\n\n[1] 5 6 7\n\n\n\n\n\n\n\n\n\nWe have a vector log2FoldChange &lt;- c(1.2, -0.5, 0.9, 0.7, -1.1), what are the expected results for the following codes?\n\nwhich(log2FoldChange &gt; 0.8)\nany(log2FoldChange &gt; 0.8)\nall(log2FoldChange &gt; 0)"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#conditional-statements",
    "href": "ioc_r/week04/r_w04_slides.html#conditional-statements",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Conditional Statements",
    "text": "Conditional Statements\nConditional statements allow us to make decisions based on logical conditions, guiding how the code behaves in different scenarios.\n\n\n\n\n\nflowchart LR\n  AA[temperature] --&gt; A((&gt; 37))\n  A --&gt; B(TRUE)\n  A --&gt; C(FALSE)\n  B --&gt; D[Fever]\n  C --&gt; E[Normal]\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n  AA[log2FC] --&gt; A((&gt; 0))\n  A --&gt; B(TRUE)\n  A --&gt; C(FALSE)\n  B --&gt; D[Up-regulated]\n  C --&gt; E[Not up-regulated]"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#if-and-if-else",
    "href": "ioc_r/week04/r_w04_slides.html#if-and-if-else",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "if and if else",
    "text": "if and if else\n\n\nSyntax:\n\n## if statement\nif (condition) {\n  # code to run if `condition` is TRUE\n}\n\n## if else statement\nif (condition) {\n  # code to run if `condition` is TRUE\n} else {\n  # code to run if `condition` is FALSE\n}\n\n\n\n\n\n\n\n\nYou can use if without else but never in the opposite way.\nThe condition must evaluate to exactly one logical value (TRUE or FALSE) and cannot be NA.\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n  AA[log2FC] --&gt; A((&gt; 0))\n  A --&gt; B(TRUE)\n  A --&gt; C(FALSE)\n  B --&gt; D[Up-regulated]\n  C --&gt; E[Not up-regulated]\n\n\n\n\n\n\n\nlog2FC &lt;- 2.5\nif (log2FC &gt; 0) {\n  # code to run if condition is TRUE\n  print(\"Up-regulated\")\n} else {\n  # code to run if condition is FALSE\n  print(\"Not up-regulated\")\n}\n\n[1] \"Up-regulated\"\n\n\n\n\n\n\n\n\n\nWhat will you get when log2FC is 0?\n\n\n\n\n\n\n\n[1] \"Not up-regulated\""
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#the-ifelse-function",
    "href": "ioc_r/week04/r_w04_slides.html#the-ifelse-function",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "The ifelse() Function",
    "text": "The ifelse() Function\nSyntax:\n\nifelse(test, yes, no)\n\nExample:\n\nlog2FC &lt;- -1\nifelse(test = log2FC &gt; 0, yes = \"Up-regulated\", no = \"Not up-regulated\")\n\n[1] \"Not up-regulated\"\n\n\n\n\n# nested condition\nifelse(\n  test = log2FC &gt; 0,\n  yes = \"Up-regulated\",\n  no = ifelse(log2FC &lt; 0, yes = \"Down-regulated\", no = \"No change\")\n)\n\n[1] \"Down-regulated\"\n\n\n\n\nThe “test” parameter can be a logical vector.\n\nvec_lfc &lt;- c(-1, 0, 1)\nifelse(vec_lfc &gt; 0, yes = \"Up-regulated\", no = \"Not up-regulated\")\n\n[1] \"Not up-regulated\" \"Not up-regulated\" \"Up-regulated\""
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#what-is-a-function",
    "href": "ioc_r/week04/r_w04_slides.html#what-is-a-function",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "What is a Function?",
    "text": "What is a Function?\nFunctions = Reusable blocks of code.\n\n\n\n\n\nflowchart LR\n  A[Inputs] --&gt; B(Code block for specific task)\n  B --&gt; C[Output]\n\n\n\n\n\n\n\nTo use a function, write the function’s name followed by (), place any required input (arguments/parameters) inside the ().\n\nBuilt-in functions\n\n\nmean(x = 1:3)\n\n[1] 2\n\n\n\nFunctions that are part of R’s base installation, always available without needing to load any additional packages.\n\n\n\n\n\n\n\n\nUse ? or help() to view the function’s documentation, e.g.: ?mean, help(mean)"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#using-functions",
    "href": "ioc_r/week04/r_w04_slides.html#using-functions",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Using Functions",
    "text": "Using Functions\nFunctions = Reusable blocks of code.\n\nBuilt-in functions\nFunctions from additional packages\n\n\n# install.packages(\"readr\")         # one time only if not yet installed\nlibrary(readr)                      # load the package (every new R session)\nread_csv(file = \"path/to/data.csv\")\n\n\n\n\n\n\n\nWe’ll talk about packages next week!\n\n\n\n\n\nCustom functions\n\n\nadd_one &lt;- function(x) {x + 1}\nadd_one(x = 1:3)\n\n[1] 2 3 4\n\n\n\n\n\n\n\n\nWe’ll talk about customised functions in session 8!"
  },
  {
    "objectID": "ioc_r/week04/r_w04_slides.html#todays-goals",
    "href": "ioc_r/week04/r_w04_slides.html#todays-goals",
    "title": "Building Logic:Operators, Conditions, and Functions",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nUnderstand and use operators to filter data with precision.\nApply functions to perform basic calculations and data manipulation."
  },
  {
    "objectID": "ioc_scrnaseq.html",
    "href": "ioc_scrnaseq.html",
    "title": "IOC on Single-cell RNAseq Analysis",
    "section": "",
    "text": "Training on single-cell RNAseq analysis is upcoming!"
  },
  {
    "objectID": "ioc_scrnaseq_info.html",
    "href": "ioc_scrnaseq_info.html",
    "title": "IOC Single-cell RNAseq Training Information",
    "section": "",
    "text": "Welcome to the IOC-scRNAseq Training!\nThe online course will be started from March 2026. More details will be shared later."
  }
]