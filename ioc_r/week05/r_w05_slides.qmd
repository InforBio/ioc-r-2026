---
title: "Graphing with {ggplot2}"
subtitle: "IOC-R Week 5"
date: "2025-02-03"
date-format: " "
format:
  revealjs: 
    toc: true
    toc-title: "Plan"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: ../../images/logoInforBio_fond_blanc_small.png
    css: ../custom.css
  # pdf:
  #   toc: true
echo: true
categories: 
  - week05
  - slides
image: images/ggplot2_logo.png
---

# Recap Week 4

## Brief Recap Week 4 {.smaller}

::: {.columns}
::: {.column}
- Operators
    - Logical: `&`, `|`, `!`, return `TRUE` or `FALSE`.
    - Comparison: `==`, `!=`, `<`, `<=`, `>`, `>=`.
    - The `%in%`: check membership

::: {.callout-note appearance="minimal"}
What does the following code do?
:::

```r
(2.1 > 1) & (0.049 > 0.05)
(2.1 > 1) | (0.049 > 0.05)

# df is a data frame, 
# one of the columns is called "pvalue"
df[df$pvalue < 0.05, ]

"a" %in% c("c", "ba")
```
:::

::: {.column .fragment}
- Conditions
    - statements: if, if...else
    - `ifelse()` function

::: {.callout-note appearance="minimal"}
What does the following code do?
:::

```r
if (lfc > 2 & pvalue < 0.05 ) {
  print("gene of interest")
} else {
  print("gene to remove")
}
```
:::
:::

## Brief Recap Week 4 {.smaller}

::: {.columns}

::: {.column}
- Functions

```r
## syntax
my_function <- function(arg1, arg2) {
  # code
  return(result)
}
```

:::
::: {.column .fragment}

::: {.callout-note appearance="minimal"}
Based on the following code:

- what will you get when calling `times_three(2)`?
- What will you get if you type `time_factor` in the console?
:::

```r
times_three <- function(number) {
  time_factor <- 3
  res <- number * time_factor
  return(res)
}
times_three(2)
time_factor
```
:::
:::


# R Packages 

## What are Packages in R? {.smaller}

Packages are collections of functions, data, and documentation.

- Pre-installed packages: {`base`}, {`utils`}, {`graphics`}, *etc.*

```r
dim() # from {base}
head() # from {utils}
plot() # from {graphics}
```

. . .

To check the list of installed packages in RStudio:

![](images/package_panel.png){width=15cm}

::: {.notes}
name, description, can delete a pkg here 
:::

## Installing Packages {.smaller}

By default, R will install the lastest version of a package.

- Click-button way: 

![](images/pkg_install.png)

- Via command, *i.e.*, `install.packages("ggplot2")`

::: {.callout-tip appearance="minimal"}
- **[CRAN](https://cran.r-project.org)** (Comprehensive R Archive Network) is a network of servers around the world that store identical, up-to-date, versions of code and documentation for R.
- **[Bioconductor](https://bioconductor.org)** is a specialized repository like CRAN, but focused on bioinformatics. It provides R packages for analyzing genomic and biological data.
:::

::: {.notes}
Only need install once for the system, the load the package.
:::

## Management of Packages {.smaller}

::: {.columns}
::: {.column}
- Update: click on the ![](images/pkg_update_button.png){width=1.8cm} and a popup will show you packages that can be updated.

![](images/update_popup.png){width=10cm}

:::
::: {.column}
- Delete: click on the delete buttom after the package

![](images/delete_pkg.png)

Or use `remove.packages("tibble")`.
:::
:::

::: {.callout-tip appearance="minimal"}
We'll talk about packages' version management via the
[renv](https://rstudio.github.io/renv/articles/renv.html)
package in session 6 if time allowed.
:::

## Using Functions of Package {.smaller}

To use (call) a function from a package, we can either:

- load the entire package (attach it to the environment)

```r
library(ggplot2) # load the package
ggplot() # call the function to iniate a ggplot
```

A loaded package will be checked in the "Packages" panel.

::: {.callout-tip appearance="minimal"}
You only need to load a package once per R session.

However, if you're running your script in a non-interactive way,
make sure to include the `library()` calls in your script,
ideally at the beginning.
:::

- or load one function of the package at the time with the syntax `pkg_name::fct_name`

```r
ggplot2::ggplot()
```

::: {.callout-tip appearance="minimal"}
This way is recommanded if you need to use only one function of a package.
:::


# Graphing with {ggplot2}

## Before Plotting ... {.smaller}

What message you want to show via your figure?


```{mermaid}
%%| echo: false
%%| fig-width: 20
flowchart LR
  A{Which variables?} --> B{Data properties}
  B --> C{Figure type}
```


<br>

::: {.callout-tip appearance="minimal"}
Check out these websites: [from Data to Viz](https://www.data-to-viz.com) and [The R Graph Gallery](https://r-graph-gallery.com) (by Yan Holtz)
:::

::: {.notes}
- What are the variables to be visualized?
- Data properties: continuous, discrete, categorical?
- Figure type: dots plot, boxplot, histogram, *etc.*
:::

## Compositions of a ggplot {.smaller}

![(Figure adpated from [QCBS R Workshop Series](https://r.qcbs.ca/workshop03/book-en/grammar-of-graphics-gg-basics.html).)](images/ggplot_comp.png)


## How to Build a ggplot {.smaller}

> All ggplot2 plots begin with a call to `ggplot()`, supplying default data and aesthethic mappings, specified by `aes()`. You Then add layers, scales, coords and facets with `+`.  ------ ggplot2 Reference

<br> 

. . . 

Example using the built-in dataset `iris`:

```{r}
str(iris) # data overview
```


## Basic Plot {.smaller}

```{r}
library("ggplot2") # load package
```

```{r}
#| echo: false

theme_set(theme_grey())
theme_update(
  axis.title = element_text(size = rel(2)),
  axis.text = element_text(size = rel(2)),
  strip.text = element_text(size = rel(2)),
  plot.title = element_text(size = rel(2.5)),
  legend.text = element_text(size = rel(2)),
  legend.title = element_text(size = rel(2))
)
```

::: {.columns}
::: {.column .fragment}
Start by calling `ggplot()`:
```{r}
p0 <- ggplot(
  data = iris, # a data frame
  mapping = aes(x = Sepal.Length, y = Petal.Length)
)
p0
```

Specify data, x and y axes.

:::{.callout-tip appearance="minimal"}
The data should be a data frame containing both variables needed for the plot.
:::
:::
::: {.column .fragment}
Add a geometric layer:
```{r}
# geom_point() is used for scatter plots
base_plot <- p0 + geom_point()


base_plot
```

Use points for visualisation.

:::
:::

::: {.notes}
ggplot() creates a canvas to draw on.
data contains columns fro the plot
aes() matches columns of data to aesthetics of the plot.
geom_point() adds point geometry.
:::


## Aesthetics - Color {.smaller}

The most common aesthetics: **color**, fill, shape, size, alpha (transparency), *etc.*

::: {.columns .content-smaller}
::: {.column .fragment}
- Static aesthetics: a fixed value and apply to the whole layer
```{r}
base_plot_red <- p0 + geom_point(color = "red")
base_plot_red
```

:::
::: {.column .fragment}

- Aesthetic mappings: visual preoperties that depend on data values (to be used in `aes()`)

```{r}
base_plot <- p0 + geom_point(aes(color = Species))
base_plot
```

:::
:::

::: {.callout-tip appearance="minimal"}
Reference: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>
:::

## Aesthetics - Shape {.smaller}

The most common aesthetics: color, fill, **shape**, size, alpha (transparency), *etc.*

::: {.columns .content-smaller}
::: {.column}
- Static aesthetics: a fixed value and apply to the whole layer
```{r}
p0 + geom_point(shape = 3)
```

:::
::: {.column .fragment}

- Aesthetic mappings: visual preoperties that depend on data values (to be used in `aes()`)

```{r}
p0 + geom_point(aes(shape = Species))
```

:::
:::

::: {.callout-tip appearance="minimal"}
Reference: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>
:::

## Aesthetics - Size {.smaller}

The most common aesthetics: color, fill, shape, **size**, alpha (transparency), *etc.*

::: {.columns .content-smaller}
::: {.column}
- Static aesthetics: a fixed value and apply to the whole layer
```{r}
p0 + geom_point(size = 3)
```

:::
::: {.column .fragment}

- Aesthetic mappings: visual preoperties that depend on data values (to be used in `aes()`)

```{r}
p0 + geom_point(aes(size = Petal.Length))
```

:::
:::

::: {.callout-tip appearance="minimal"}
Reference: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>
:::

## Aesthetics - Alpha {.smaller}

The most common aesthetics: color, fill, shape, size, **alpha** (transparency), *etc.*

::: {.columns .content-smaller}
::: {.column}
With no transparency:
```{r}
p0 + geom_point(size = 3)
```

:::
::: {.column .fragment}

Use the alpha (between 0 and 1) parameter:

```{r}
p0 + geom_point(size = 3, alpha = 0.5)
```

:::
:::

::: {.callout-tip appearance="minimal"}
Reference: <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>
:::


## Labels (Axes - Titles - Legend) {.smaller}

::: {.columns}
::: {.column}

```{r}
base_plot
```

Use `labs()` to modify labels of plot, axes, legend.

:::
::: {.column .fragment}

```{r}
p_labs <- base_plot + labs(
  x = "Sepal Length (cm)",
  y = "Petal Length (cm)",
  title = "Scatter plot with customized labels.",
  color = NULL # remove legend title
)
p_labs
```

:::
:::

## Add Other Layers {.smaller}

::: {.columns}
::: {.column}
```{r}
# the scatter plot with modified lables
p_labs
```
:::
::: {.column .fragment}

Add a linear regression line using `geom_smooth()`:

```{r}
p_regline <- p_labs + geom_smooth(method = "lm", se = FALSE)
p_regline
```

:::
:::

:::{.callout-tip appearance="minimal" .fragment}
Each `geom_*()` function adds a new layer to the plot, just like stacking transparent sheets on top of each other to build the final image.
:::

## Aesthetic Mappings {.smaller}

::: {.columns}
::: {.column}

```{r}
ggplot(
  data = iris,
  mapping = aes(
    x = Sepal.Length,
    y = Petal.Length
  )
) +
  geom_point(aes(color = Species)) +
  geom_smooth(method = "lm", se = FALSE)
```
:::
::: {.column .fragment}
::: {.callout-note appearance="minimal"}
Compare the following code with the code on the left.
What is different between the codes?
What is different about the resulting graphs?
:::

```{r}
ggplot(
  data = iris,
  mapping = aes(
    x = Sepal.Length,
    y = Petal.Length,
    color = Species
  )
) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

:::
:::

::: {.notes}
aes() in ggplot() or in geom_*(), if multiple layers
:::

## Common Used Geometries (1) {.smaller}

::: {.columns}
::: {.column}
- Boxplot:
```{r}
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
  geom_boxplot()
```
:::
::: {.column}
- Violin plot:
```{r}
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
  geom_violin()
```
:::
:::

## Common Used Geometries (2) {.smaller}

::: {.columns}
::: {.column}
- Histogram:
```{r}
ggplot(iris, aes(x = Sepal.Length)) +
  geom_histogram()
```
:::
::: {.column}
- Bar plot:
```{r}
ggplot(iris, aes(x = Species)) +
  geom_bar()
```
:::
:::

::: {.callout-tip appearance="minimal"}
`geom_histogram()` and `geom_bar()` only require one variable for the x-axis. The y-axis is automatically calculated.
:::

## Themes {.smaller}

::: {.columns}
::: {.column}
- Built-in themes (`theme_*()`): `theme_grey()` (default),`theme_bw()`, `theme_light()`, `theme_classic()`, *etc.*

```{r}
#| eval: false

p_labs + theme_classic()
```

```{r}
#| echo: false

p_labs + theme_classic() + theme(
  axis.title = element_text(size = rel(2)),
  axis.text = element_text(size = rel(2)),
  strip.text = element_text(size = rel(2)),
  plot.title = element_text(size = rel(2.5)),
  legend.text = element_text(size = rel(2)),
  legend.title = element_text(size = rel(2))
)
```

:::
::: {.column}
- Use `theme()` function to tweak elements, *e.g.*:

```{r}
p_labs + theme(
  legend.position = "none", # hide legend
  plot.title = element_text(
    hjust = 0.5, # center plot title
    size = 5, # plot title size
  ), 
  axis.text.x = element_text(angle = 90) # rotate axis' text
)
```
:::
:::


## Saving Your Graphs {.smaller}

Use `ggsave()` to save plots in high resolution for publications.

```r
ggsave(
  filename = "path/to/figure.png", # figure file name
  plot = last_plot(), 
  # save by default the last figure,
  # you can provide the figure name to specify the plot to be saved.
  device = "png",
  # can be one of "eps", "ps", "tex" (pictex), "pdf",
  # "jpeg", "tiff", "png", "bmp", "svg" or "wmf"
  width = 6.3,
  height = 4.7,
  units = "in", # can be one of "in", "cm", "mm" or "px"
  dpi = 300 # plot resolution
)
```

:::{.callout-note appearance="minimal" .fragment}
Save the basic plot to the `outputs` folder in your project.
Check the saved figure via the *Files* panel in RStudio.
:::

. . .

```{r}
#| eval: false

ggsave(
  filename = "../outputs/basic_scatter_plot.png",
  plot = base_plot,
  width = 5, height = 5, units = "cm", dpi = 150
)
```

# Let's Practice !

## Today's Goals

- Install new R packages
- Create basic plots with ggplot2
