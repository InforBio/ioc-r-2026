---
title: "More Complex Data Structures:<br>Data Frames and Lists"
subtitle: "IOC-R Week 3"
date: "2025-01-20"
date-format: " "
format:
  revealjs: 
    toc: true
    toc-title: "Plan"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: ../../images/logoInforBio_fond_blanc_small.png
    css: ../custom.css
echo: true
categories: 
  - week03
  - slides
image: images/preview_w3.png
---

# Last Week Review

## What We've Learned So Far {.smaller}

::: {.columns}
::: {.column}
- Data types
- Variable
- Data structures:
  - vector
  - matrix
:::
::: {.column .fragment}
::: {.callout-note appearance="minimal"}
What are the outputs for following codes?
:::
```{r}
#| eval: false

c(1, 3, 5)[3]
5:2
seq(1, 2, by = 0.5)
rep(c(1, 3), times = 2)
rep(c("case", "control"), each = 2)

```

<br>

:::{.fragment}

```{r}
mat <- matrix(1:6, nrow = 2)
mat
```
```{r}
#| eval: false

mat[1, ]
mat[, 2]
mat[2, 1]
```

:::
:::
:::


::: {.notes}
question/quiz time
:::

# Data Structures (Part 2)

## Data Structures

The 4 data structures to store multiple values:

:::{.content-smaller}

|                      | 1 dimension | 2 dimensions (row/column) |
|----------------------|:-----------:|:------------:|
| **Same** data type       | vector      | matrix       |
| **Different** data types | list        | data frame   |

:::

# Data Frames

A **two dimensional** data structure to store values of **any data type**.

## Data Frames Creation {.smaller}

Use `data.frame()` to create a data frame, separate columns by `,`.

::: columns
::: {.column}

```{r}
my_df <- data.frame(
  id = 1:10,
  gene_name = paste0("gene", LETTERS[1:10]),
  detected = "yes",
  gene_expr = c(
    12.4, 11.3, 13.5, 10.2, 11.4,
    0.5, 1, 1.2, 1.4, 0.6
  ),
  status = rep( # repetition
    c("activated", "inhibited"),
    each = 5
  )
)
my_df
```

:::

::: {.column .fragment}

```{r}
# Check the data structure
is.data.frame(my_df)
str(my_df)
```

::: {.fragment .callout-note appearance="minimal"}
- How many rows and columns?
- What is the data type for each column?
:::

:::
:::

## Exploring the Data Frame {.smaller}

::: columns
::: {.column}
```{r}
nrow(my_df)
ncol(my_df)
dim(my_df)
rownames(my_df)
colnames(my_df)
```

:::

::: {.column}
```{r}
head(my_df, n = 5)
tail(my_df, n = 3)
```

:::
:::

::: {.fragment}

```{r}
summary(my_df)
```

:::

## Accessing Elements (1) {.smaller}

Similar to matrix indexing, use `[`idx `, `idx`]` syntax to access elements with:

::: {.content-smaller}
- numeric index
- row/column names
- logical index
:::

```{r}
# Get 2nd and 3rd rows
my_df[2:3, ] 
my_df[-c(1, 4:10), ] # remove the other rows
```

```{r}
my_df[c("2", "3"), ]
my_df[c(FALSE, TRUE, TRUE, rep(FALSE, 7)), ]
```

## Accessing Elements (2) {.smaller}

::: {.columns}
::: {.column}
```{r}
my_df
```
:::
::: {.column}
::: {.callout-note appearance="minimal"}
How to get the 2nd and 3rd columns?
:::
:::{.fragment}

```{r}
my_df[, 2:3]
```

```{r}
#| eval: false

my_df[, c("gene_name", "detected")] # idem
my_df[, c(FALSE, TRUE, TRUE, FALSE, FALSE)] # idem
```

:::

:::{.fragment .callout-note appearance="minimal"}

How to get "geneH" from the data frame?

:::

:::{.fragment}

```{r}
my_df[8, 2]
my_df[8, "gene_name"]
```
:::

:::
:::


## Accessing Elements (3) {.smaller}

- Use the operator `$` or `[[` `]]` to get a column:

```{r}
my_df$gene_name
```

```{r}
#| eval: false

my_df[[2]] # idem, use numeric position
my_df[["gene_name"]] # idem, use column name
```
- Subset the data frame based on some conditions:

```{r}
# Keep rows where the value in the "status" column is "activated"
my_df[my_df$status == "activated", ]
```

::: {.callout-tip appearance="minimal"}
Don't worry, we'll go into more detail at the next session!
:::

## Be Careful of Data Structure {.smaller}

::: {.columns}
::: {.column}
If you select only 1 row of a data frame:

```{r}
str(my_df[2, ]) # still a data frame
```

```{r}
unlist(my_df[2, ]) # convert to a vector
```

::: {.fragment}
If you select only 1 column of a data frame:

```{r}
my_df[, 2]
is.vector(my_df[, 2]) # The output was "simplified" to a vector.
```

:::

:::
::: {.column .fragment}

To keep the output as a data.frame when you select only 1 column, specify `drop = FALSE`:

```{r}
my_df[, 2, drop = FALSE]
str(my_df[, 2, drop = FALSE])
```
:::
:::

## Data Frame Modification (1) {.smaller}

Modify existing column:

::: columns
::: {.column}

- The whole column

```{r}
my_df[["id"]] <- paste0("ID", my_df[["id"]])
my_df
```

```{r}
#| eval: false

my_df$id <- paste0("ID", 1:10) # idem
```

:::

::: {.column}

- Modify some elements

```{r}
my_df[["id"]][1:2] <- 1:2 
my_df
```

```{r}
#| eval: false

my_df[1:2, "id"] <- 1:2 # idem
```

:::
:::

## Data Frame Modification (2) {.smaller}

- Add new column

```{r}
my_df[["tissue"]] <- rep(c("liver", "muscle"), times = 5)
my_df
```

```{r}
#| eval: false

my_df$tissue <- rep(c("liver", "muscle"), times = 5) # idem
```

## Data Frame Modification (3) {.smaller}

- Delete column(s)

```{r}
my_df[["detected"]] <- NULL
my_df
```

```{r}
#| eval: false

my_df$detected <- NULL # idem
```

## Recoding Data Type {.smaller}

You need to recode the column data type if data is categorical, use the `factor()` function.

```{r}
my_df[["status"]] <- factor(my_df[["status"]])
my_df$tissue <- factor(
  my_df[["tissue"]],
  levels = c("muscle", "liver") # specify levels' order
)

# Check again the data
str(my_df)
summary(my_df)
```

## Data Frame Concatenation {.smaller}

::: {.columns}
::: {.column}

Use `cbind()` to bind two or more data frames by columns.

```{r}
df1 <- data.frame(x = 1:3, y = 4:6)
df1
df2 <- data.frame(a = 7:9, b = 10:12)
df2

cbind(df1, df2)
```

:::
::: {.column .fragment}
Use `rbind()` to bind two or more data frames by rows, columns names should be the same.
```{r}
#| error: true

rbind(df1, df2)

df3 <- data.frame(x = 7:9, y = 10:12)
rbind(df1, df3)
```
:::
:::

## Join Data Frames {.smaller}

Use `merge()` to join two data frames based on a common column.

::: {.columns}
::: {.column}

```{r}
df1 <- data.frame(id = 1:3, x = letters[1:3])
df1
df2 <- data.frame(id = c(2, 4), y = LETTERS[c(2, 4)])
df2
# inner join
merge(x = df1, y = df2, by = "id") 
```
:::
::: {.column}
```{r}
# left join
merge(x = df1, y = df2, by = "id", all.x = TRUE) 
# right join
merge(x = df1, y = df2, by = "id", all.y = TRUE) 
# outer join
merge(x = df1, y = df2, by = "id", all = TRUE)
```
:::
:::


# Lists

The most flexible data strucutre in R, with content(s) inside can be **any data structure**.

## Lists Creation {.smaller}

::: columns
::: {.column}
Use `list()` function to create a list, separate elements with `,`.
```{r}
x <- "geneA"
y <- c(10, 11, 0.5)
z <- c(TRUE, TRUE, FALSE)
simple_list <- list(x, y, z)
simple_list

# how many elements in the elements
length(simple_list)

# check the structure
str(simple_list)
```
:::

::: {.column .fragment}

We can name the elements of a list:

```{r}
# name the elements during creation
list(gene_name = x, counts = y, expressed = z) 

# or name the elements afterward
names(simple_list) <- c("gene_name", "counts", "expressed")
simple_list
```

:::
:::

## Subsetting a List {.smaller}

Use `[` `]` to subset a list, with numeric index, name or logical index.

::: columns
::: {.column}

```{r}
simple_list[c(1, 3)]
simple_list[c("gene_name", "expressed")]
simple_list[c(TRUE, FALSE, TRUE)]
```

:::

::: {.column .fragment}

::: {.callout-note appearance="minimal"}
What is the data structure after subsetting?

- `simple_list[c(1, 3)]`
- `simple_list[1]`
:::

::: {.fragment}
```{r}
str(simple_list[c(1, 3)])
str(simple_list[1])
```
:::

:::
:::

## Accessing Element (1) {.smaller}

```{r}
simple_list
```

- Use `$` to access named element:

```{r}
simple_list$counts
```

- Use `[[` `]]` for named or indexed element:

```{r}
simple_list[["counts"]]
simple_list[[2]]
```


## Accessing Element (2) {.smaller}

Once we have access to the element,
we can extract values according to the data structure of that element.

::: columns
::: {.column}

```{r}
my_list <- list(
  sample_info = data.frame(
    id = paste0("sample", 1:3),
    age = c(25, 27, 30)
  ),
  family_sequenced = list(
    sample1 = c("father", "mother"),
    sample2 = c("father", "mother", "sister"),
    sample3 = c("mother", "sister")
  )
)
my_list
```

:::

::: {.column .fragment}

::: {.callout-note appearance="minimal"}
How to extract the age of sample1?
:::

::: {.fragment}

```{r}
my_list[["sample_info"]][1, "age"]
```
:::

::: {.fragment .callout-note appearance="minimal"}
How to extract the sequenced family members of sample 2?
:::

::: {.fragment}
```{r}
my_list[["family_sequenced"]][["sample2"]]
```
:::

:::
:::

::: {.notes}
explain the data in list
:::

## List Modification {.smaller}

::: {.columns}
::: {.column}

```{r}
simple_list
```

- Modify an element
```{r}
simple_list[[1]] <- 1:10
simple_list
```

:::

::: {.column}
- Add an element

```{r}
simple_list[["new_element"]] <- 3:1
simple_list
```

- Remove an element

```{r}
simple_list[["expressed"]] <- NULL
simple_list
```

:::
:::

## List Concatenation {.smaller}

Use `c()` to concatenate two or more lists.

```{r}
list1 <- list(1:3, 4:6)
list2 <- list(letters[1:3], "A")

list_long <- c(list1, list2)
list_long
str(list_long)
```


# Let's Practice !

## Today's Goals

- Work with data frames and lists
- Calculate fold change of gene expression between groups
- Compare gene expression using the Wilcoxon test
- Visualize differences with boxplots