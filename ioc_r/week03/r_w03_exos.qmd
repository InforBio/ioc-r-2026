---
title: "Week 3 - Hands-On Examples"
format: 
  html: default
  # pdf: default
date: "2025-01-21"
date-format: " "
categories: 
  - week03
  - exercise
editor_options: 
  chunk_output_type: console
---

The R script is available here:
[link](https://raw.githubusercontent.com/InforBio/IOC/refs/heads/main/ioc_r/week03/r_w03_exos.R)

## Goals

- Work with data frames and lists
- Calculate fold change of gene expression between groups
- Compare gene expression using the Wilcoxon test
- Visualize differences with boxplots


## Data Frames

Use the following code to import the file "read-counts.csv" 
(you have already downloaded it for the hand-on examples of week01).
Name the imported data `expr_data`.

```{r}
expr_data <- read.table(
  file = "../exos_data/read-counts.csv",  # replace the path with your own
  header = TRUE, sep = ",", row.names = 1
)
```

1. Check the structure of `expr_data` using an appropriate R function.

```{r}
str(expr_data)
```

2. How many unique values are in sample WT.2?
- Use `unique()` to get the unique values;
- then use `length()` to check the number of elements.

```{r}
val_unique <- unique(expr_data[["WT.2"]])
head(val_unique)
n_unique <- length(val_unique)
n_unique

# all in one line
length(unique(expr_data[["WT.2"]]))
```

3. Extract expression levels for the gene "*LOH1*" in WT samples (WT.1, WT.2, ..., WT.10)
and SET1 samples (SET1.1, SET1.2, ..., SET1.10).
Store them as `expr_wt` and `expr_set1`.
Ensure they are vectors using `unlist()`. (see help with `?unlist`)

```{r}
expr_wt <- expr_data["LOH1", paste0("WT.", 1:10)]
expr_set1 <- expr_data["LOH1", paste0("SET1.", 1:10)]

# check data structure
str(expr_wt)
str(expr_set1)

# convert to vectors
expr_wt <- unlist(expr_wt)
expr_set1 <- unlist(expr_set1)

# check again the structure
str(expr_wt)
str(expr_set1)
```

::: {.callout-tip title="Stats Time!"}
**Fold change**

Fold change (FC) measures the relative change in gene expression between two conditions or groups.
(*e.g.*, treated *vs.* untreated, healthy *vs.* diseased).
$$
FC = \frac{Mean Expression in Group 2}{Mean Expression in Group 1}
$$

It's common to log2 transform the fold change :

$$
\begin{aligned}
  \text{FC} &= 1, \quad \log_2(\text{FC}) = 0 \Rightarrow \text{No change}\\
  \text{FC} &= 2, \quad \log_2(\text{FC}) = 1 \Rightarrow \text{Up-regulated} \\
  \text{FC} &= 0.5, \quad \log_2(\text{FC}) = -1 \Rightarrow \text{Down-regulated}
\end{aligned}
$$

:::

4. Calculate the fold change and log2 fold change for "*LOH1*" between WT and SET1 groups.
Is the gene up- or down-regulated?

```{r}
## Calculate the mean for each group
avg_wt <- mean(expr_wt)
avg_set1 <- mean(expr_set1)

## Get the fold change
fc <- avg_set1 / avg_wt

## log2 transformed fold change
lfc <- log2(fc)
lfc
```

::: {.callout-tip title="Stats Time!"}
**Mann-Whitney Wilcoxon Rank Sum Test**

The Wilcoxon Rank Sum test, also called Mann-Whitney test,
is a **non-parametric** test used to compare independant samples (groups).
It does not assume a normal distribution.

This test is particularly useful for ordinal data or when the assumptions of
parametric tests (like the t-test) are not met.

The idea is to bring the two groups together and sort all values in order.
![](images/wilcox_viz.png){width=65%}

(Figure credit: Lorette Noiret)

The hypotheses are:

- H0: two groups have the same distribution
- H1: two groups have different distribution

If H0 is true, then the ranks should be randomly distributed between the two samples (WA ≃ WB).
If H0 is false, then the larger ranks will be in one of the two groups  (WA < WB)

So we can make decision based on the sum of ranks in each group.
:::

5. Use `wilcox.test()` to compare *LOH1* expression between WT and SET1.
At $\alpha = 0.05$, what is your conclusion?

```{r}
wilcox.test(expr_wt, expr_set1)
```

As the p-value is smaller than 0.05, we can reject the H0.
There is a significant difference between two WT and SET1 samples for the expression of the *LOH1*.

6. Create a new data frame for *LOH1* gene expression in WT and SET1 samples with two columns:
  - "expr_value": expression levels
  - "group": WT or SET1

```{r}
expr_loh1 <- data.frame(
  expr_value = c(expr_wt, expr_set1),
  group = rep(c("WT", "SET1"), each = length(expr_wt))
)
expr_loh1
```

7. With the new data frame, draw a boxplot to compare expression between groups using `boxplot()`. (see `?boxplot`)

```{r}
boxplot(expr_value ~ group, data = expr_loh1)
```


## Lists

Here's a toy list storing information about three samples:

```{r}
my_list <- list(
  # sample information
  sample_info = data.frame(
    id = paste0("sample", 1:3),
    age = c(25, 27, 30),
    sex = c("F", "M", "F")
  ),
  ## expression matrix
  count_expr = matrix(
    1:6, ncol = 2, dimnames = list(
      paste0("sample", 1:3),
      paste0("gene", c("A", "B"))
    )
  ),
  # mesured genes
  gene_name = paste0("gene", c("A", "B")),
  # sequenced family members of each sample
  family_sequenced = list(
    sample1 = c("father", "mother"),
    sample2 = c("father", "mother", "sister"),
    sample3 = c("mother", "sister")
  )
)
my_list
```

1. Use `names()` to extract the names of the elements in the list.

```{r}
names(my_list)
```

2. Extract the `count_expr` matrix from the list.

```{r}
my_list[["count_expr"]]
```

3. From the matrix, find the expression value of geneA in sample2

```{r}
my_list[["count_expr"]]["sample2", "geneA"]
```

4. Calculate the total counts of each gene across all samples.

```{r}
colSums(my_list[["count_expr"]])
```

5. From `sample_info` data frame, extract the `age` column.

```{r}
my_list[["sample_info"]][["age"]]
```

6. Extract the 1st sequenced family member of sample3.

```{r}
my_list[["family_sequenced"]][["sample3"]][1]
```

7. Add a new element to the list, "gene_description", with the following values: 
`c("geneA" = "housekeeping gene", "geneB" = "stress response gene")`

```{r}
my_list[["gene_description"]] <- c(
  "geneA" = "housekeeping gene",
  "geneB" = "stress response gene"
)
```


::: {.callout-tip title="Bonus!"}
Check out this cheat sheet for the basic R commands:
[Base R Cheat Sheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf)
:::

---

#### Good job! 👏👏 You've taken your first big steps into R, and you're off to a great start, keep it up! 


