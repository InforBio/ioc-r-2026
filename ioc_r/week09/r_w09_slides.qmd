---
title: "String Tricks &<br>Final Review"
subtitle: "IOC-R Week 9"
date: "2025-03-17"
date-format: " "
format:
  revealjs: 
    toc: true
    toc-title: "Plan"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: ../../images/logoInforBio_fond_blanc_small.png
    css: ../custom.css
  # pdf:
  #   toc: true
echo: true
categories: 
  - week09
  - slides
image: images/preview_w9.jpg
---

# String Manipulation with {`stringr`}

## Strings Everywhere in Biological Data! {.smaller}

Where do we actually encounter strings (text) in our data?

. . .

- Strings stored in data columns, such as gene name, sample name, category.
- Colnames or rownames of data frame, names of named list or vector.
- File names and paths: *e.g.*, "GSE12345_raw.txt", "data/results_2023-10.csv"
- Figure labels: *e.g.*, axes' title, plot title.

. . .

What happens when these strings are messy, inconsistent, or need to be extracted?


## The {`stringr`} Package {.smaller}

```{r}
library(tidyverse)
# library(stringr) # or load only this package if needed
```

Almost all functions start with `str_`.

- Manage strings: `str_length()`
- Mutate strings: `str_to_title()`, `str_to_upper()`, `str_to_lower()`
- Detect strings<sup>1</sup>: `str_detect()`, `str_count()`

<sup>1</sup>: Need to provide a **pattern** which works with regular expressions (regex). By default, the pattern is **case-sensitive**, but this can be changed.

:::{.callout-tip appearance="minimal"}
Cheat sheet for `stringr`: <https://github.com/rstudio/cheatsheets/blob/main/strings.pdf>
:::

## `stringr` - Manage Strings {.smaller}

- `str_length()`: count string width

```{r}
seq1 <- "ATGCGTAGCTAGGCTATCCGA"

# using basic functions
length(unlist(strsplit(x = seq1, split = ""))) 

# use stringr's function
str_length(string = seq1)
```


## `stringr` - Mutate Strings {.smaller}

- `str_to_title()`: convert string to title case.

```{r}
human_gene <- c("ADCY3", "SOX5", "LEP")
mouse_gene <- str_to_title(human_gene)
mouse_gene
```

- `str_to_upper()`: convert string to upper case.

```{r}
str_to_upper(mouse_gene)
```

- `str_to_lower()`: convert string to lower case.

```{r}
str_to_lower(mouse_gene)
```


## `stringr` - Detect Strings {.smaller}

::: {.columns}
::: {.column}

- `str_detect()`: detect presence of a match, returns `TRUE` or `FALSE`.

```{r}
seq1
str_detect(string = seq1, pattern = "CG")
str_detect(string = seq1, pattern = "c")
```

:::
::: {.column}

- `str_count()`: count number of matches.

```{r}
seq1
# how many C and G present in the string?
str_count(string = seq1, pattern = "C")
str_count(string = seq1, pattern = "G")
str_count(string = seq1, pattern = "CG")

# using regular expression
str_count(string = seq1, pattern = "[CG]")
```

:::
:::

## Regular Expression {.smaller}

![](images/pattern_img.png){.absolute top=10 right=10 width="27%"}

- `[]`: Match any one of the characters inside.

```{r}
str_count(string = seq1, pattern = "[CG]") # using regular expression
```

- `^` or `$`: Matches the beginning or the end of a string.

```{r}
pathways <- c(
  "Adaptive Immune Response", "Cytokine Signaling in Immune System", "Inflammatory Response Pathway",
  "Cell Cycle Regulation", "Innate Immune System", "Toll-like Receptor Signaling Pathway"
)
str_detect(pathways, pattern = "^In") # starts with "In"
str_detect(pathways, pattern = "em$") # ends with "em"
```

- `|`: Matches one pattern Or another

```{r}
str_detect(pathways, pattern = "Response|Receptor")
```

:::{.callout-tip appearance="minimal"}
Cheat sheet for regular expression: <https://github.com/rstudio/cheatsheets/blob/main/regex.pdf>
:::


# Refresher on {`tidyverse`}

## Import and Export with {`readr`} {.smaller}

- Read structured (CSV, TSV) and unstructured (TXT) files.

```r
read_delim(file, delim, ...) # the general function
read_csv()
read_csv2() # use ";" as separator and "," for decimal
```
:::{.callout-tip appearance="minimal"}
- The `file` can be a path to a file (compressed or not) or a connection (a link), *e.g.*:

```r
read_csv2(file = "https://inforbio.github.io/IOC/ioc_r/exos_data/data_anonym_struc1_noise.csv")
```

- Observe your data before import: header, separator, decimal, NA strings, quotes, *etc.*
:::

- Write structured (CSV, TSV) and unstructured (TXT) files.

```r
write_delim(x , file, delim, na, ...)
write_csv()
write_csv2()
```

## Reshape Data with {`tidyr`} {.smaller}

- Reshape data to longer or wider format as needed.

![](images/pivot_img.png){width=70px}

. . .

```r
data |> pivot_longer(cols = -1, names_to = "condition", values_to = "value")
data |> pivot_wider(names_from = gene, values_from = value)
```

## Remove NA with {`tidyr`} {.smaller}

- Remove rows with missing values.

```r
data |> drop_na() # check across all columns
data |> drop_na(col1, col2) # specify columns where to check NA
```

## Data Example {.smaller}

The annotation data for the Yeast (*Saccharomyces cerevisiae*) gene was obtained from the [Ensembl](https://www.ensembl.org/index.html) data base.

```{r}
annot <- readr::read_csv("../exos_data/mart_export.txt.gz") # read a compresseed file
annot
```

## Manipulate Data with {`dplyr`} {.smaller}

::: {.columns}
::: {.column}

- `count()` occurence.

```{r}
annot |> count(`Gene type`)
```

:::
::: {.column}

```{r}
annot |>
  count(`Gene type`, `Chromosome/scaffold name`)
```

:::
:::

## Manipulate Data with {`dplyr`} {.smaller}

- `filter()` rows based on values in columns.

```{r}
annot |>
  filter(`Gene type` == "ncRNA" & `Chromosome/scaffold name` == "V")
```

## Manipulate Data with {`dplyr`} {.smaller}

- `filter()` rows based on values in columns.

```{r}
annot |>
  filter(stringr::str_detect(`Gene type`, "RNA"))
```


## Manipulate Data with {`dplyr`} {.smaller}

- `arrange()` rows based on values in columns.

```{r}
annot |>
  count(`Gene type`, `Chromosome/scaffold name`) |>
  arrange(`Chromosome/scaffold name`, desc(n))
```

## Manipulate Data with {`dplyr`} {.smaller}

- `select()` columns (with helper functions).

```{r}
annot |> select(1, 3, 5) |> head(3)

annot |>
  filter(stringr::str_detect(`Gene type`, "RNA")) |>
  select(contains(c("ID", "chrom", "descr"))) |>
  head(3)
```

## Manipulate Data with {`dplyr`} {.smaller}

- `mutate()` columns.

```{r}
annot |>
  mutate(gene_group = ifelse(
    test = `Gene type` == "protein_coding",
    yes = "protein_coding",
    no = "non protein_coding"
  )) |>
  select(1:2, gene_group)
```

## Manipulate Data with {`dplyr`} {.smaller}

- `summarize()` data.

```{r}
annot |>
  summarize(
    mean_gc = mean(`Gene % GC content`),
    max_gc = max(`Gene % GC content`),
    min_gc = min(`Gene % GC content`),
  )
```

## Manipulate Data with {`dplyr`} {.smaller}

- `group_by()` data. (Use `ungroup()` to remove grouping.)

```{r}
annot |>
  group_by(`Chromosome/scaffold name`) |>
  summarize(
    mean_gc = mean(`Gene % GC content`),
    max_gc = max(`Gene % GC content`),
    min_gc = min(`Gene % GC content`),
  )
```

## Visualisation with {`ggplot2`} {.smaller}

Syntax: `ggplot(data, aes(x, y)) + geom_xxx() + ...`

```{r}
annot |>
  filter(`Gene type` == "protein_coding") |>
  ggplot(aes(x = `Chromosome/scaffold name`, y = `Gene % GC content`)) +
  geom_boxplot() +
  labs(title = str_to_title("distribution across chromosome")) +
  theme_light()
```

# Let's Practice !

## Today's Goals

- Know how to process strings in the data
- Get familiar with the main tidyverse packege for data manipulation and visualisation.

# Final Project

## Reproducing a Scientific Figure with {`ggplot2`} {.smaller}

**Task:** Select a figure from a scientific paper and recreate it using ggplot2. Document your process in a **Quarto script** and present your work (15 min / person).  

Your report should include:

- **Figure Selection:** Why did you choose this figure?  
- **Data & Preprocessing:** Source of data, cleaning, transformations.  
- **Packages Used:** List and explain key packages.  
- **Challenges & Solutions:** Issues faced and how you resolved them.  
- **Plot Construction:** Steps taken to build the visualization.  
- **Final Comparison & Insights:** How close is your result? What did you learn?  
