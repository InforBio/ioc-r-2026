---
title: "Week 4 - Homework"
format: 
  html: default
categories: 
  - week04
  - homework
editor_options: 
  chunk_output_type: console
---

Note: There may be other valid ways to solve this exercise â€” this is just one possible solution!

1. Import the `read-counts.csv` file.

```{r}
counts <- read.csv(
  file = "../exos_data/read-counts.csv", # replace the path by your own
  row.names = 1
)
```

*Quick reminder*:
This data file contains gene expression values of samples from four groups,
sample names are prefixed by "WT.", "SET1.", "SET1.RRP6." and "RRP6.".
Each group has 10 samples.

2. Create a function to calculate the average gene expression across samples
by selected group. Test your function on WT samples.

```{r}
get_avg <- function(data = counts, gp_prefix) {
  ## create sample names according to group prefix
  samples <- paste0(gp_prefix, seq(10))

  ## subset data based on sample names
  gp_data <- data[, samples]

  ## calculate average across sample
  gp_avg <- rowMeans(gp_data)

  return(gp_avg)
}
get_avg(gp_prefix = "WT.")
```

3. Use function created in question 2 to calculate the average for
all sample groups, store the results in a list.
Show the first 5 average gene expression of SET1.RRP6 samples.

```{r}
avg_list <- list(
  WT = get_avg(gp_prefix = "WT."),
  SET1 = get_avg(gp_prefix = "SET1."),
  SET1.RRP6 = get_avg(gp_prefix = "SET1.RRP6."),
  RRP6 = get_avg(gp_prefix = "RRP6.")
)

head(avg_list[["SET1.RRP6"]], n = 5)
```

4. Transform the list obtained in question 3 to a data frame using `as.data.frame()`.
Show the head lines of your data frame.

```{r}
avg_df <- as.data.frame(avg_list)
head(avg_df)
```

:::{.callout-tip}
A data frame can be considered as a list of equal-length vectors.
:::

5. What are the genes having an average greater than 10000 in WT and SET1 samples?
Compare if there are genes in common using learned operator or the `intersect()` function.

```{r}
## extract genes met condition
target_wt <- rownames(avg_df[avg_df$WT > 10000, ])
target_set1 <- rownames(avg_df[avg_df$SET1 > 10000, ])

## check intersection
target_wt[target_wt %in% target_set1]
# or
target_set1[target_set1 %in% target_wt]
# or
intersect(target_wt, target_set1)
```

6. Create a function to check if the average expression of each sample group
is normally distributed (`?shapiro.test()`) using significance level at 5%.
If `TRUE`, draw directly a histogram (`?hist()`) for the values.
Otherwise, draw a histogram for the log-transformed values.
And return the p-value of normality test at the end.

Test your function on average expression of RRP6 samples.

```{r}
draw_hist <- function(data, gp) {
  ## extract needed data
  gp_data <- data[[gp]]

  ## perform test and extract p-value
  res_test <- shapiro.test(gp_data) # the result is a list
  pval <- res_test[["p.value"]]
  
  ## draw histogram according to normality
  if (pval < 0.05) {
    hist(
      log(gp_data),
      main = paste(gp, "Samples"),
      xlab = "log(Average Expression)"
    )
  } else {
    hist(
      gp_data,
      main = paste(gp, "Samples"),
      xlab = "Average Expression"
    )
  }

  ## return p-value from shapiro.test
  return(pval)
}

draw_hist(data = avg_df, gp = "RRP6")
```


7. Click "Render" to generate your Quarto report.