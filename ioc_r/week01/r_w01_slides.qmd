---
title: "Kickstart with R:<br>Your Gateway to Data Science"
subtitle: "IOC-R Week 1"
date: "2025-11-03"
date-format: " "
format:
  revealjs: 
    toc: true
    toc-title: "Plan"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: ../../images/logoInforBio_fond_blanc_small.png
    css: ../custom.css
    footer: '<div style="position: absolute; bottom: 0px; left: 70px; font-size:18px">
            <a href="https://inforbio.github.io/ioc-r-2026/ioc_r_toc.html">Back to ToC</a>
          </div>'
  # pdf:
  #   toc: true
categories: 
  - week01
  - slides
image: images/R_logo.png
---

# Unlock the Power of Your Data with ![](images/R_logo.png){width=2.7cm}

## Welcome to R! {.smaller}

R is a programming language and software environment designed for statistical computing and data analysis.

::: columns
::: {.column}

Why R?

- Biologist friendly!
- Free and open-source
- Supported by a huge community

:::

::: {.column .fragment}

What you can do with R?

- Analyze your data
- Visualize your findings
- Automate your workflow
- Share reproducible research
:::
:::

The official website: <https://www.r-project.org>

## The R Console {.smaller}

::: columns
::: {.column}
![](images/r_console.png)
:::

::: {.column .incremental}
In the R console:

- **`>`** (The prompt): R is ready for your command.
Type your code and press **Enter** to run it.
- **`[1]`** (Output): This indicates the start of an output line.
- **`+`** (Continuation): R is waiting for you to finish your command.
You can either finish the command or press **Esc** to cancel it.
:::
:::

::: {.notes}
In the R Console, the > prompt lets you know that R is ready for your command. Just type your code and hit Enter.
When you see the output, it will start with [1], which indicates the position of the first element.
If you see a + at the beginning of a new line, it means R is waiting for you to finish your command,
this often happens if you forget a parenthesis or a comma.
You can either finish it by typing the rest of the code or press the Esc key to cancel the input completely and get a fresh > prompt.
:::


# Rstudio

## Rstudio Login {.smaller}

If you use the RStudio Server, you need to connect to your account first.  

![](images/rstudio_server_login.png)

## Rstudio IDE {.smaller}

Integrated Development Environment (IDE)

::: columns
::: {.column width="55%"}
![](images/screenshot_rstudio.png)
:::

::: {.column width="45%" .fragment}
1. Console: enter and execute R commands interactively.
2. Environment/History: tracks your variables and past commands.
3. Files/Plots/Packages: managing your files, viewing graphs, or installing tools.

::: {.callout-note appearance="simple"}
Rstudio [cheat sheet](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf)
([and French version](https://rstudio.github.io/cheatsheets/translations/french/rstudio-ide_fr.pdf))
:::
:::
:::

:::{.notes}
Everything you need in one organized window.
Save your work as a script, RStudio includes many useful features which let us code easily.
notebook, show results
:::


## Getting Started {.smaller}

::: columns

::: {.column width="43%"}

- Open your RStudio.
- Create an R script: *File* -> *New File* -> *R Script* or click ![](images/rstudio_newfile.png){width=1.5cm}. (Will appeared at 4)
- Write your codes in the script.
- Save script: *Cmd/Ctrl + S*, name your script.
- Execute code: Click ![](images/rstudio_runcode.png){width=1.3cm} or press *Cmd/Ctrl + Enter*

:::

::: {.column width="57%"}
![](images/rstudio_fullpanel.png)
:::
:::

## Getting Started {.smaller}

Copy paste following codes into your script and save the script as `test.R`.  

- Basic codes (commands):
``` {.r code-line-numbers="1|2-4|6-8|10-12|14-15|17-18|20-21"}
# Use `#` to write a comment (line) in your script
# Math with R:
2 + 2    # Yes, R can do math!
sqrt(16) # Square root.

# Create a variable:
x <- 5 # Now x is 5. You can reuse it!
x + 1

# Inspect your environment:
## Look at the "Environment" pane, do you see your x?
ls()

# Load a package:
library(stats)

# Get help of a function (documentation):
?mean

# Quit RStudio properly
q()
```


## Some Configuration {.smaller}

Go to *Tools* -> *Global Options...*

::: columns
::: {.column width="50%"}
- Under the *General* tab:

  - Uncheck the box "Restore .RData..."
  - Set "Save workspace to .RData on exit" to **Never**.

Then click "Apply".
:::

::: {.column width="50%"}
![](images/rstudio_setting1.png)
:::
:::

## Some Configuration {.smaller}

Go to *Tools* -> *Global Options...*

::: columns
::: {.column width="50%"}

- Under the *Code* tab:

In the *Display* panel, check the box "Use rainbow parentheses"

Then click "Apply".
:::

::: {.column width="50%"}
![](images/rstudio_setting2.png)
:::
:::

## Some Configuration {.smaller}

Go to *Tools* -> *Global Options...*

::: columns
::: {.column width="50%"}
- Under the *Appearance* tab:

You can select a theme for you RStudio, e.g., the "Cobalt" for a dark theme.

- Under the *Pane Layout* tab:

You can arrange the four panels as you prefer.

In addition, click "Add Column" lets you open an extra "Source" code column, allowing you to view your scripts side by side!

Then click "Apply".
:::

::: {.column width="50%"}
![](images/rstudio_setting3.png)
:::
:::


# Setting Up an R Project

## Create an R Project {.smaller}

An R project keeps everything for your project in **one working directory**
and helps R to know where to look for your files.

. . .

1. In RStudio, go to *File* -> *New Project*
2. Choose *New Directory* and click *New Project*
3. Set a folder name (e.g., `r_week1`) and select where to save it.
4. Click *Create Project*

. . .

You'll notice RStudio restarts, and now your project is set up!

![](images/in_rproj.png){width=50%}

::: {.notes}
An R Project is a way to keep everything for your work (scripts, data, outputs) in one place.
Think of it like a special folder where RStudio automatically knows where to look for your files.
It helps avoid problems with messy file paths.
:::


## Create an R Project {.smaller}

![](images/rstudio_workingdir.png)


## A Well Organized Project Folder {.smaller}

- Tree structure:

```sh
r_week1              # Your working directory    
├── r_week1.Rproj    # The R project configuration file
├── README.md           # A short introduction of the project
├── data                # Raw data files
│   └── raw_count.tsv
├── scripts             # Your R code files
│   └── 01-analysis.R
│   └── 02-figures.R
└── outputs             # Results, e.g., graphs, reports
```

. . .

- Managing Files (via the *File* pane):
  - To create a new folder: click ![](images/rstudio_create_folder_button.png){width=1cm}. The folder will be created in the current directory.
  - To move a file or folder: check the box next to its name, click ![](images/rstudio_gear.png){width=1cm} and then select *Move...* to choose a new destination.

. . .

::: {.callout-tip appearance="simple"}
- Create `data` and `scripts` folders inside your working directory.
- Move the `test.R` into the `scripts` folder of your working directory.  
:::

:::{.notes}
example of bad home organisation: pillow in kitchen and microoven in the bathroom
The trunk is the main folder (your R Project).
Branches are subfolders for scripts, data, and output, ect.
By building a clear structure, you’ll:
Always know where to find things.
Save time when coding in R or sharing your project with others.
Avoid messy files scattered everywhere.
:::


## Understanding File Paths {.smaller}

How to tell your computer where to find the `test.R`?

![](images/finder_abs_path.png)

. . .

- **Absolute path**, starts from the very top of your computer's folder.
*E.g.*: 
  - Linux/Mac: `/Users/lijiao/Documents/r_week1/scripts/test.R`
  - Windows: `C:\Users\lijiao\Documents\r_week1\scripts\test.R`


## Understanding File Paths {.smaller}

A **path** tells your computer where to find files/folders.

- **Relative path**, starts from your working directory (folder). *E.g.*:
  - Linux/Mac: `scripts/test.R` 
  - Windows: `scripts\test.R`

![](images/finder_rel_path.png){width=80%}


## Where Are You? {.smaller}

```sh
r_week1              # Your working directory
├── r_week1.Rproj    # The R project configuration file
├── data             # Raw data files
└── scripts          # Your R code files
    └── test.R
```
<br> 

```r
> getwd() # Get working directory
[1] "/Users/lijiao/Documents/r_week1"
```

::: {.fragment .callout-tip appearance="simple"}
What are the absolute and relative paths of the folder "data"?
:::


::: {.fragment style="font-size:75%"}
absolute path: `/Users/lijiao/Documents/r_week1/data`

relative path: `data`
:::

. . .

```r
> file.exists("/Users/lijiao/Documents/r_week1/data")
[1] TRUE
> file.exists("data")
[1] TRUE
```

# Data Import & Export

## Import Data

::: columns
::: {.column style="font-size: 60%;"}

- Supported formats:  
  - text files (.txt, .csv, *etc.*)
  - Excel files
  - data from other softwares (*e.g.*: SAS)

- Click-button methods:  
  - From menu bar:
    *File* -> *Import Dataset* -> Select the format -> Choose your file
  - From the "Environment" pane:
    click *Import Dataset*  -> Select the format -> Choose your file
  - From the "Files" pane:
    Navigate to your file location -> Click the file and select *Import Dataset* (need the {*readr*} package)

:::

::: {.column .fragment}
![Pop-up window using the {readr} import wizard.](images/import_data_readr.png)
:::
:::

## Import Data {.smaller}

Importing your first file: [shiny_sample_data.csv](https://raw.githubusercontent.com/InforBio/ioc-r-2026/refs/heads/dev-r/ioc_r/exos_data/shiny_sample_data.csv)

1. Right click the link and select "Download Linked File As..." (or the equivalent on your system).
2. Save the file into the `data` folder of the R project `r_week1`
3. Import the data with one of the three click-button ways.

::: {.notes}
When you select the file, a preview window will pop up.
RStudio tries to guess the data's properties, but you should always confirm them.
:::

::: {.callout-note appearance="simple"}
# Think before you import the data

- How do you want to name the imported data?
- Is there a header?
- What is the column separator?
- Which sign is used as the decimal?
:::

Once you've checked these settings and the preview looks correct, click *Import*.


## Import Data {.smaller}

![](images/rstudio_import.png)


## Export Data {.smaller}

We'll use the built-in iris dataset and save it in the CSV format using the `write_csv()` function from the {*readr*} package.

```r
head(iris) # show the first lines of the dataset
View(iris) # preview the whole dataset
?write_csv # get help of the function
```

**Goal**: Save the built-in `iris` dataset as a CSV file named `iris_export.csv` inside the `outputs` folder of the project.

. . .

1. Create the `outputs` folder.
2. Type the following command and execute it:

```r
write_csv(iris, file = "outputs/iris_export.csv")
```

. . .

::: {.callout-tip appearance="simple"}
Go to the *Files* pane, can you find the saved file?
:::

. . .

(We'll talk about other formats in the future!)

::: {.notes}
Once you've cleaned, analyzed, or modified a dataset in R, you'll want to save it. While you can save data in many formats, we'll use the most common one, a CSV file, as our example. We'll use the built-in iris dataset.
:::


# Need Some Help?

## Different Solutions {.smaller}

- Google it!
- Forums: Stack Overflow, [Cirad](https://forums.cirad.fr/logiciel-R/)(francophone), *etc.*
- Ask/discuss your question via Slack.
- AI tools (like ChatGPT or Gemini) can be very helpful resources😉, but be careful of false answers! (More details in session 6)

**Key points**:

- Be specific.
- Provide context: code, error, *etc.*
- Always verify.
- Protect sensitive data.


::: {.notes}
google/forum stack overFlow
- what are you trying to do / what did you try?
- the warning or error message / your code / your data structure
- language name / function or package name / a specific problem
- try and iterate
:::

## PDF of Slides {.smaller}

To save the slides as a PDF:

- Open the presentation in a web browser
- Press "**e**" to enable PDF export mode
- Press **Cmd/Ctrl + P** to open the in-browser print dialog.
- Change layout to "Landscape".
- Select "**save as PDF**" as the printer option and save the file.

After saving, press "**e**" again to return to presentation mode.

# Let's Practice !

## Today's Goals

- Get familiar with the RStudio
- Create an R project in RStudio
- Import data file into RStudio
- Export data from RStudio
