---
title: "Week 6 - Hands-On Examples"
format: 
  html: default
  # pdf: default
date: "2026-01-06"
date-format: " "
categories: 
  - week06
  - exercise
editor_options: 
  chunk_output_type: console
execute: 
  error: true
---

The R script is available here:
[link](https://raw.githubusercontent.com/InforBio/ioc-r-2026/refs/heads/main/ioc_r/week06/r_w06_exos.R)

## Goals

- Hands-on challenge: “Fix the Code”
- Mini data analysis project
  - Data cleaning
  - Simple analysis
  - Visualisation

## "Fix the Code" Challenge

1. Fix the data frame error.

```{r}
data <- data.frame(
  gene = c("BRCA1", "TP53", "MYC")
  expression = c(10.5, 8.2, 12.7)
  condition = c("Tumor", "Normal", "Tumor")
)
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

data <- data.frame(
  gene = c("BRCA1", "TP53", "MYC"),
  expression = c(10.5, 8.2, 12.7),
  condition = c("Tumor", "Normal", "Tumor")
)
```

2. Fix error when using the `mean()` function.

```{r}
counts <- data.frame(
  sample1 = c(1, 2, 3),
  sample2 = c(1, 1, 3),
  sample3 = c(0, 1, 2),
  row.names = paste0("gene", 1:3)
)
counts

mean(counts["gene3", ])
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

mean(unlist(counts["gene3", ]))
# or
mean(as.matrix(counts)["gene3", ])
```

3. Fix error in condition. The goal is to find which value is 3 from the vector.

```{r}
vec_num <- c(4, 6, 8, 3, 2, 4, 7, 3, 9, 3)
which(vec_num = 3)
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

which(vec_num == 3)
```


4. Fix error in ggplot2.
The goal is to show petal length with a boxplot for each species.

```r
ggplot(iris, aes(x = Sepal.Length, y = Species))
geom_boxplot()
```

```{r}
#| echo: false
ggplot(iris, aes(x = Sepal.Length, y = Species))
geom_boxplot()
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

library(ggplot2) # load the package before use
ggplot(iris, aes(x = Sepal.Length, y = Species)) + # need "+" between layers
  geom_boxplot()
```

5. Fix error in ggplot2. The aim is to draw boxplot for each group.

```{r}
# simulate data for two groups of samples.
set.seed(1)
data <- data.frame(
  gp = rep(1:2, each = 20),
  value = c(rnorm(20), rnorm(20, mean = 5))
)
str(data)
# draw boxplot by group.
ggplot(data, aes(x = gp, y = value)) + 
  geom_boxplot()
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

ggplot(data, aes(x = factor(gp), y = value)) + 
  geom_boxplot()
```

6. Fix code in data filtration.

```{r}
# try to keep rows where the value is smaller than -0.5
data[data$value<-0.5, ]
```

```{r}
#| code-fold: true
#| code-summary: "Correction"

str(data) # the original data was changed!

# rebuild the data frame
set.seed(1)
data <- data.frame(
  gp = rep(1:2, each = 20),
  value = c(rnorm(20), rnorm(20, mean = 5))
)

data[data$value < -0.5, ]
```

## Basic Analysis Workflow

- Data collection
- Quality control & Data preparation
  - Check missing values, outliers, input error, *etc.*
  - Clean the dataset, reshape the data, recode variables, transform data if needed.
- Exploratory analysis
  - Use summary statistics (means, medians, counts, *etc.*)
  - Visualize with tables and plots to understand distributions and trends.
- Inferential statistics & modeling
  - Apply statistical tests or fit models to answer the biological question.
  - Example: t-test, ANOVA, linear regression, *etc.*
- Results interpretation

## Mini Data Project

Gene expression data were collected from samples of two groups.
Help the researcher to perform data quality control and
check if the expression is different between groups.

Tasks:

1. Download the data ([link](https://raw.githubusercontent.com/InforBio/ioc-r-2026/refs/heads/main/ioc_r/exos_data/rna_seq_simulated_data.csv)) and import it into Rstudio, name it `rnaseq_data`.

```{r}
#| code-fold: true
#| code-summary: "Correction"

rnaseq_data <- readr::read_csv("../exos_data/rna_seq_simulated_data.csv")
rnaseq_data
```


2. Perform data quality control and describe the data.

::: {.callout-tip collapse="true" title="Hints"}
- If missing value exists, which variable(s) and sample(s) are concerned?
- Do we need to recode variable?
:::

```{r}
#| code-fold: true
#| code-summary: "Correction"

# Summarise data
summary(rnaseq_data)

# Show only rows with missing values
rnaseq_data[is.na(rnaseq_data$expression), ]

## or find the index of NAs
which(is.na(rnaseq_data$expression))
rnaseq_data[which(is.na(rnaseq_data$expression)), ]

## recode the sample_group as factor
rnaseq_data$sample_group <- factor(rnaseq_data$sample_group, levels = c("Control", "Case"))
```

3. Remove rows with missing values.
Create a new dataset without missing values.

```{r}
#| code-fold: true
#| code-summary: "Correction"

# Remove rows where expression is NA
data_clean <- rnaseq_data[!is.na(rnaseq_data$expression), ]

# Show the cleaned dataset
data_clean
```

4. Find the average expression (`mean()`) and the standard deviation (`sd()`) 
for each sample group (Control *vs.* Case)

```{r}
#| code-fold: true
#| code-summary: "Correction"

# Compute mean and sd of expression for each sample group
expr_ctrl <- data_clean$expression[data_clean$sample_group == "Control"]
mean(expr_ctrl)
sd(expr_ctrl)

expr_case <- data_clean$expression[data_clean$sample_group == "Case"]
mean(expr_case)
sd(expr_case)
```

5. Use `data_clean` to visualize expression between two groups.

```{r}
#| code-fold: true
#| code-summary: "Correction"

## Boxplot
ggplot(
  data_clean,
  aes(x = sample_group, y = expression, fill = sample_group)
) +
  geom_boxplot() +
  geom_point(
    position = position_jitter(height = 0, width = 0.2, seed = 1),
    alpha = 0.5
  ) +
  labs(
    title = "Expression Levels by Group",
    x = NULL,
    y = "Expression"
  ) +
  theme(legend.position = "none")

## Violin plot to show variability and density of expression levels
ggplot(
  data_clean,
  aes(x = sample_group, y = expression, fill = sample_group)
) +
  geom_violin() +
  geom_point(
    position = position_jitter(height = 0, width = 0.2, seed = 1),
    alpha = 0.5
  ) +
  labs(
    title = "Violin Plot - Expression Distribution per Group",
    x = NULL,
    y = "Expression"
  ) +
  theme(legend.position = "none")

```


6. **To go futher**: Let's visualise the average expression of each group using a barplot as shown below,
with the help of ChatGPT (or any other AI tool).

```{r}
#| echo: false

ggplot(data_clean, aes(x = sample_group, y = expression)) +
  stat_summary(fun = mean, geom = "bar", fill = "orange", width = 0.5) +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
  geom_point(
    position = position_jitter(width = 0.1, height = 0, seed = 1),
    alpha = 0.5
  ) +
  labs(
    title = "Mean Gene Expression by Sample Group",
    subtitle = "The error bars represent the standard errors.",
    x = NULL, y = "Mean Expression Level"
  ) +
  theme_minimal()
```

6a. Prepare data for barplot with error bars.

::: {.callout-tip collapse="true" title="Hints"}
We need to reorganize the data in a dataframe with 2 rows and 3 columns:

- the column `group` contain the name of each group 
- the column `mean_val` contain the mean expression in  of each group 
- the column `se_val` contain the standard errors (SE) ($SE_{gr_i} = \frac{SD_{gr_i}}{sqrt(n_{gr_i})}$)
:::

```{r}
#| code-fold: true
#| code-summary: "Correction"

gg_data <- data.frame(
  group = factor(c("Control", "Case"), levels = c("Control", "Case")),
  mean_val = c(mean(expr_ctrl), mean(expr_case)),
  se_val = c(
    sd(expr_ctrl) / sqrt(length(expr_ctrl)),
    sd(expr_case) / sqrt(length(expr_case))
  )
)

gg_data
```

6b. Draw the bar plot:

- Plot bars for mean expression (`geom_bar(stat = "identity")`)
- Add error bars for standard errors (`geom_errorbar()`)
- Change the aesthetic apsects as you want, *e.g.*: color, title, legend, *etc.*

```{r}
#| code-fold: true
#| code-summary: "Correction"

p_bar <- ggplot(data = gg_data, aes(x = group, y = mean_val)) +
  geom_bar(stat = "identity", fill = "orange", width = 0.5) # bar plot
p_bar

p_bar_error <- p_bar +
  geom_errorbar( # add errorbar
    aes(
      ymin = mean_val - se_val, 
      ymax = mean_val + se_val
    ), 
    width = 0.2 # smaller width of error bar
  )

# change labels and theme
p_bar_error +
  labs(
    title = "Mean Gene Expression by Sample Group",
    subtitle = "The error bars represent the standard errors.",
    x = NULL, y = "Mean Expression Level"
  ) +
  theme_minimal()
```


6c: What if we want to add the expression level of each sample to the bar plot?

::: {.callout-tip collapse="true" title="Hints"}
Add another layer for drawing points (`geom_point`), using the data frame that contains the individual data (`data_clean`).
:::

```{r}
#| code-fold: true
#| code-summary: "Correction"

# change labels and theme
p_bar_error +
  labs(
    title = "Mean Gene Expression by Sample Group",
    subtitle = "The error bars represent the standard errors.",
    x = NULL, y = "Mean Expression Level"
  ) +
  theme_minimal() +
  geom_point( # add the layer of points
    data = data_clean, # use the individual data
    aes(x = sample_group, y = expression), # map axes
    position = position_jitter( # add random noise to avoid overlap between points
      width = 0.1, height = 0, # allow the points to be spread across a small horizontal range (width = 0.1),
      # while keeping the value on y-axis fixed (height = 0)
      seed = 1
    ),
    alpha = 0.5 # transparency
  )
```

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Alternative"

# alternative use stat_summary
ggplot(data_clean, aes(x = sample_group, y = expression)) +
  stat_summary(fun = mean, geom = "bar", fill = "orange", width = 0.5) +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
  geom_point(
    position = position_jitter(width = 0.1, height = 0, seed = 1),
    alpha = 0.5
  ) +
  labs(
    title = "Mean Gene Expression by Sample Group",
    subtitle = "The error bars represent the standard errors.",
    x = NULL, y = "Mean Expression Level"
  ) +
  theme_minimal()
```

7. Is the expression different between groups?
Select a test to compare the expression between groups.
What is your conclusion?

```{r}
wilcox.test(expr_ctrl, expr_case)

# or check the normality and perform a t-test
shapiro.test(expr_ctrl)
shapiro.test(expr_case)
t.test(expr_ctrl, expr_case)
```

---

#### Good job! 👏👏 You've taken your first big steps into R, and you're off to a great start, keep it up! 


