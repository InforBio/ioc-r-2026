---
title: "R-fresh:<br>Revisiting the Essentials"
subtitle: "IOC-R Week 6"
date: "2026-01-05"
date-format: " "
format:
  revealjs: 
    toc: true
    toc-title: "Plan"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: ../../images/logoInforBio_fond_blanc_small.png
    css: ../custom.css
    footer: '<div style="position: absolute; bottom: 0px; left: 70px; font-size:18px">
               <a href="https://inforbio.github.io/ioc-r-2026/ioc_r_toc.html">Back to ToC</a>
             </div>'
  # pdf:
  #   toc: true
echo: true
categories: 
  - week06
  - slides
image: images/xkcd_parenthesis.png
---


# Mini Test

## Test Your Level {.smaller}

<div style="transform: scale(0.75); transform-origin: top left; width: 100%; height: 100%;">
  <iframe
    allowfullscreen
    mozallowfullscreen
    frameborder="0"
    width="1000px" 
    height="750px"
    src="https://app.wooclap.com/UBZAPL/questionnaires/68b1b13144df9e61ac1f4172" style="border:0;">
  </iframe>
</div>


# R Projects

## Organizing Your Work Like a Pro {.smaller}

Use R Projects to manage files and scripts in a structured way.

- Keep data, scripts, and outputs in separate folders to avoid chaos.

- Example:

```bash
my_project/
  ├── README.md      # A short description of project
  ├── data/          # Raw data files (e.g., RNA-seq counts)
  ├── scripts/       # R scripts for preprocessing & analysis
  └── outputs/       # Output figures & tables
```

## Where's Your File? {.smaller}

A path tells your computer where to find files/folders.

- **Absolute path**, starts from the very top of your computer’s folder.
- **Relative path**, starts from your working directory (folder).

::: {.callout-tip appearance="simple" .fragment}
Your working directory is `/Users/lijiao/my_project/`,
you want to import a file loacated at `/Users/lijiao/Download/data.csv` using the `read_csv()` function.

Which of the following is the correct way to read the file?

```r
# option A
read_csv(file = "data.csv")

# option B
read_csv(file = "Download/data.csv")

# option C
read_csv(file = "/Users/lijiao/Download/data.csv")
```
:::


# Data Import and Export

## Text and Excel Files {.smaller}

::: {.columns}
::: {.column}
- Text format (.txt, .csv)

```{r}
#| eval: false

# use {base}'s functions
## Import
text_file <- read.table("path/to/file.txt")
csv_file <- read.csv("path/to/file.csv")

## Export
write.table(
  x = df,
  file = "outputs/cleaned_gene_expression.txt"
)
write.csv(
  x = df,
  file = "outputs/cleaned_gene_expression.csv"
)

# use {readr}'s functions
## Import
readr::read_csv(
  file = "outputs/cleaned_gene_expression.csv"
)
## Export
readr::write_csv(
  x = df,
  file = "outputs/cleaned_gene_expression.csv"
)
```

:::
::: {.column}

- Excel format (.xlsx, .xls)

```{r}
#| eval: false

# use {readxl}'s functions
## Import
xlsx_file <- readxl::read_xlsx("path/to/file.xlsx")
xls_file <- readxl::read_xls("path/to/file.xls")

# use {xlsx}'s function
## Export
xlsx::write.xlsx(
  x = df,
  file = "outputs/cleaned_gene_expression.xlsx"
)
```

:::{.callout-note appearance="simple" .fragment}
- Don't forget to use arguments to specify if your data has header, row names, *etc.*
- Cheat sheet for data import/export with {readr} and {readxl} in R: <https://github.com/rstudio/cheatsheets/blob/main/data-import.pdf>
:::

:::
:::

## R Specific Formats {.smaller}

::: {.columns}
::: {.column}
- **RDS** (for preserving a single R object)

```{r}
#| eval: false

saveRDS(
  object = df,
  file = "outputs/cleaned_gene_expression.rds"
)

# load RDS data into environment
my_df <- readRDS(
  file = "outputs/cleaned_gene_expression.rds"
)
```

:::
::: {.column}
- **RData** (for saving multiple R objects at once)

```{r}
#| eval: false

save(
  df,
  summary_stats,
  file = "outputs/analysis_results.RData"
)

# Load all objects back into the environment
# with their original names
load("outputs/analysis_results.RData")
```
:::
:::

<br>

:::{.callout-note appearance="simple" .fragment}
Both `.RDS` and `.Rdata` preserve data structures, such as column data types (numeric, character or factor).
:::


# Variables & Data Types

## What’s in Your Data? {.smaller}

| Data Type  |	Example in Biology |
|:-----------|:---------------------|
| Numeric    |	Expression levels (`25.3`)|
| Character  |	Gene names (`"TP53"`,` "BRCA1"`)|
| Logical    |	Mutation status (`TRUE` for mutated, `FALSE` for WT)|

::: {.fragment}
```{r}
x <- 1
y <- 2
total <- x + y
total
```

:::{.callout-tip appearance="simple"}
- If we change `x` to 5, is the value stored in `total` changed?
- If `total` is not changed, what do you need to do to update the value in `total`?
:::

:::

# Data Structures

## How Do You Store Your Data? {.smaller}

::: {.columns}
::: {.column}
- **Vectors**

  - 1D homogeneous data (all elements of the same type).
  - Use cases: A list of gene names, expression levels, or p-values.
  - Use `[]` for indexing
:::
::: {.column}
```{r}
gene_names <- c("TP53", "BRCA1", "EGFR", "INS")
gene_names[1]  # First gene: "TP53"
gene_names[c(2, 4)]  # Select multiple genes

# factor
mut_gp <- factor(c("wt", "wt", "mut", "mut"))
mut_gp
mut_gp[3]
```

:::
:::


## How Do You Store Your Data? {.smaller}

::: {.columns}
::: {.column}
- **Data Frames**

  - 2D heterogeneous data, a collection of equal-length vectors of one or more data types.
  - Use `[, ]` for indexing
  - Use `$` and `[[ ]]` to extract one column.

```{r}
df <- data.frame(
  Gene = c("TP53", "BRCA1", "EGFR"),
  Expression = c(25.3, 12.5, 30.1),
  Mutation = c(TRUE, FALSE, TRUE)
)
df
```

:::
::: {.column}

```{r}
df$Gene  # Select column as a vector
df[, "Expression"]  # Same as df$Expression
df[[2]]  # Same as df$Expression
df[1, ]  # First row
df[df$Expression > 30, ]  # Filter expression bigger than 30
df[which(df$Mutation), ]  # Filter mutated genes
```

:::
:::


# Conditions & Operators

## Filtering Data with Accuracy in R {.smaller}

| Type |	Operator |	Example |
|:----------|:---------------------:|:--------------:|
|Comparison |	==, !=, >, <, >=, <=	| p_value < 0.05 |
|Logical    | `&` (AND), `|` (OR), `!` (NOT) | TRUE & FALSE |

<br>

::: {.fragment}

```{r}
age <- c(18, 27, 20, 23, 22)
# extract age between 20 and 25
age[age < 20 | age > 25]
```

:::
::: {.fragment}

```{r}
genes <- data.frame(
  gene = c("TP53", "BRCA1", "EGFR"),
  expr = c(25.3, 12.5, 30.1),
  gene_family = c("A", "A", "B")
  
)
# filter gene with expression greater than 20
genes[genes$expr > 20, ]
```

:::


# ggplot2: Visualizing Your Results

## Basic Graphing {.smaller}

Syntax: `ggplot(data, aes(x, y)) + geom_*()`

```{r}
#| echo: false

library(ggplot2)
theme_set(theme_grey())
theme_update(
  axis.title = element_text(size = rel(2)),
  axis.text = element_text(size = rel(2)),
  strip.text = element_text(size = rel(2)),
  plot.title = element_text(size = rel(2.5)),
  legend.text = element_text(size = rel(2)),
  legend.title = element_text(size = rel(2))
)
```

::: {.columns}
::: {.column}
```{r}
library(ggplot2)
df <- data.frame(
  Expression = c(
    25.3, 12.5, 30.1, 27.8, 18.2, 35.6
  ),
  Condition = rep(c("WT", "KO"), 3)
)
df
```

:::
::: {.column}
```{r}
ggplot(
  data = df,
  aes(x = Condition, y = Expression)
) +
  geom_boxplot()
```

:::{.content-smaller}
Possible to change aesthetics (color, fill, shape, alpha (transparency), *etc.*), theme, scales, *etc.*
:::

```{r}
#| eval: false

## save figure
ggsave(filename = "path/to/my_figure.png")
```
:::
:::


# Using AI to Solve Coding Problems in R

## How Can AI help Us? {.smaller}

- Debugging: Identify and troubleshoot error/warning messages
- Generate code snippets (filter data, visualize, define functions, etc.)
- Explain unfamiliar code and documentation
- Enhance code quality (readability, efficiency, optimization)
- ...

Different AI tools: ChatGPT, Gemini, Perplexity, Claude, Le Chat, DeepSeek, *etc.*

:::{.callout-important appearance="simple"}
AI is a great assistant, but it can make mistakes, always verify outputs!
:::


## How to ask AI for help effectively? {.smaller}

✅ Be specific: Instead of "Why is my code not working?", ask:

> "I’m trying to filter a data frame in R where Expression > 10, but I get an error. Here’s my code: df[df$Expression > 10]. How can I fix it?"

✅ Provide context:

- A quick mention of your background can guide the response (*e.g.*: "I'm biologist working with gene expression data")
- What is your goal?
- What error message do you see?
- What does your dataset look like?

# Let's Practice!

## Today's Goals

- Hands-on challenge: “Fix the Code”
- Mini data analysis project
  - Data cleaning
  - Simple analysis
  - Visualisation
